
EthernetTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016044  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b4  08016244  08016244  00026244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080192f8  080192f8  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  080192f8  080192f8  000292f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019300  08019300  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019300  08019300  00029300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019304  08019304  00029304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08019308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b888  20000084  0801938c  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b90c  0801938c  0003b90c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000452d8  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c44  00000000  00000000  0007538a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025f0  00000000  00000000  0007cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002418  00000000  00000000  0007f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011a81  00000000  00000000  000819d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e233  00000000  00000000  00093459  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123657  00000000  00000000  000c168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4ce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a368  00000000  00000000  001e4d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0801622c 	.word	0x0801622c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0801622c 	.word	0x0801622c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fc05 	bl	8000df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f90c 	bl	8000808 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f8ac 	bl	800074c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f8da 	bl	80007ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f004 feae 	bl	8005358 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x34>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x38>)
 8000602:	f004 ff3b 	bl	800547c <osThreadNew>
 8000606:	4602      	mov	r2, r0
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <main+0x3c>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f004 fed8 	bl	80053c0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x30>
 8000612:	bf00      	nop
 8000614:	080190ec 	.word	0x080190ec
 8000618:	0800094d 	.word	0x0800094d
 800061c:	20004b54 	.word	0x20004b54

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f014 fed4 	bl	80153dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f014 fec5 	bl	80153dc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f002 f817 	bl	8002684 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <SystemClock_Config+0x120>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a39      	ldr	r2, [pc, #228]	; (8000740 <SystemClock_Config+0x120>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b37      	ldr	r3, [pc, #220]	; (8000740 <SystemClock_Config+0x120>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SystemClock_Config+0x124>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a34      	ldr	r2, [pc, #208]	; (8000744 <SystemClock_Config+0x124>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <SystemClock_Config+0x124>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006b4:	2309      	movs	r3, #9
 80006b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f840 	bl	8002744 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 f961 	bl	8000990 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ce:	f001 ffe9 	bl	80026a4 <HAL_PWREx_EnableOverDrive>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006d8:	f000 f95a 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000702:	2107      	movs	r1, #7
 8000704:	4618      	mov	r0, r3
 8000706:	f002 facb 	bl	8002ca0 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000710:	f000 f93e 	bl	8000990 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <SystemClock_Config+0x128>)
 8000716:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000718:	2300      	movs	r3, #0
 800071a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fce4 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000732:	f000 f92d 	bl	8000990 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	37e0      	adds	r7, #224	; 0xe0
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000
 8000748:	00200100 	.word	0x00200100

0800074c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_USART3_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000790:	f003 fb3c 	bl	8003e0c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f8f9 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004b58 	.word	0x20004b58
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2206      	movs	r2, #6
 80007bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	f001 fdff 	bl	80023f2 <HAL_PCD_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f8c9 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20004bd8 	.word	0x20004bd8

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <MX_GPIO_Init+0x130>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a45      	ldr	r2, [pc, #276]	; (8000938 <MX_GPIO_Init+0x130>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <MX_GPIO_Init+0x130>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_GPIO_Init+0x130>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <MX_GPIO_Init+0x130>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_GPIO_Init+0x130>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a39      	ldr	r2, [pc, #228]	; (8000938 <MX_GPIO_Init+0x130>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <MX_GPIO_Init+0x130>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_GPIO_Init+0x130>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_GPIO_Init+0x130>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <MX_GPIO_Init+0x130>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_GPIO_Init+0x130>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a27      	ldr	r2, [pc, #156]	; (8000938 <MX_GPIO_Init+0x130>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_GPIO_Init+0x134>)
 80008b6:	f001 fd69 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_GPIO_Init+0x138>)
 80008c0:	f001 fd64 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_GPIO_Init+0x13c>)
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <MX_GPIO_Init+0x140>)
 80008da:	f001 fbad 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008de:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0x134>)
 80008f8:	f001 fb9e 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0x138>)
 8000914:	f001 fb90 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0x138>)
 800092c:	f001 fb84 	bl	8002038 <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	10110000 	.word	0x10110000
 8000948:	40020800 	.word	0x40020800

0800094c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000954:	f004 f964 	bl	8004c20 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <StartDefaultTask+0x1c>)
 800095c:	f001 fd2f 	bl	80023be <HAL_GPIO_TogglePin>
	 	  osDelay(250);
 8000960:	20fa      	movs	r0, #250	; 0xfa
 8000962:	f004 fe31 	bl	80055c8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000966:	e7f7      	b.n	8000958 <StartDefaultTask+0xc>
 8000968:	40020400 	.word	0x40020400

0800096c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097e:	f000 fa45 	bl	8000e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40001000 	.word	0x40001000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fb0f 	bl	8001000 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x7c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d128      	bne.n	8000a64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_MspInit+0x80>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a54:	2307      	movs	r3, #7
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a60:	f001 faea 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40004800 	.word	0x40004800
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a98:	d141      	bne.n	8000b1e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_PCD_MspInit+0xb4>)
 8000ad0:	f001 fab2 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4810      	ldr	r0, [pc, #64]	; (8000b2c <HAL_PCD_MspInit+0xb4>)
 8000aea:	f001 faa5 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6353      	str	r3, [r2, #52]	; 0x34
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_PCD_MspInit+0xb0>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2036      	movs	r0, #54	; 0x36
 8000b46:	f000 fa5b 	bl	8001000 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b4a:	2036      	movs	r0, #54	; 0x36
 8000b4c:	f000 fa74 	bl	8001038 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b68:	f107 0210 	add.w	r2, r7, #16
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fa8c 	bl	8003090 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b78:	f002 fa62 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_InitTick+0xac>)
 8000b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bb2:	f002 fec5 	bl	8003940 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bbe:	f002 fef5 	bl	80039ac <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	431bde83 	.word	0x431bde83
 8000bd8:	20004fdc 	.word	0x20004fdc
 8000bdc:	40001000 	.word	0x40001000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f002 fef1 	bl	8003a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20004fdc 	.word	0x20004fdc

08000c28 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <ETH_IRQHandler+0x10>)
 8000c2e:	f000 fdf5 	bl	800181c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20006930 	.word	0x20006930

08000c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
	}
	return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x50>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x16>
		heap_end = &end;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <_sbrk+0x50>)
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <_sbrk+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <_sbrk+0x50>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <_sbrk+0x50>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d905      	bls.n	8000d4e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <_sbrk+0x58>)
 8000d44:	220c      	movs	r2, #12
 8000d46:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4c:	e006      	b.n	8000d5c <_sbrk+0x44>
	}

	heap_end += incr;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <_sbrk+0x50>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <_sbrk+0x50>)
 8000d58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	200000a0 	.word	0x200000a0
 8000d6c:	2000b910 	.word	0x2000b910
 8000d70:	2000b904 	.word	0x2000b904

08000d74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x28>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <SystemInit+0x28>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SystemInit+0x28>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd3 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f014 fac7 	bl	8015360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc05 	bl	80005e0 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000ddc:	08019308 	.word	0x08019308
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000de8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000dec:	2000b90c 	.word	0x2000b90c

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>

08000df2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 f8f7 	bl	8000fea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fe97 	bl	8000b30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e02:	f7ff fdcd 	bl	80009a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	2000501c 	.word	0x2000501c

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000501c 	.word	0x2000501c

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_Delay+0x40>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	05fa0000 	.word	0x05fa0000

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff4c 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001012:	f7ff ff61 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001016:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff ffb1 	bl	8000f84 <NVIC_EncodePriority>
 8001022:	4602      	mov	r2, r0
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff80 	bl	8000f30 <__NVIC_SetPriority>
}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff54 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001064:	4ba9      	ldr	r3, [pc, #676]	; (800130c <HAL_ETH_Init+0x2b8>)
 8001066:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e183      	b.n	8001382 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 fe08 	bl	8004ca4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_ETH_Init+0x2bc>)
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	4a9d      	ldr	r2, [pc, #628]	; (8001310 <HAL_ETH_Init+0x2bc>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6453      	str	r3, [r2, #68]	; 0x44
 80010a0:	4b9b      	ldr	r3, [pc, #620]	; (8001310 <HAL_ETH_Init+0x2bc>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010ac:	4b99      	ldr	r3, [pc, #612]	; (8001314 <HAL_ETH_Init+0x2c0>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_ETH_Init+0x2c0>)
 80010b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010b6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010b8:	4b96      	ldr	r3, [pc, #600]	; (8001314 <HAL_ETH_Init+0x2c0>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4994      	ldr	r1, [pc, #592]	; (8001314 <HAL_ETH_Init+0x2c0>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010dc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010de:	f7ff fea9 	bl	8000e34 <HAL_GetTick>
 80010e2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010e4:	e011      	b.n	800110a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010e6:	f7ff fea5 	bl	8000e34 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f4:	d909      	bls.n	800110a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e13b      	b.n	8001382 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e4      	bne.n	80010e6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f023 031c 	bic.w	r3, r3, #28
 800112a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800112c:	f001 ff7c 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8001130:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4a78      	ldr	r2, [pc, #480]	; (8001318 <HAL_ETH_Init+0x2c4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d908      	bls.n	800114c <HAL_ETH_Init+0xf8>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4a77      	ldr	r2, [pc, #476]	; (800131c <HAL_ETH_Init+0x2c8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d804      	bhi.n	800114c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e027      	b.n	800119c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	4a73      	ldr	r2, [pc, #460]	; (800131c <HAL_ETH_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d908      	bls.n	8001166 <HAL_ETH_Init+0x112>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <HAL_ETH_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d804      	bhi.n	8001166 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f043 030c 	orr.w	r3, r3, #12
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	e01a      	b.n	800119c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4a6d      	ldr	r2, [pc, #436]	; (8001320 <HAL_ETH_Init+0x2cc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d903      	bls.n	8001176 <HAL_ETH_Init+0x122>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4a6c      	ldr	r2, [pc, #432]	; (8001324 <HAL_ETH_Init+0x2d0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d911      	bls.n	800119a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4a6a      	ldr	r2, [pc, #424]	; (8001324 <HAL_ETH_Init+0x2d0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d908      	bls.n	8001190 <HAL_ETH_Init+0x13c>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4a69      	ldr	r2, [pc, #420]	; (8001328 <HAL_ETH_Init+0x2d4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d804      	bhi.n	8001190 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e005      	b.n	800119c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	e000      	b.n	800119c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800119a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80011a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a8:	2100      	movs	r1, #0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fc19 	bl	80019e2 <HAL_ETH_WritePHYRegister>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80011ba:	6939      	ldr	r1, [r7, #16]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fca5 	bl	8001b0c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0d9      	b.n	8001382 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80011ce:	20ff      	movs	r0, #255	; 0xff
 80011d0:	f7ff fe3c 	bl	8000e4c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a7 	beq.w	800132c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011de:	f7ff fe29 	bl	8000e34 <HAL_GetTick>
 80011e2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	461a      	mov	r2, r3
 80011ea:	2101      	movs	r1, #1
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fb90 	bl	8001912 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011f2:	f7ff fe1f 	bl	8000e34 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d90f      	bls.n	8001224 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fc7e 	bl	8001b0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0ae      	b.n	8001382 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0da      	beq.n	80011e4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800122e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001232:	2100      	movs	r1, #0
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fbd4 	bl	80019e2 <HAL_ETH_WritePHYRegister>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fc60 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001254:	2301      	movs	r3, #1
 8001256:	e094      	b.n	8001382 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fdec 	bl	8000e34 <HAL_GetTick>
 800125c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	461a      	mov	r2, r3
 8001264:	2101      	movs	r1, #1
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fb53 	bl	8001912 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800126c:	f7ff fde2 	bl	8000e34 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d90f      	bls.n	800129e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001282:	6939      	ldr	r1, [r7, #16]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fc41 	bl	8001b0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e071      	b.n	8001382 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0da      	beq.n	800125e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	461a      	mov	r2, r3
 80012ae:	211f      	movs	r1, #31
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fb2e 	bl	8001912 <HAL_ETH_ReadPHYRegister>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012c0:	6939      	ldr	r1, [r7, #16]
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fc22 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012d0:	2301      	movs	r3, #1
 80012d2:	e056      	b.n	8001382 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	e002      	b.n	80012ee <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e037      	b.n	8001370 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e032      	b.n	8001370 <HAL_ETH_Init+0x31c>
 800130a:	bf00      	nop
 800130c:	03938700 	.word	0x03938700
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	01312cff 	.word	0x01312cff
 800131c:	02160ebf 	.word	0x02160ebf
 8001320:	039386ff 	.word	0x039386ff
 8001324:	05f5e0ff 	.word	0x05f5e0ff
 8001328:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800133c:	4313      	orrs	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fb4c 	bl	80019e2 <HAL_ETH_WritePHYRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fbd8 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e00c      	b.n	8001382 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001368:	f640 70ff 	movw	r0, #4095	; 0xfff
 800136c:	f7ff fd6e 	bl	8000e4c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fbca 	bl	8001b0c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop

0800138c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ETH_DMATxDescListInit+0x20>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e052      	b.n	8001452 <HAL_ETH_DMATxDescListInit+0xc6>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e030      	b.n	800142a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	d208      	bcs.n	800141e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	015b      	lsls	r3, r3, #5
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	461a      	mov	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	e002      	b.n	8001424 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3ca      	bcc.n	80013c8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f241 0310 	movw	r3, #4112	; 0x1010
 800143c:	440b      	add	r3, r1
 800143e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ETH_DMARxDescListInit+0x20>
 800147a:	2302      	movs	r3, #2
 800147c:	e056      	b.n	800152c <HAL_ETH_DMARxDescListInit+0xce>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e034      	b.n	8001504 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014aa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80014b2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3b01      	subs	r3, #1
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d208      	bcs.n	80014f8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	e002      	b.n	80014fe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d3c6      	bcc.n	800149a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6819      	ldr	r1, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	f241 030c 	movw	r3, #4108	; 0x100c
 8001516:	440b      	add	r3, r1
 8001518:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_ETH_TransmitFrame+0x24>
 8001558:	2302      	movs	r3, #2
 800155a:	e0cd      	b.n	80016f8 <HAL_ETH_TransmitFrame+0x1c0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001582:	2301      	movs	r3, #1
 8001584:	e0b8      	b.n	80016f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da09      	bge.n	80015a4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2212      	movs	r2, #18
 8001594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0a9      	b.n	80016f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d915      	bls.n	80015da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4a54      	ldr	r2, [pc, #336]	; (8001704 <HAL_ETH_TransmitFrame+0x1cc>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0a9b      	lsrs	r3, r3, #10
 80015b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_ETH_TransmitFrame+0x1cc>)
 80015be:	fba3 1302 	umull	r1, r3, r3, r2
 80015c2:	0a9b      	lsrs	r3, r3, #10
 80015c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e001      	b.n	80015de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d11c      	bne.n	800161e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80015f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800160e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
 800161c:	e04b      	b.n	80016b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	e044      	b.n	80016ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001632:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001648:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001652:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3b01      	subs	r3, #1
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	429a      	cmp	r2, r3
 800165c:	d116      	bne.n	800168c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800166c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_ETH_TransmitFrame+0x1d0>)
 8001672:	fb02 f203 	mul.w	r2, r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800167e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800168a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800169a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	3301      	adds	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3b6      	bcc.n	8001624 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f241 0314 	movw	r3, #4116	; 0x1014
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80016d2:	4413      	add	r3, r2
 80016d4:	2204      	movs	r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	f241 0304 	movw	r3, #4100	; 0x1004
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	ac02b00b 	.word	0xac02b00b
 8001708:	fffffa0c 	.word	0xfffffa0c

0800170c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001722:	2302      	movs	r3, #2
 8001724:	e074      	b.n	8001810 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001736:	e05a      	b.n	80017ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d10d      	bne.n	800176a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
 8001768:	e041      	b.n	80017ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10b      	bne.n	8001790 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
 800178e:	e02e      	b.n	80017ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d103      	bne.n	80017b2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017be:	1f1a      	subs	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e010      	b.n	8001810 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db02      	blt.n	80017fe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d99c      	bls.n	8001738 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f241 0314 	movw	r3, #4116	; 0x1014
 800182c:	4413      	add	r3, r2
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	2b40      	cmp	r3, #64	; 0x40
 8001836:	d112      	bne.n	800185e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f003 faf3 	bl	8004e24 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f241 0314 	movw	r3, #4116	; 0x1014
 8001846:	4413      	add	r3, r2
 8001848:	2240      	movs	r2, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800185c:	e01b      	b.n	8001896 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f241 0314 	movw	r3, #4116	; 0x1014
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d111      	bne.n	8001896 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f839 	bl	80018ea <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f241 0314 	movw	r3, #4116	; 0x1014
 800189e:	4413      	add	r3, r2
 80018a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f241 0314 	movw	r3, #4116	; 0x1014
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ba:	d112      	bne.n	80018e2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f81e 	bl	80018fe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80018ca:	4413      	add	r3, r2
 80018cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018d0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	460b      	mov	r3, r1
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b82      	cmp	r3, #130	; 0x82
 8001932:	d101      	bne.n	8001938 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
 8001936:	e050      	b.n	80019da <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2282      	movs	r2, #130	; 0x82
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 031c 	and.w	r3, r3, #28
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8a1b      	ldrh	r3, [r3, #16]
 8001954:	02db      	lsls	r3, r3, #11
 8001956:	b29b      	uxth	r3, r3
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7ff fa56 	bl	8000e34 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800198a:	e015      	b.n	80019b8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800198c:	f7ff fa52 	bl	8000e34 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d309      	bcc.n	80019b0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e014      	b.n	80019da <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1e4      	bne.n	800198c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	460b      	mov	r3, r1
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b42      	cmp	r3, #66	; 0x42
 8001a02:	d101      	bne.n	8001a08 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
 8001a06:	e04e      	b.n	8001aa6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2242      	movs	r2, #66	; 0x42
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8a1b      	ldrh	r3, [r3, #16]
 8001a24:	02db      	lsls	r3, r3, #11
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a2e:	897b      	ldrh	r3, [r7, #10]
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5e:	f7ff f9e9 	bl	8000e34 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a64:	e015      	b.n	8001a92 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a66:	f7ff f9e5 	bl	8000e34 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d309      	bcc.n	8001a8a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e00d      	b.n	8001aa6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e4      	bne.n	8001a66 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ETH_Start+0x16>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e01f      	b.n	8001b04 <HAL_ETH_Start+0x56>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fa1b 	bl	8001f10 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa35 	bl	8001f4a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fa7f 	bl	8001fe4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa4c 	bl	8001f84 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fa61 	bl	8001fb4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b0      	sub	sp, #192	; 0xc0
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b28:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	663b      	str	r3, [r7, #96]	; 0x60
 8001b58:	e001      	b.n	8001b5e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be4:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <ETH_MACDMAConfig+0x388>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bf0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001bf4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001bf8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bfe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c02:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c06:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c0c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c10:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c14:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c18:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c1c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff f903 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c4e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c54:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c58:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c5e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c64:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c6a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c70:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c7c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c7e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff f8de 	bl	8000e4c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ca2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cbc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001cd0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cd6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cdc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ce2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ce8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001cea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cfc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff f89f 	bl	8000e4c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d16:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d18:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff f88a 	bl	8000e4c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d54:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d66:	2304      	movs	r3, #4
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d96:	4413      	add	r3, r2
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da2:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <ETH_MACDMAConfig+0x38c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001daa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001dac:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001db0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001db2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001db4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001db6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001db8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001dba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001dbc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001dbe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001dc2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001dc6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dca:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dde:	4413      	add	r3, r2
 8001de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff f828 	bl	8000e4c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e04:	4413      	add	r3, r2
 8001e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e0a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e10:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e14:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e18:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e1c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e20:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e22:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e26:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff f801 	bl	8000e4c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e56:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10d      	bne.n	8001e7c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <ETH_MACDMAConfig+0x390>)
 8001e72:	431a      	orrs	r2, r3
 8001e74:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e78:	440b      	add	r3, r1
 8001e7a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f80b 	bl	8001ea0 <ETH_MACAddressConfig>
}
 8001e8a:	bf00      	nop
 8001e8c:	37c0      	adds	r7, #192	; 0xc0
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	ff20810f 	.word	0xff20810f
 8001e98:	f8de3f23 	.word	0xf8de3f23
 8001e9c:	00010040 	.word	0x00010040

08001ea0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3305      	adds	r3, #5
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	3204      	adds	r2, #4
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <ETH_MACAddressConfig+0x68>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	061a      	lsls	r2, r3, #24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <ETH_MACAddressConfig+0x6c>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40028040 	.word	0x40028040
 8001f0c:	40028044 	.word	0x40028044

08001f10 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7fe ff89 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0204 	orr.w	r2, r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7fe ff6c 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6811      	ldr	r1, [r2, #0]
 8001f9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fa0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fa4:	440b      	add	r3, r1
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fc4:	4413      	add	r3, r2
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6811      	ldr	r1, [r2, #0]
 8001fcc:	f043 0202 	orr.w	r2, r3, #2
 8001fd0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fd4:	440b      	add	r3, r1
 8001fd6:	601a      	str	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6811      	ldr	r1, [r2, #0]
 8002000:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002004:	f241 0318 	movw	r3, #4120	; 0x1018
 8002008:	440b      	add	r3, r1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f241 0318 	movw	r3, #4120	; 0x1018
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe ff16 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	f241 0318 	movw	r3, #4120	; 0x1018
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e175      	b.n	8002344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8164 	bne.w	800233e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d00b      	beq.n	8002096 <HAL_GPIO_Init+0x5e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208a:	2b11      	cmp	r3, #17
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b12      	cmp	r3, #18
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x100>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b12      	cmp	r3, #18
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80be 	beq.w	800233e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_GPIO_Init+0x320>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a64      	ldr	r2, [pc, #400]	; (8002358 <HAL_GPIO_Init+0x320>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_GPIO_Init+0x320>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021da:	4a60      	ldr	r2, [pc, #384]	; (800235c <HAL_GPIO_Init+0x324>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a57      	ldr	r2, [pc, #348]	; (8002360 <HAL_GPIO_Init+0x328>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d037      	beq.n	8002276 <HAL_GPIO_Init+0x23e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a56      	ldr	r2, [pc, #344]	; (8002364 <HAL_GPIO_Init+0x32c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_GPIO_Init+0x23a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a55      	ldr	r2, [pc, #340]	; (8002368 <HAL_GPIO_Init+0x330>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x236>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_GPIO_Init+0x334>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x232>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a53      	ldr	r2, [pc, #332]	; (8002370 <HAL_GPIO_Init+0x338>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x22e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_GPIO_Init+0x33c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x22a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a51      	ldr	r2, [pc, #324]	; (8002378 <HAL_GPIO_Init+0x340>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_GPIO_Init+0x344>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <HAL_GPIO_Init+0x348>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_GPIO_Init+0x34c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x21a>
 800224e:	2309      	movs	r3, #9
 8002250:	e012      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002252:	230a      	movs	r3, #10
 8002254:	e010      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002256:	2308      	movs	r3, #8
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225a:	2307      	movs	r3, #7
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002288:	4934      	ldr	r1, [pc, #208]	; (800235c <HAL_GPIO_Init+0x324>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002296:	4b3c      	ldr	r3, [pc, #240]	; (8002388 <HAL_GPIO_Init+0x350>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ba:	4a33      	ldr	r2, [pc, #204]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230e:	4a1e      	ldr	r2, [pc, #120]	; (8002388 <HAL_GPIO_Init+0x350>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_GPIO_Init+0x350>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_GPIO_Init+0x350>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae86 	bls.w	8002058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	; 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40022000 	.word	0x40022000
 8002384:	40022400 	.word	0x40022400
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f4:	b08f      	sub	sp, #60	; 0x3c
 80023f6:	af0a      	add	r7, sp, #40	; 0x28
 80023f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e116      	b.n	8002632 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fb2a 	bl	8000a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f994 	bl	8004770 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	687e      	ldr	r6, [r7, #4]
 8002450:	466d      	mov	r5, sp
 8002452:	f106 0410 	add.w	r4, r6, #16
 8002456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002462:	e885 0003 	stmia.w	r5, {r0, r1}
 8002466:	1d33      	adds	r3, r6, #4
 8002468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	f002 f928 	bl	80046c0 <USB_CoreInit>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0d7      	b.n	8002632 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f002 f982 	bl	8004792 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e04a      	b.n	800252a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	333d      	adds	r3, #61	; 0x3d
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	333c      	adds	r3, #60	; 0x3c
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	b298      	uxth	r0, r3
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3342      	adds	r3, #66	; 0x42
 80024d0:	4602      	mov	r2, r0
 80024d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	333f      	adds	r3, #63	; 0x3f
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3344      	adds	r3, #68	; 0x44
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3348      	adds	r3, #72	; 0x48
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3350      	adds	r3, #80	; 0x50
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3af      	bcc.n	8002494 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e044      	b.n	80025c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3b5      	bcc.n	800253a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	687e      	ldr	r6, [r7, #4]
 80025d6:	466d      	mov	r5, sp
 80025d8:	f106 0410 	add.w	r4, r6, #16
 80025dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ec:	1d33      	adds	r3, r6, #4
 80025ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f002 f8f9 	bl	80047e8 <USB_DevInit>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e014      	b.n	8002632 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f80b 	bl	800263c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 faab 	bl	8004b86 <USB_DevDisconnect>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800263c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_PCDEx_ActivateLPM+0x44>)
 800266c:	4313      	orrs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	10000003 	.word	0x10000003

08002684 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d2:	f7fe fbaf 	bl	8000e34 <HAL_GetTick>
 80026d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026d8:	e009      	b.n	80026ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026da:	f7fe fbab 	bl	8000e34 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e8:	d901      	bls.n	80026ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e022      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fa:	d1ee      	bne.n	80026da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7fe fb94 	bl	8000e34 <HAL_GetTick>
 800270c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800270e:	e009      	b.n	8002724 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002710:	f7fe fb90 	bl	8000e34 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271e:	d901      	bls.n	8002724 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e007      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002730:	d1ee      	bne.n	8002710 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e29b      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002774:	4b93      	ldr	r3, [pc, #588]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x130>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e275      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x7a>
 80027b0:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x9c>
 80027c6:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7e      	ldr	r2, [pc, #504]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b7c      	ldr	r3, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xc0>
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a72      	ldr	r2, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 8002804:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6b      	ldr	r2, [pc, #428]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fb06 	bl	8000e34 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fb02 	bl	8000e34 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e229      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe faf2 	bl	8000e34 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe faee 	bl	8000e34 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e215      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x110>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d069      	beq.n	8002956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1e9      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	493d      	ldr	r1, [pc, #244]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e040      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe faa4 	bl	8000e34 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe faa0 	bl	8000e34 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1c7      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4929      	ldr	r1, [pc, #164]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fa80 	bl	8000e34 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe fa7c 	bl	8000e34 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1a3      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d038      	beq.n	80029d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fa5d 	bl	8000e34 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fa59 	bl	8000e34 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e180      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x23a>
 800299c:	e01a      	b.n	80029d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fa43 	bl	8000e34 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe fa3f 	bl	8000e34 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d903      	bls.n	80029c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e166      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
 80029c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a4 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a88      	ldr	r2, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b86      	ldr	r3, [pc, #536]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0a:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a16:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7fe fa07 	bl	8000e34 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fe fa03 	bl	8000e34 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e12a      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x31a>
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a6f      	ldr	r2, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x33c>
 8002a66:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
 8002a88:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f9b7 	bl	8000e34 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f9b3 	bl	8000e34 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0d8      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x386>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe f9a1 	bl	8000e34 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe f99d 	bl	8000e34 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0c2      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80ae 	beq.w	8002c90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d06d      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a31      	ldr	r2, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe f96e 	bl	8000e34 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe f96a 	bl	8000e34 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e091      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe f93c 	bl	8000e34 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe f938 	bl	8000e34 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e05f      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
 8002bde:	e057      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f922 	bl	8000e34 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe f91e 	bl	8000e34 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e045      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4b0>
 8002c12:	e03d      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <HAL_RCC_OscConfig+0x558>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d030      	beq.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d129      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d122      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d119      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10f      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d0      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4965      	ldr	r1, [pc, #404]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d040      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e073      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4936      	ldr	r1, [pc, #216]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe f84e 	bl	8000e34 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe f84a 	bl	8000e34 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e053      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d210      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	4922      	ldr	r1, [pc, #136]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4601      	mov	r1, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x1cc>)
 8002e44:	5cd3      	ldrb	r3, [r2, r3]
 8002e46:	fa21 f303 	lsr.w	r3, r1, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1d0>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fe6c 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08019110 	.word	0x08019110
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	2300      	movs	r3, #0
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d007      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x32>
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 80b4 	bne.w	800300c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ea6:	60bb      	str	r3, [r7, #8]
      break;
 8002ea8:	e0b3      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002eac:	60bb      	str	r3, [r7, #8]
      break;
 8002eae:	e0b0      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b5a      	ldr	r3, [pc, #360]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04a      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	f04f 0400 	mov.w	r4, #0
 8002ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	ea03 0501 	and.w	r5, r3, r1
 8002edc:	ea04 0602 	and.w	r6, r4, r2
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4632      	mov	r2, r6
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	0154      	lsls	r4, r2, #5
 8002eee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ef2:	014b      	lsls	r3, r1, #5
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	1b49      	subs	r1, r1, r5
 8002efa:	eb62 0206 	sbc.w	r2, r2, r6
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	f04f 0400 	mov.w	r4, #0
 8002f06:	0194      	lsls	r4, r2, #6
 8002f08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f0c:	018b      	lsls	r3, r1, #6
 8002f0e:	1a5b      	subs	r3, r3, r1
 8002f10:	eb64 0402 	sbc.w	r4, r4, r2
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	00e2      	lsls	r2, r4, #3
 8002f1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f22:	00d9      	lsls	r1, r3, #3
 8002f24:	460b      	mov	r3, r1
 8002f26:	4614      	mov	r4, r2
 8002f28:	195b      	adds	r3, r3, r5
 8002f2a:	eb44 0406 	adc.w	r4, r4, r6
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	0262      	lsls	r2, r4, #9
 8002f38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f3c:	0259      	lsls	r1, r3, #9
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	4621      	mov	r1, r4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	f7fd f9c6 	bl	80002e0 <__aeabi_uldivmod>
 8002f54:	4603      	mov	r3, r0
 8002f56:	460c      	mov	r4, r1
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e049      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	f04f 0400 	mov.w	r4, #0
 8002f66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	ea03 0501 	and.w	r5, r3, r1
 8002f72:	ea04 0602 	and.w	r6, r4, r2
 8002f76:	4629      	mov	r1, r5
 8002f78:	4632      	mov	r2, r6
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	0154      	lsls	r4, r2, #5
 8002f84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f88:	014b      	lsls	r3, r1, #5
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	1b49      	subs	r1, r1, r5
 8002f90:	eb62 0206 	sbc.w	r2, r2, r6
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	f04f 0400 	mov.w	r4, #0
 8002f9c:	0194      	lsls	r4, r2, #6
 8002f9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	1a5b      	subs	r3, r3, r1
 8002fa6:	eb64 0402 	sbc.w	r4, r4, r2
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fb8:	00d9      	lsls	r1, r3, #3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	195b      	adds	r3, r3, r5
 8002fc0:	eb44 0406 	adc.w	r4, r4, r6
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	02a2      	lsls	r2, r4, #10
 8002fce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fd2:	0299      	lsls	r1, r3, #10
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	4621      	mov	r1, r4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f04f 0400 	mov.w	r4, #0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	f7fd f97b 	bl	80002e0 <__aeabi_uldivmod>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	60bb      	str	r3, [r7, #8]
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800300e:	60bb      	str	r3, [r7, #8]
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	68bb      	ldr	r3, [r7, #8]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4601      	mov	r1, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4a03      	ldr	r2, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08019120 	.word	0x08019120

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffdc 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003070:	4601      	mov	r1, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08019120 	.word	0x08019120

08003090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	220f      	movs	r2, #15
 800309e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCC_GetClockConfig+0x60>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800311c:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a68      	ldr	r2, [pc, #416]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	4964      	ldr	r1, [pc, #400]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314e:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	4959      	ldr	r1, [pc, #356]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	494a      	ldr	r1, [pc, #296]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 808b 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	4a39      	ldr	r2, [pc, #228]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6413      	str	r3, [r2, #64]	; 0x40
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fc:	f7fd fe1a 	bl	8000e34 <HAL_GetTick>
 8003200:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd fe16 	bl	8000e34 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e38d      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003216:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003222:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d035      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d02e      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003260:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d114      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fdde 	bl	8000e34 <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd fdda 	bl	8000e34 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e34f      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ee      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032aa:	d111      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ba:	400b      	ands	r3, r1
 80032bc:	4901      	ldr	r1, [pc, #4]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
 80032c2:	e00b      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	0ffffcff 	.word	0x0ffffcff
 80032d0:	4bb3      	ldr	r3, [pc, #716]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4ab2      	ldr	r2, [pc, #712]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	4bb0      	ldr	r3, [pc, #704]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	49ad      	ldr	r1, [pc, #692]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032fa:	4ba9      	ldr	r3, [pc, #676]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	4aa7      	ldr	r2, [pc, #668]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800330a:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	49a2      	ldr	r1, [pc, #648]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003328:	4b9d      	ldr	r3, [pc, #628]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003336:	499a      	ldr	r1, [pc, #616]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334a:	4b95      	ldr	r3, [pc, #596]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003358:	4991      	ldr	r1, [pc, #580]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337a:	4989      	ldr	r1, [pc, #548]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800338e:	4b84      	ldr	r3, [pc, #528]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4980      	ldr	r1, [pc, #512]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b0:	4b7b      	ldr	r3, [pc, #492]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4978      	ldr	r1, [pc, #480]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f023 020c 	bic.w	r2, r3, #12
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	496f      	ldr	r1, [pc, #444]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4967      	ldr	r1, [pc, #412]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003416:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	495e      	ldr	r1, [pc, #376]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	4956      	ldr	r1, [pc, #344]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800345a:	4b51      	ldr	r3, [pc, #324]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	494d      	ldr	r1, [pc, #308]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800347c:	4b48      	ldr	r3, [pc, #288]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	4945      	ldr	r1, [pc, #276]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800349e:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	493c      	ldr	r1, [pc, #240]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ce:	4934      	ldr	r1, [pc, #208]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034e2:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f0:	492b      	ldr	r1, [pc, #172]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003530:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003554:	4912      	ldr	r1, [pc, #72]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003578:	4909      	ldr	r1, [pc, #36]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003592:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	4985      	ldr	r1, [pc, #532]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c8:	497c      	ldr	r1, [pc, #496]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d005      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035de:	f040 80d6 	bne.w	800378e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ee:	f7fd fc21 	bl	8000e34 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035f6:	f7fd fc1d 	bl	8000e34 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	; 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e194      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003608:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d021      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11d      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003628:	4b64      	ldr	r3, [pc, #400]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003636:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363c:	0e1b      	lsrs	r3, r3, #24
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	019a      	lsls	r2, r3, #6
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	071b      	lsls	r3, r3, #28
 800365c:	4957      	ldr	r1, [pc, #348]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368e:	d129      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003690:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003696:	0c1b      	lsrs	r3, r3, #16
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	0f1b      	lsrs	r3, r3, #28
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	019a      	lsls	r2, r3, #6
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	071b      	lsls	r3, r3, #28
 80036c4:	493d      	ldr	r1, [pc, #244]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d2:	f023 021f 	bic.w	r2, r3, #31
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	3b01      	subs	r3, #1
 80036dc:	4937      	ldr	r1, [pc, #220]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003704:	0f1b      	lsrs	r3, r3, #28
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	019a      	lsls	r2, r3, #6
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	4925      	ldr	r1, [pc, #148]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	019a      	lsls	r2, r3, #6
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	071b      	lsls	r3, r3, #28
 8003754:	4919      	ldr	r1, [pc, #100]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fd fb64 	bl	8000e34 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003770:	f7fd fb60 	bl	8000e34 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0d7      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 80cd 	bne.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a2:	f7fd fb47 	bl	8000e34 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037aa:	f7fd fb43 	bl	8000e34 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b64      	cmp	r3, #100	; 0x64
 80037b6:	d903      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0ba      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80037bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c0:	4b5e      	ldr	r3, [pc, #376]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037cc:	d0ed      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d12a      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037f6:	4b51      	ldr	r3, [pc, #324]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	0f1b      	lsrs	r3, r3, #28
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	019a      	lsls	r2, r3, #6
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	4944      	ldr	r1, [pc, #272]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003832:	4b42      	ldr	r3, [pc, #264]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003838:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	493d      	ldr	r1, [pc, #244]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d022      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003860:	d11d      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4929      	ldr	r1, [pc, #164]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d028      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	0e1b      	lsrs	r3, r3, #24
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	019a      	lsls	r2, r3, #6
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	4917      	ldr	r1, [pc, #92]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4911      	ldr	r1, [pc, #68]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fd fa94 	bl	8000e34 <HAL_GetTick>
 800390c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003910:	f7fd fa90 	bl	8000e34 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e007      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392e:	d1ef      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f815 	bl	8003996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 f986 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_TIM_Base_Start_IT+0x50>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d00b      	beq.n	80039ee <HAL_TIM_Base_Start_IT+0x42>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d007      	beq.n	80039ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	00010007 	.word	0x00010007

08003a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0202 	mvn.w	r2, #2
 8003a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f905 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8f7 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f908 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0204 	mvn.w	r2, #4
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8db 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8cd 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8de 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b1 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8a3 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8b4 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f887 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f879 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f88a 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0201 	mvn.w	r2, #1
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc fef4 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f91a 	bl	8003de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d10e      	bne.n	8003bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d107      	bne.n	8003bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f90d 	bl	8003df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d10e      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f838 	bl	8003c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0220 	mvn.w	r2, #32
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8cd 	bl	8003dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d027      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d023      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d017      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <TIM_Base_SetConfig+0x128>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <TIM_Base_SetConfig+0x130>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <TIM_Base_SetConfig+0x134>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <TIM_Base_SetConfig+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0xf8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40001800 	.word	0x40001800
 8003dc8:	40001c00 	.word	0x40001c00
 8003dcc:	40002000 	.word	0x40002000

08003dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e040      	b.n	8003ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fdde 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f82c 	bl	8003ea8 <UART_SetConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 faca 	bl	80043fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fb51 	bl	8004540 <UART_CheckIdleState>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4bb1      	ldr	r3, [pc, #708]	; (800419c <UART_SetConfig+0x2f4>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	6939      	ldr	r1, [r7, #16]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a9f      	ldr	r2, [pc, #636]	; (80041a0 <UART_SetConfig+0x2f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d121      	bne.n	8003f6c <UART_SetConfig+0xc4>
 8003f28:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d816      	bhi.n	8003f64 <UART_SetConfig+0xbc>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x94>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f53 	.word	0x08003f53
 8003f48:	08003f5f 	.word	0x08003f5f
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e151      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e14e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e14b      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e148      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	bf00      	nop
 8003f6a:	e144      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a8d      	ldr	r2, [pc, #564]	; (80041a8 <UART_SetConfig+0x300>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d134      	bne.n	8003fe0 <UART_SetConfig+0x138>
 8003f76:	4b8b      	ldr	r3, [pc, #556]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d829      	bhi.n	8003fd8 <UART_SetConfig+0x130>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0xe4>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003fd9 	.word	0x08003fd9
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003fc7 	.word	0x08003fc7
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003fd3 	.word	0x08003fd3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e117      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e114      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e111      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e10e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	bf00      	nop
 8003fde:	e10a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a71      	ldr	r2, [pc, #452]	; (80041ac <UART_SetConfig+0x304>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d120      	bne.n	800402c <UART_SetConfig+0x184>
 8003fea:	4b6e      	ldr	r3, [pc, #440]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d00f      	beq.n	8004018 <UART_SetConfig+0x170>
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d802      	bhi.n	8004002 <UART_SetConfig+0x15a>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <UART_SetConfig+0x164>
 8004000:	e010      	b.n	8004024 <UART_SetConfig+0x17c>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d005      	beq.n	8004012 <UART_SetConfig+0x16a>
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	d009      	beq.n	800401e <UART_SetConfig+0x176>
 800400a:	e00b      	b.n	8004024 <UART_SetConfig+0x17c>
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e0f1      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004012:	2302      	movs	r3, #2
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e0ee      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004018:	2304      	movs	r3, #4
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e0eb      	b.n	80041f6 <UART_SetConfig+0x34e>
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e0e8      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	bf00      	nop
 800402a:	e0e4      	b.n	80041f6 <UART_SetConfig+0x34e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5f      	ldr	r2, [pc, #380]	; (80041b0 <UART_SetConfig+0x308>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d120      	bne.n	8004078 <UART_SetConfig+0x1d0>
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d00f      	beq.n	8004064 <UART_SetConfig+0x1bc>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d802      	bhi.n	800404e <UART_SetConfig+0x1a6>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <UART_SetConfig+0x1b0>
 800404c:	e010      	b.n	8004070 <UART_SetConfig+0x1c8>
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d005      	beq.n	800405e <UART_SetConfig+0x1b6>
 8004052:	2bc0      	cmp	r3, #192	; 0xc0
 8004054:	d009      	beq.n	800406a <UART_SetConfig+0x1c2>
 8004056:	e00b      	b.n	8004070 <UART_SetConfig+0x1c8>
 8004058:	2300      	movs	r3, #0
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e0cb      	b.n	80041f6 <UART_SetConfig+0x34e>
 800405e:	2302      	movs	r3, #2
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e0c8      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004064:	2304      	movs	r3, #4
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e0c5      	b.n	80041f6 <UART_SetConfig+0x34e>
 800406a:	2308      	movs	r3, #8
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e0c2      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004070:	2310      	movs	r3, #16
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	bf00      	nop
 8004076:	e0be      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a4d      	ldr	r2, [pc, #308]	; (80041b4 <UART_SetConfig+0x30c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d124      	bne.n	80040cc <UART_SetConfig+0x224>
 8004082:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d012      	beq.n	80040b8 <UART_SetConfig+0x210>
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d802      	bhi.n	800409e <UART_SetConfig+0x1f6>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <UART_SetConfig+0x204>
 800409c:	e012      	b.n	80040c4 <UART_SetConfig+0x21c>
 800409e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a2:	d006      	beq.n	80040b2 <UART_SetConfig+0x20a>
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a8:	d009      	beq.n	80040be <UART_SetConfig+0x216>
 80040aa:	e00b      	b.n	80040c4 <UART_SetConfig+0x21c>
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0a1      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e09e      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e09b      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e098      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	bf00      	nop
 80040ca:	e094      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <UART_SetConfig+0x310>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d124      	bne.n	8004120 <UART_SetConfig+0x278>
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <UART_SetConfig+0x2fc>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d012      	beq.n	800410c <UART_SetConfig+0x264>
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d802      	bhi.n	80040f2 <UART_SetConfig+0x24a>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <UART_SetConfig+0x258>
 80040f0:	e012      	b.n	8004118 <UART_SetConfig+0x270>
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f6:	d006      	beq.n	8004106 <UART_SetConfig+0x25e>
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fc:	d009      	beq.n	8004112 <UART_SetConfig+0x26a>
 80040fe:	e00b      	b.n	8004118 <UART_SetConfig+0x270>
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e077      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e074      	b.n	80041f6 <UART_SetConfig+0x34e>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e071      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e06e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	bf00      	nop
 800411e:	e06a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <UART_SetConfig+0x314>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d124      	bne.n	8004174 <UART_SetConfig+0x2cc>
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <UART_SetConfig+0x2fc>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d012      	beq.n	8004160 <UART_SetConfig+0x2b8>
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d802      	bhi.n	8004146 <UART_SetConfig+0x29e>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <UART_SetConfig+0x2ac>
 8004144:	e012      	b.n	800416c <UART_SetConfig+0x2c4>
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d006      	beq.n	800415a <UART_SetConfig+0x2b2>
 800414c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004150:	d009      	beq.n	8004166 <UART_SetConfig+0x2be>
 8004152:	e00b      	b.n	800416c <UART_SetConfig+0x2c4>
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e04d      	b.n	80041f6 <UART_SetConfig+0x34e>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e04a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e047      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e044      	b.n	80041f6 <UART_SetConfig+0x34e>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	bf00      	nop
 8004172:	e040      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <UART_SetConfig+0x318>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d139      	bne.n	80041f2 <UART_SetConfig+0x34a>
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418c:	d027      	beq.n	80041de <UART_SetConfig+0x336>
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d817      	bhi.n	80041c4 <UART_SetConfig+0x31c>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01c      	beq.n	80041d2 <UART_SetConfig+0x32a>
 8004198:	e027      	b.n	80041ea <UART_SetConfig+0x342>
 800419a:	bf00      	nop
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40004c00 	.word	0x40004c00
 80041b4:	40005000 	.word	0x40005000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	40007800 	.word	0x40007800
 80041c0:	40007c00 	.word	0x40007c00
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d006      	beq.n	80041d8 <UART_SetConfig+0x330>
 80041ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ce:	d009      	beq.n	80041e4 <UART_SetConfig+0x33c>
 80041d0:	e00b      	b.n	80041ea <UART_SetConfig+0x342>
 80041d2:	2300      	movs	r3, #0
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e00e      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041d8:	2302      	movs	r3, #2
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e00b      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041de:	2304      	movs	r3, #4
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e008      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041e4:	2308      	movs	r3, #8
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e005      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041ea:	2310      	movs	r3, #16
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	bf00      	nop
 80041f0:	e001      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041f2:	2310      	movs	r3, #16
 80041f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d17f      	bne.n	8004300 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004200:	7ffb      	ldrb	r3, [r7, #31]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d85c      	bhi.n	80042c0 <UART_SetConfig+0x418>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x364>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004231 	.word	0x08004231
 8004210:	08004251 	.word	0x08004251
 8004214:	08004271 	.word	0x08004271
 8004218:	080042c1 	.word	0x080042c1
 800421c:	08004289 	.word	0x08004289
 8004220:	080042c1 	.word	0x080042c1
 8004224:	080042c1 	.word	0x080042c1
 8004228:	080042c1 	.word	0x080042c1
 800422c:	080042a9 	.word	0x080042a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004230:	f7fe ff06 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004234:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	005a      	lsls	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	b29b      	uxth	r3, r3
 800424c:	61bb      	str	r3, [r7, #24]
        break;
 800424e:	e03a      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe ff0a 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004254:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	005a      	lsls	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	61bb      	str	r3, [r7, #24]
        break;
 800426e:	e02a      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085a      	lsrs	r2, r3, #1
 8004276:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <UART_SetConfig+0x54c>)
 8004278:	4413      	add	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6852      	ldr	r2, [r2, #4]
 800427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	61bb      	str	r3, [r7, #24]
        break;
 8004286:	e01e      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004288:	f7fe fdf6 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 800428c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e00e      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	61bb      	str	r3, [r7, #24]
        break;
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
        break;
 80042c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d916      	bls.n	80042fa <UART_SetConfig+0x452>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d212      	bcs.n	80042fa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f023 030f 	bic.w	r3, r3, #15
 80042dc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	897a      	ldrh	r2, [r7, #10]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e070      	b.n	80043dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
 80042fe:	e06d      	b.n	80043dc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d859      	bhi.n	80043ba <UART_SetConfig+0x512>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x464>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004331 	.word	0x08004331
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800436d 	.word	0x0800436d
 8004318:	080043bb 	.word	0x080043bb
 800431c:	08004385 	.word	0x08004385
 8004320:	080043bb 	.word	0x080043bb
 8004324:	080043bb 	.word	0x080043bb
 8004328:	080043bb 	.word	0x080043bb
 800432c:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe fe86 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004334:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	085a      	lsrs	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	441a      	add	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	b29b      	uxth	r3, r3
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e038      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434e:	f7fe fe8b 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004352:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	61bb      	str	r3, [r7, #24]
        break;
 800436a:	e029      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	085a      	lsrs	r2, r3, #1
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <UART_SetConfig+0x550>)
 8004374:	4413      	add	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6852      	ldr	r2, [r2, #4]
 800437a:	fbb3 f3f2 	udiv	r3, r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	61bb      	str	r3, [r7, #24]
        break;
 8004382:	e01d      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004384:	f7fe fd78 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8004388:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	085a      	lsrs	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	61bb      	str	r3, [r7, #24]
        break;
 80043a0:	e00e      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e002      	b.n	80043c0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
        break;
 80043be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d908      	bls.n	80043d8 <UART_SetConfig+0x530>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d204      	bcs.n	80043d8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e001      	b.n	80043dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	01e84800 	.word	0x01e84800
 80043f8:	00f42400 	.word	0x00f42400

080043fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01a      	beq.n	8004512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d10a      	bne.n	8004512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800454e:	f7fc fc71 	bl	8000e34 <HAL_GetTick>
 8004552:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b08      	cmp	r3, #8
 8004560:	d10e      	bne.n	8004580 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004562:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f82a 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e020      	b.n	80045c2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d10e      	bne.n	80045ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f814 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e00a      	b.n	80045c2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	e05d      	b.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e2:	d059      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fc fc26 	bl	8000e34 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <UART_WaitOnFlagUntilTimeout+0x30>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11b      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e042      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02b      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d123      	bne.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004658:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004668:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e00f      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d092      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c0:	b084      	sub	sp, #16
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	f107 001c 	add.w	r0, r7, #28
 80046ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d120      	bne.n	800471a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <USB_CoreInit+0xac>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa52 	bl	8004bb8 <USB_CoreReset>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e010      	b.n	800473c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa46 	bl	8004bb8 <USB_CoreReset>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10b      	bne.n	800475a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0206 	orr.w	r2, r3, #6
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004766:	b004      	add	sp, #16
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	ffbdffbf 	.word	0xffbdffbf

08004770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 0201 	bic.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e00b      	b.n	80047d6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	e001      	b.n	80047d6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e003      	b.n	80047de <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047d6:	2032      	movs	r0, #50	; 0x32
 80047d8:	f7fc fb38 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e8:	b084      	sub	sp, #16
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e009      	b.n	800481c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3340      	adds	r3, #64	; 0x40
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3301      	adds	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0e      	cmp	r3, #14
 8004820:	d9f2      	bls.n	8004808 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11c      	bne.n	8004862 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e005      	b.n	800486e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	4619      	mov	r1, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	461a      	mov	r2, r3
 800488a:	680b      	ldr	r3, [r1, #0]
 800488c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800489a:	2100      	movs	r1, #0
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f959 	bl	8004b54 <USB_SetDevSpeed>
 80048a2:	e018      	b.n	80048d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048a4:	2101      	movs	r1, #1
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f954 	bl	8004b54 <USB_SetDevSpeed>
 80048ac:	e013      	b.n	80048d6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10c      	bne.n	80048ce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ba:	2100      	movs	r1, #0
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f949 	bl	8004b54 <USB_SetDevSpeed>
 80048c2:	e008      	b.n	80048d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048c4:	2101      	movs	r1, #1
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f944 	bl	8004b54 <USB_SetDevSpeed>
 80048cc:	e003      	b.n	80048d6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ce:	2103      	movs	r1, #3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f93f 	bl	8004b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048d6:	2110      	movs	r1, #16
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8f3 	bl	8004ac4 <USB_FlushTxFifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f911 	bl	8004b10 <USB_FlushRxFifo>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e043      	b.n	80049aa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004938:	d118      	bne.n	800496c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	461a      	mov	r2, r3
 800494e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e013      	b.n	800497e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	461a      	mov	r2, r3
 8004964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e008      	b.n	800497e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	461a      	mov	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	461a      	mov	r2, r3
 800499e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3301      	adds	r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3b7      	bcc.n	8004922 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	e043      	b.n	8004a40 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ce:	d118      	bne.n	8004a02 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e013      	b.n	8004a14 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e008      	b.n	8004a14 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3b7      	bcc.n	80049b8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f043 0210 	orr.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <USB_DevInit+0x2d4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f043 0208 	orr.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <USB_DevInit+0x2d8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab8:	b004      	add	sp, #16
 8004aba:	4770      	bx	lr
 8004abc:	803c3800 	.word	0x803c3800
 8004ac0:	40000004 	.word	0x40000004

08004ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <USB_FlushTxFifo+0x48>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e006      	b.n	8004afe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d0f0      	beq.n	8004ade <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <USB_FlushRxFifo+0x40>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e006      	b.n	8004b42 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d0f0      	beq.n	8004b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	00030d40 	.word	0x00030d40

08004b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	f7fc f950 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <USB_CoreReset+0x64>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e01b      	b.n	8004c0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	daf2      	bge.n	8004bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <USB_CoreReset+0x64>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e006      	b.n	8004c0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d0f0      	beq.n	8004bee <USB_CoreReset+0x36>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004c26:	2100      	movs	r1, #0
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f004 fbbb 	bl	80093a4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <MX_LWIP_Init+0x6c>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004c34:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <MX_LWIP_Init+0x70>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <MX_LWIP_Init+0x74>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <MX_LWIP_Init+0x78>)
 8004c42:	9302      	str	r3, [sp, #8]
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <MX_LWIP_Init+0x7c>)
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <MX_LWIP_Init+0x74>)
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <MX_LWIP_Init+0x70>)
 8004c50:	490e      	ldr	r1, [pc, #56]	; (8004c8c <MX_LWIP_Init+0x6c>)
 8004c52:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c54:	f005 f92a 	bl	8009eac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c58:	4811      	ldr	r0, [pc, #68]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c5a:	f005 fadd 	bl	800a218 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c70:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c72:	f005 fae1 	bl	800a238 <netif_set_up>
 8004c76:	e002      	b.n	8004c7e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c78:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c7a:	f005 fb49 	bl	800a310 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004c7e:	4808      	ldr	r0, [pc, #32]	; (8004ca0 <MX_LWIP_Init+0x80>)
 8004c80:	f00c fcc8 	bl	8011614 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20005054 	.word	0x20005054
 8004c90:	20005058 	.word	0x20005058
 8004c94:	2000505c 	.word	0x2000505c
 8004c98:	080092e1 	.word	0x080092e1
 8004c9c:	080052e1 	.word	0x080052e1
 8004ca0:	20005020 	.word	0x20005020

08004ca4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	; 0x38
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_ETH_MspInit+0x168>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f040 809e 	bne.w	8004e04 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004cc8:	4b51      	ldr	r3, [pc, #324]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4a50      	ldr	r2, [pc, #320]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd4:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b48      	ldr	r3, [pc, #288]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4b45      	ldr	r3, [pc, #276]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	4a44      	ldr	r2, [pc, #272]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d02:	6313      	str	r3, [r2, #48]	; 0x30
 8004d04:	4b42      	ldr	r3, [pc, #264]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d10:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	4a3e      	ldr	r2, [pc, #248]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d16:	f043 0304 	orr.w	r3, r3, #4
 8004d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1c:	4b3c      	ldr	r3, [pc, #240]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d28:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6313      	str	r3, [r2, #48]	; 0x30
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d40:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4c:	4b30      	ldr	r3, [pc, #192]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d58:	4b2d      	ldr	r3, [pc, #180]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d62:	6313      	str	r3, [r2, #48]	; 0x30
 8004d64:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <HAL_ETH_MspInit+0x16c>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d70:	2332      	movs	r3, #50	; 0x32
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d74:	2302      	movs	r3, #2
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d80:	230b      	movs	r3, #11
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4822      	ldr	r0, [pc, #136]	; (8004e14 <HAL_ETH_MspInit+0x170>)
 8004d8c:	f7fd f954 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d90:	2386      	movs	r3, #134	; 0x86
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d94:	2302      	movs	r3, #2
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004da0:	230b      	movs	r3, #11
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da8:	4619      	mov	r1, r3
 8004daa:	481b      	ldr	r0, [pc, #108]	; (8004e18 <HAL_ETH_MspInit+0x174>)
 8004dac:	f7fd f944 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db6:	2302      	movs	r3, #2
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dc2:	230b      	movs	r3, #11
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4813      	ldr	r0, [pc, #76]	; (8004e1c <HAL_ETH_MspInit+0x178>)
 8004dce:	f7fd f933 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004dd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de0:	2303      	movs	r3, #3
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004de4:	230b      	movs	r3, #11
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dec:	4619      	mov	r1, r3
 8004dee:	480c      	ldr	r0, [pc, #48]	; (8004e20 <HAL_ETH_MspInit+0x17c>)
 8004df0:	f7fd f922 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2105      	movs	r1, #5
 8004df8:	203d      	movs	r0, #61	; 0x3d
 8004dfa:	f7fc f901 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004dfe:	203d      	movs	r0, #61	; 0x3d
 8004e00:	f7fc f91a 	bl	8001038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e04:	bf00      	nop
 8004e06:	3738      	adds	r7, #56	; 0x38
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40028000 	.word	0x40028000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40020800 	.word	0x40020800
 8004e18:	40020000 	.word	0x40020000
 8004e1c:	40020400 	.word	0x40020400
 8004e20:	40021800 	.word	0x40021800

08004e24 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_ETH_RxCpltCallback+0x1c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fe43 	bl	8005abc <osSemaphoreRelease>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200000a4 	.word	0x200000a4

08004e44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b090      	sub	sp, #64	; 0x40
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e50:	4b59      	ldr	r3, [pc, #356]	; (8004fb8 <low_level_init+0x174>)
 8004e52:	4a5a      	ldr	r2, [pc, #360]	; (8004fbc <low_level_init+0x178>)
 8004e54:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004e56:	4b58      	ldr	r3, [pc, #352]	; (8004fb8 <low_level_init+0x174>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004e5c:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <low_level_init+0x174>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004e62:	2300      	movs	r3, #0
 8004e64:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004e6a:	23e1      	movs	r3, #225	; 0xe1
 8004e6c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004e72:	2300      	movs	r3, #0
 8004e74:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004e76:	2300      	movs	r3, #0
 8004e78:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004e7a:	4a4f      	ldr	r2, [pc, #316]	; (8004fb8 <low_level_init+0x174>)
 8004e7c:	f107 030c 	add.w	r3, r7, #12
 8004e80:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004e82:	4b4d      	ldr	r3, [pc, #308]	; (8004fb8 <low_level_init+0x174>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <low_level_init+0x174>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	; (8004fb8 <low_level_init+0x174>)
 8004e90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e94:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e96:	4848      	ldr	r0, [pc, #288]	; (8004fb8 <low_level_init+0x174>)
 8004e98:	f7fc f8dc 	bl	8001054 <HAL_ETH_Init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004ea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <low_level_init+0x78>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <low_level_init+0x17c>)
 8004ec0:	4940      	ldr	r1, [pc, #256]	; (8004fc4 <low_level_init+0x180>)
 8004ec2:	483d      	ldr	r0, [pc, #244]	; (8004fb8 <low_level_init+0x174>)
 8004ec4:	f7fc fa62 	bl	800138c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004ec8:	2304      	movs	r3, #4
 8004eca:	4a3f      	ldr	r2, [pc, #252]	; (8004fc8 <low_level_init+0x184>)
 8004ecc:	493f      	ldr	r1, [pc, #252]	; (8004fcc <low_level_init+0x188>)
 8004ece:	483a      	ldr	r0, [pc, #232]	; (8004fb8 <low_level_init+0x174>)
 8004ed0:	f7fc fac5 	bl	800145e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <low_level_init+0x174>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ee8:	4b33      	ldr	r3, [pc, #204]	; (8004fb8 <low_level_init+0x174>)
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	785a      	ldrb	r2, [r3, #1]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <low_level_init+0x174>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	789a      	ldrb	r2, [r3, #2]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <low_level_init+0x174>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	78da      	ldrb	r2, [r3, #3]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <low_level_init+0x174>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	791a      	ldrb	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <low_level_init+0x174>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	795a      	ldrb	r2, [r3, #5]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f2a:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f32:	f043 030a 	orr.w	r3, r3, #10
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2101      	movs	r1, #1
 8004f42:	2001      	movs	r0, #1
 8004f44:	f000 fcb6 	bl	80058b4 <osSemaphoreNew>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <low_level_init+0x18c>)
 8004f4c:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f010 fa40 	bl	80153dc <memset>
  attributes.name = "EthIf";
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <low_level_init+0x190>)
 8004f5e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004f60:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004f66:	2330      	movs	r3, #48	; 0x30
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4819      	ldr	r0, [pc, #100]	; (8004fd8 <low_level_init+0x194>)
 8004f74:	f000 fa82 	bl	800547c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */ 
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004f78:	480f      	ldr	r0, [pc, #60]	; (8004fb8 <low_level_init+0x174>)
 8004f7a:	f7fc fd98 	bl	8001aae <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004f7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f82:	461a      	mov	r2, r3
 8004f84:	211d      	movs	r1, #29
 8004f86:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <low_level_init+0x174>)
 8004f88:	f7fc fcc3 	bl	8001912 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	f043 030b 	orr.w	r3, r3, #11
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	461a      	mov	r2, r3
 8004f98:	211d      	movs	r1, #29
 8004f9a:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <low_level_init+0x174>)
 8004f9c:	f7fc fd21 	bl	80019e2 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	211d      	movs	r1, #29
 8004fa8:	4803      	ldr	r0, [pc, #12]	; (8004fb8 <low_level_init+0x174>)
 8004faa:	f7fc fcb2 	bl	8001912 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004fae:	bf00      	nop
 8004fb0:	3740      	adds	r7, #64	; 0x40
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20006930 	.word	0x20006930
 8004fbc:	40028000 	.word	0x40028000
 8004fc0:	20006978 	.word	0x20006978
 8004fc4:	20005060 	.word	0x20005060
 8004fc8:	200050e0 	.word	0x200050e0
 8004fcc:	200068b0 	.word	0x200068b0
 8004fd0:	200000a4 	.word	0x200000a4
 8004fd4:	08016250 	.word	0x08016250
 8004fd8:	08005281 	.word	0x08005281

08004fdc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004fe6:	4b4b      	ldr	r3, [pc, #300]	; (8005114 <low_level_output+0x138>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004ffe:	4b45      	ldr	r3, [pc, #276]	; (8005114 <low_level_output+0x138>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	e05a      	b.n	80050c4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da03      	bge.n	800501e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005016:	23f8      	movs	r3, #248	; 0xf8
 8005018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800501c:	e05c      	b.n	80050d8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	895b      	ldrh	r3, [r3, #10]
 8005022:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005028:	e02f      	b.n	800508a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	18d0      	adds	r0, r2, r3
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	18d1      	adds	r1, r2, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	461a      	mov	r2, r3
 8005042:	f010 f9c0 	bl	80153c6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da03      	bge.n	800505c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005054:	23f8      	movs	r3, #248	; 0xf8
 8005056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800505a:	e03d      	b.n	80050d8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800506c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005078:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005084:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005094:	4293      	cmp	r3, r2
 8005096:	d8c8      	bhi.n	800502a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	18d0      	adds	r0, r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4413      	add	r3, r2
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f010 f98c 	bl	80153c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1a1      	bne.n	800500e <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	4811      	ldr	r0, [pc, #68]	; (8005114 <low_level_output+0x138>)
 80050ce:	f7fc fa33 	bl	8001538 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <low_level_output+0x138>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80050e0:	4413      	add	r3, r2
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <low_level_output+0x138>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80050f4:	4413      	add	r3, r2
 80050f6:	2220      	movs	r2, #32
 80050f8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <low_level_output+0x138>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	f241 0304 	movw	r3, #4100	; 0x1004
 8005102:	4413      	add	r3, r2
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20006930 	.word	0x20006930

08005118 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	; 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800513c:	484f      	ldr	r0, [pc, #316]	; (800527c <low_level_input+0x164>)
 800513e:	f7fc fae5 	bl	800170c <HAL_ETH_GetReceivedFrame_IT>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <low_level_input+0x34>
  
    return NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	e092      	b.n	8005272 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800514c:	4b4b      	ldr	r3, [pc, #300]	; (800527c <low_level_input+0x164>)
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005152:	4b4a      	ldr	r3, [pc, #296]	; (800527c <low_level_input+0x164>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005164:	4619      	mov	r1, r3
 8005166:	2000      	movs	r0, #0
 8005168:	f005 f9bc 	bl	800a4e4 <pbuf_alloc>
 800516c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d04b      	beq.n	800520c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <low_level_input+0x164>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
 8005182:	e040      	b.n	8005206 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	895b      	ldrh	r3, [r3, #10]
 8005188:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800518e:	e021      	b.n	80051d4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	18d0      	adds	r0, r2, r3
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	18d1      	adds	r1, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	461a      	mov	r2, r3
 80051a8:	f010 f90d 	bl	80153c6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80051c2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051ce:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051de:	4293      	cmp	r3, r2
 80051e0:	d8d6      	bhi.n	8005190 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	18d0      	adds	r0, r2, r3
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4619      	mov	r1, r3
 80051f4:	f010 f8e7 	bl	80153c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1bb      	bne.n	8005184 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <low_level_input+0x164>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e00b      	b.n	8005230 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3301      	adds	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <low_level_input+0x164>)
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d3ee      	bcc.n	8005218 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <low_level_input+0x164>)
 800523c:	2200      	movs	r2, #0
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <low_level_input+0x164>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	f241 0314 	movw	r3, #4116	; 0x1014
 8005248:	4413      	add	r3, r2
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <low_level_input+0x164>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	f241 0314 	movw	r3, #4116	; 0x1014
 800525c:	4413      	add	r3, r2
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <low_level_input+0x164>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f241 0308 	movw	r3, #4104	; 0x1008
 800526a:	4413      	add	r3, r2
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005272:	4618      	mov	r0, r3
 8005274:	3730      	adds	r7, #48	; 0x30
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20006930 	.word	0x20006930

08005280 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <ethernetif_input+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fbab 	bl	80059f0 <osSemaphoreAcquire>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f5      	bne.n	800528c <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 80052a0:	480e      	ldr	r0, [pc, #56]	; (80052dc <ethernetif_input+0x5c>)
 80052a2:	f010 f803 	bl	80152ac <sys_mutex_lock>
        p = low_level_input( netif );
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff ff36 	bl	8005118 <low_level_input>
 80052ac:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	68b8      	ldr	r0, [r7, #8]
 80052bc:	4798      	blx	r3
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80052c4:	68b8      	ldr	r0, [r7, #8]
 80052c6:	f005 fbed 	bl	800aaa4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80052ca:	4804      	ldr	r0, [pc, #16]	; (80052dc <ethernetif_input+0x5c>)
 80052cc:	f00f fffd 	bl	80152ca <sys_mutex_unlock>
      } while(p!=NULL);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e4      	bne.n	80052a0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052d6:	e7d9      	b.n	800528c <ethernetif_input+0xc>
 80052d8:	200000a4 	.word	0x200000a4
 80052dc:	20008188 	.word	0x20008188

080052e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <ethernetif_init+0x1c>
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <ethernetif_init+0x48>)
 80052f0:	f240 223a 	movw	r2, #570	; 0x23a
 80052f4:	490d      	ldr	r1, [pc, #52]	; (800532c <ethernetif_init+0x4c>)
 80052f6:	480e      	ldr	r0, [pc, #56]	; (8005330 <ethernetif_init+0x50>)
 80052f8:	f010 f878 	bl	80153ec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2273      	movs	r2, #115	; 0x73
 8005300:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2274      	movs	r2, #116	; 0x74
 8005308:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <ethernetif_init+0x54>)
 8005310:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <ethernetif_init+0x58>)
 8005316:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fd93 	bl	8004e44 <low_level_init>

  return ERR_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	08016258 	.word	0x08016258
 800532c:	08016274 	.word	0x08016274
 8005330:	08016284 	.word	0x08016284
 8005334:	08013465 	.word	0x08013465
 8005338:	08004fdd 	.word	0x08004fdd

0800533c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005340:	f7fb fd78 	bl	8000e34 <HAL_GetTick>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}

0800534a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	60bb      	str	r3, [r7, #8]
  return(result);
 8005364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536a:	f3ef 8310 	mrs	r3, PRIMASK
 800536e:	607b      	str	r3, [r7, #4]
  return(result);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d105      	bne.n	8005382 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005376:	f3ef 8311 	mrs	r3, BASEPRI
 800537a:	603b      	str	r3, [r7, #0]
  return(result);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <osKernelInitialize+0x3a>
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <osKernelInitialize+0x64>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d103      	bne.n	8005392 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800538a:	f06f 0305 	mvn.w	r3, #5
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e00c      	b.n	80053ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <osKernelInitialize+0x64>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <osKernelInitialize+0x64>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e002      	b.n	80053ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	200000a8 	.word	0x200000a8

080053c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80053cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10f      	bne.n	80053f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d2:	f3ef 8310 	mrs	r3, PRIMASK
 80053d6:	607b      	str	r3, [r7, #4]
  return(result);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053de:	f3ef 8311 	mrs	r3, BASEPRI
 80053e2:	603b      	str	r3, [r7, #0]
  return(result);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <osKernelStart+0x3a>
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <osKernelStart+0x68>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d103      	bne.n	80053fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80053f2:	f06f 0305 	mvn.w	r3, #5
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e010      	b.n	800541c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <osKernelStart+0x68>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d109      	bne.n	8005416 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005402:	f7ff ffa2 	bl	800534a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <osKernelStart+0x68>)
 8005408:	2202      	movs	r2, #2
 800540a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800540c:	f002 f8c8 	bl	80075a0 <vTaskStartScheduler>
      stat = osOK;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e002      	b.n	800541c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800541a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800541c:	68fb      	ldr	r3, [r7, #12]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200000a8 	.word	0x200000a8

0800542c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005432:	f3ef 8305 	mrs	r3, IPSR
 8005436:	60bb      	str	r3, [r7, #8]
  return(result);
 8005438:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543e:	f3ef 8310 	mrs	r3, PRIMASK
 8005442:	607b      	str	r3, [r7, #4]
  return(result);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800544a:	f3ef 8311 	mrs	r3, BASEPRI
 800544e:	603b      	str	r3, [r7, #0]
  return(result);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <osKernelGetTickCount+0x3a>
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <osKernelGetTickCount+0x4c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d103      	bne.n	8005466 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800545e:	f002 f9c3 	bl	80077e8 <xTaskGetTickCountFromISR>
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	e002      	b.n	800546c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005466:	f002 f9af 	bl	80077c8 <xTaskGetTickCount>
 800546a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200000a8 	.word	0x200000a8

0800547c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b090      	sub	sp, #64	; 0x40
 8005480:	af04      	add	r7, sp, #16
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548c:	f3ef 8305 	mrs	r3, IPSR
 8005490:	61fb      	str	r3, [r7, #28]
  return(result);
 8005492:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 808f 	bne.w	80055b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549a:	f3ef 8310 	mrs	r3, PRIMASK
 800549e:	61bb      	str	r3, [r7, #24]
  return(result);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a6:	f3ef 8311 	mrs	r3, BASEPRI
 80054aa:	617b      	str	r3, [r7, #20]
  return(result);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <osThreadNew+0x3e>
 80054b2:	4b44      	ldr	r3, [pc, #272]	; (80055c4 <osThreadNew+0x148>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d07e      	beq.n	80055b8 <osThreadNew+0x13c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d07b      	beq.n	80055b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80054c4:	2318      	movs	r3, #24
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d045      	beq.n	8005564 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <osThreadNew+0x6a>
        name = attr->name;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <osThreadNew+0x90>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	2b38      	cmp	r3, #56	; 0x38
 80054fe:	d805      	bhi.n	800550c <osThreadNew+0x90>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <osThreadNew+0x94>
        return (NULL);
 800550c:	2300      	movs	r3, #0
 800550e:	e054      	b.n	80055ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	089b      	lsrs	r3, r3, #2
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <osThreadNew+0xca>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b5b      	cmp	r3, #91	; 0x5b
 800552e:	d90a      	bls.n	8005546 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <osThreadNew+0xca>
        mem = 1;
 8005540:	2301      	movs	r3, #1
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	e010      	b.n	8005568 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <osThreadNew+0xec>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <osThreadNew+0xec>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <osThreadNew+0xec>
          mem = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	623b      	str	r3, [r7, #32]
 8005562:	e001      	b.n	8005568 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d110      	bne.n	8005590 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f001 fe2f 	bl	80071e8 <xTaskCreateStatic>
 800558a:	4603      	mov	r3, r0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e013      	b.n	80055b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d110      	bne.n	80055b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	b29a      	uxth	r2, r3
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f001 fe7d 	bl	80072a8 <xTaskCreate>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d001      	beq.n	80055b8 <osThreadNew+0x13c>
          hTask = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055b8:	693b      	ldr	r3, [r7, #16]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3730      	adds	r7, #48	; 0x30
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200000a8 	.word	0x200000a8

080055c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d0:	f3ef 8305 	mrs	r3, IPSR
 80055d4:	613b      	str	r3, [r7, #16]
  return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10f      	bne.n	80055fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055dc:	f3ef 8310 	mrs	r3, PRIMASK
 80055e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055e8:	f3ef 8311 	mrs	r3, BASEPRI
 80055ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <osDelay+0x3c>
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <osDelay+0x58>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d103      	bne.n	8005604 <osDelay+0x3c>
    stat = osErrorISR;
 80055fc:	f06f 0305 	mvn.w	r3, #5
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e007      	b.n	8005614 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <osDelay+0x4c>
      vTaskDelay(ticks);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 ff90 	bl	8007534 <vTaskDelay>
    }
  }

  return (stat);
 8005614:	697b      	ldr	r3, [r7, #20]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200000a8 	.word	0x200000a8

08005624 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005630:	f3ef 8305 	mrs	r3, IPSR
 8005634:	613b      	str	r3, [r7, #16]
  return(result);
 8005636:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8085 	bne.w	8005748 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563e:	f3ef 8310 	mrs	r3, PRIMASK
 8005642:	60fb      	str	r3, [r7, #12]
  return(result);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d105      	bne.n	8005656 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800564a:	f3ef 8311 	mrs	r3, BASEPRI
 800564e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osMutexNew+0x3a>
 8005656:	4b3f      	ldr	r3, [pc, #252]	; (8005754 <osMutexNew+0x130>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d074      	beq.n	8005748 <osMutexNew+0x124>
    if (attr != NULL) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	e001      	b.n	8005670 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <osMutexNew+0x5c>
      rmtx = 1U;
 800567a:	2301      	movs	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e001      	b.n	8005684 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d15c      	bne.n	8005748 <osMutexNew+0x124>
      mem = -1;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005692:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <osMutexNew+0x8c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b4f      	cmp	r3, #79	; 0x4f
 80056a8:	d902      	bls.n	80056b0 <osMutexNew+0x8c>
          mem = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	e00c      	b.n	80056ca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <osMutexNew+0xa6>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <osMutexNew+0xa6>
            mem = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e001      	b.n	80056ca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d112      	bne.n	80056f6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4619      	mov	r1, r3
 80056dc:	2004      	movs	r0, #4
 80056de:	f000 fe16 	bl	800630e <xQueueCreateMutexStatic>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24
 80056e4:	e016      	b.n	8005714 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4619      	mov	r1, r3
 80056ec:	2001      	movs	r0, #1
 80056ee:	f000 fe0e 	bl	800630e <xQueueCreateMutexStatic>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24
 80056f4:	e00e      	b.n	8005714 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005702:	2004      	movs	r0, #4
 8005704:	f000 fdeb 	bl	80062de <xQueueCreateMutex>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24
 800570a:	e003      	b.n	8005714 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800570c:	2001      	movs	r0, #1
 800570e:	f000 fde6 	bl	80062de <xQueueCreateMutex>
 8005712:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <osMutexNew+0x110>
        if (attr != NULL) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <osMutexNew+0x104>
          name = attr->name;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e001      	b.n	800572c <osMutexNew+0x108>
        } else {
          name = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800572c:	6979      	ldr	r1, [r7, #20]
 800572e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005730:	f001 fcd4 	bl	80070dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <osMutexNew+0x124>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	200000a8 	.word	0x200000a8

08005758 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005776:	f3ef 8305 	mrs	r3, IPSR
 800577a:	613b      	str	r3, [r7, #16]
  return(result);
 800577c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005782:	f3ef 8310 	mrs	r3, PRIMASK
 8005786:	60fb      	str	r3, [r7, #12]
  return(result);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800578e:	f3ef 8311 	mrs	r3, BASEPRI
 8005792:	60bb      	str	r3, [r7, #8]
  return(result);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <osMutexAcquire+0x52>
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <osMutexAcquire+0xb8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d103      	bne.n	80057aa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80057a2:	f06f 0305 	mvn.w	r3, #5
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e02c      	b.n	8005804 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80057b0:	f06f 0303 	mvn.w	r3, #3
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e025      	b.n	8005804 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	69b8      	ldr	r0, [r7, #24]
 80057c2:	f000 fdf4 	bl	80063ae <xQueueTakeMutexRecursive>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d01b      	beq.n	8005804 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80057d2:	f06f 0301 	mvn.w	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e014      	b.n	8005804 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80057da:	f06f 0302 	mvn.w	r3, #2
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	e010      	b.n	8005804 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	69b8      	ldr	r0, [r7, #24]
 80057e6:	f001 f999 	bl	8006b1c <xQueueSemaphoreTake>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d009      	beq.n	8005804 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80057f6:	f06f 0301 	mvn.w	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e002      	b.n	8005804 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80057fe:	f06f 0302 	mvn.w	r3, #2
 8005802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005804:	69fb      	ldr	r3, [r7, #28]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200000a8 	.word	0x200000a8

08005814 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005830:	f3ef 8305 	mrs	r3, IPSR
 8005834:	613b      	str	r3, [r7, #16]
  return(result);
 8005836:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10f      	bne.n	800585c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583c:	f3ef 8310 	mrs	r3, PRIMASK
 8005840:	60fb      	str	r3, [r7, #12]
  return(result);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005848:	f3ef 8311 	mrs	r3, BASEPRI
 800584c:	60bb      	str	r3, [r7, #8]
  return(result);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <osMutexRelease+0x50>
 8005854:	4b16      	ldr	r3, [pc, #88]	; (80058b0 <osMutexRelease+0x9c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d103      	bne.n	8005864 <osMutexRelease+0x50>
    stat = osErrorISR;
 800585c:	f06f 0305 	mvn.w	r3, #5
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e01f      	b.n	80058a4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800586a:	f06f 0303 	mvn.w	r3, #3
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	e018      	b.n	80058a4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005878:	69b8      	ldr	r0, [r7, #24]
 800587a:	f000 fd63 	bl	8006344 <xQueueGiveMutexRecursive>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d00f      	beq.n	80058a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005884:	f06f 0302 	mvn.w	r3, #2
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e00b      	b.n	80058a4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	69b8      	ldr	r0, [r7, #24]
 8005894:	f000 fe30 	bl	80064f8 <xQueueGenericSend>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d002      	beq.n	80058a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800589e:	f06f 0302 	mvn.w	r3, #2
 80058a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	200000a8 	.word	0x200000a8

080058b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08c      	sub	sp, #48	; 0x30
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c4:	f3ef 8305 	mrs	r3, IPSR
 80058c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80058ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8087 	bne.w	80059e0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d2:	f3ef 8310 	mrs	r3, PRIMASK
 80058d6:	617b      	str	r3, [r7, #20]
  return(result);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058de:	f3ef 8311 	mrs	r3, BASEPRI
 80058e2:	613b      	str	r3, [r7, #16]
  return(result);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osSemaphoreNew+0x3e>
 80058ea:	4b40      	ldr	r3, [pc, #256]	; (80059ec <osSemaphoreNew+0x138>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d076      	beq.n	80059e0 <osSemaphoreNew+0x12c>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d073      	beq.n	80059e0 <osSemaphoreNew+0x12c>
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d86f      	bhi.n	80059e0 <osSemaphoreNew+0x12c>
    mem = -1;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005904:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d015      	beq.n	8005938 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <osSemaphoreNew+0x6e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b4f      	cmp	r3, #79	; 0x4f
 800591a:	d902      	bls.n	8005922 <osSemaphoreNew+0x6e>
        mem = 1;
 800591c:	2301      	movs	r3, #1
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	e00c      	b.n	800593c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <osSemaphoreNew+0x88>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <osSemaphoreNew+0x88>
          mem = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	e001      	b.n	800593c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005942:	d04d      	beq.n	80059e0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d129      	bne.n	800599e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10b      	bne.n	8005968 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	2303      	movs	r3, #3
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	2200      	movs	r2, #0
 800595c:	2100      	movs	r1, #0
 800595e:	2001      	movs	r0, #1
 8005960:	f000 fbc2 	bl	80060e8 <xQueueGenericCreateStatic>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24
 8005966:	e005      	b.n	8005974 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005968:	2203      	movs	r2, #3
 800596a:	2100      	movs	r1, #0
 800596c:	2001      	movs	r0, #1
 800596e:	f000 fc38 	bl	80061e2 <xQueueGenericCreate>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d022      	beq.n	80059c0 <osSemaphoreNew+0x10c>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01f      	beq.n	80059c0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005980:	2300      	movs	r3, #0
 8005982:	2200      	movs	r2, #0
 8005984:	2100      	movs	r1, #0
 8005986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005988:	f000 fdb6 	bl	80064f8 <xQueueGenericSend>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d016      	beq.n	80059c0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8005992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005994:	f001 fa55 	bl	8006e42 <vQueueDelete>
            hSemaphore = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
 800599c:	e010      	b.n	80059c0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d108      	bne.n	80059b6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fd35 	bl	800641c <xQueueCreateCountingSemaphoreStatic>
 80059b2:	6278      	str	r0, [r7, #36]	; 0x24
 80059b4:	e004      	b.n	80059c0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fd68 	bl	800648e <xQueueCreateCountingSemaphore>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <osSemaphoreNew+0x120>
          name = attr->name;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e001      	b.n	80059d8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059dc:	f001 fb7e 	bl	80070dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3728      	adds	r7, #40	; 0x28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200000a8 	.word	0x200000a8

080059f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005a08:	f06f 0303 	mvn.w	r3, #3
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e04b      	b.n	8005aa8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a10:	f3ef 8305 	mrs	r3, IPSR
 8005a14:	617b      	str	r3, [r7, #20]
  return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10f      	bne.n	8005a3c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a20:	613b      	str	r3, [r7, #16]
  return(result);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a28:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d026      	beq.n	8005a82 <osSemaphoreAcquire+0x92>
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <osSemaphoreAcquire+0xc4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d122      	bne.n	8005a82 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005a42:	f06f 0303 	mvn.w	r3, #3
 8005a46:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005a48:	e02d      	b.n	8005aa6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	461a      	mov	r2, r3
 8005a54:	2100      	movs	r1, #0
 8005a56:	69b8      	ldr	r0, [r7, #24]
 8005a58:	f001 f970 	bl	8006d3c <xQueueReceiveFromISR>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005a62:	f06f 0302 	mvn.w	r3, #2
 8005a66:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005a68:	e01d      	b.n	8005aa6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01a      	beq.n	8005aa6 <osSemaphoreAcquire+0xb6>
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <osSemaphoreAcquire+0xc8>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005a80:	e011      	b.n	8005aa6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	69b8      	ldr	r0, [r7, #24]
 8005a86:	f001 f849 	bl	8006b1c <xQueueSemaphoreTake>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00b      	beq.n	8005aa8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005a96:	f06f 0301 	mvn.w	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e004      	b.n	8005aa8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005a9e:	f06f 0302 	mvn.w	r3, #2
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e000      	b.n	8005aa8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005aa6:	bf00      	nop
      }
    }
  }

  return (stat);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200000a8 	.word	0x200000a8
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005ad2:	f06f 0303 	mvn.w	r3, #3
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e03e      	b.n	8005b58 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ada:	f3ef 8305 	mrs	r3, IPSR
 8005ade:	617b      	str	r3, [r7, #20]
  return(result);
 8005ae0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aea:	613b      	str	r3, [r7, #16]
  return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005af2:	f3ef 8311 	mrs	r3, BASEPRI
 8005af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <osSemaphoreRelease+0x80>
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <osSemaphoreRelease+0xa8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d11a      	bne.n	8005b3c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b0a:	f107 0308 	add.w	r3, r7, #8
 8005b0e:	4619      	mov	r1, r3
 8005b10:	69b8      	ldr	r0, [r7, #24]
 8005b12:	f000 fe8f 	bl	8006834 <xQueueGiveFromISR>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d003      	beq.n	8005b24 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005b1c:	f06f 0302 	mvn.w	r3, #2
 8005b20:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b22:	e018      	b.n	8005b56 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <osSemaphoreRelease+0x9a>
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <osSemaphoreRelease+0xac>)
 8005b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b3a:	e00c      	b.n	8005b56 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	69b8      	ldr	r0, [r7, #24]
 8005b44:	f000 fcd8 	bl	80064f8 <xQueueGenericSend>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d004      	beq.n	8005b58 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005b4e:	f06f 0302 	mvn.w	r3, #2
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e000      	b.n	8005b58 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b56:	bf00      	nop
    }
  }

  return (stat);
 8005b58:	69fb      	ldr	r3, [r7, #28]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200000a8 	.word	0x200000a8
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7c:	f3ef 8305 	mrs	r3, IPSR
 8005b80:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b82:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d170      	bne.n	8005c6a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b88:	f3ef 8310 	mrs	r3, PRIMASK
 8005b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d105      	bne.n	8005ba0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b94:	f3ef 8311 	mrs	r3, BASEPRI
 8005b98:	613b      	str	r3, [r7, #16]
  return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <osMessageQueueNew+0x3c>
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <osMessageQueueNew+0x108>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d060      	beq.n	8005c6a <osMessageQueueNew+0xfe>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d05d      	beq.n	8005c6a <osMessageQueueNew+0xfe>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d05a      	beq.n	8005c6a <osMessageQueueNew+0xfe>
    mem = -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d029      	beq.n	8005c14 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <osMessageQueueNew+0x82>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b4f      	cmp	r3, #79	; 0x4f
 8005bce:	d90e      	bls.n	8005bee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <osMessageQueueNew+0x82>
        mem = 1;
 8005be8:	2301      	movs	r3, #1
 8005bea:	623b      	str	r3, [r7, #32]
 8005bec:	e014      	b.n	8005c18 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d110      	bne.n	8005c18 <osMessageQueueNew+0xac>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10c      	bne.n	8005c18 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <osMessageQueueNew+0xac>
          mem = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	e001      	b.n	8005c18 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d10c      	bne.n	8005c38 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	2300      	movs	r3, #0
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa5a 	bl	80060e8 <xQueueGenericCreateStatic>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
 8005c36:	e008      	b.n	8005c4a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 facd 	bl	80061e2 <xQueueGenericCreate>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e001      	b.n	8005c62 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c66:	f001 fa39 	bl	80070dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200000a8 	.word	0x200000a8

08005c78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c90:	f3ef 8305 	mrs	r3, IPSR
 8005c94:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c96:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10f      	bne.n	8005cbc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cac:	617b      	str	r3, [r7, #20]
  return(result);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02c      	beq.n	8005d0e <osMessageQueuePut+0x96>
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <osMessageQueuePut+0xe0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d128      	bne.n	8005d0e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <osMessageQueuePut+0x56>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <osMessageQueuePut+0x56>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005cce:	f06f 0303 	mvn.w	r3, #3
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cd4:	e039      	b.n	8005d4a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cda:	f107 0210 	add.w	r2, r7, #16
 8005cde:	2300      	movs	r3, #0
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	6a38      	ldr	r0, [r7, #32]
 8005ce4:	f000 fd0a 	bl	80066fc <xQueueGenericSendFromISR>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d003      	beq.n	8005cf6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005cee:	f06f 0302 	mvn.w	r3, #2
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cf4:	e029      	b.n	8005d4a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d026      	beq.n	8005d4a <osMessageQueuePut+0xd2>
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <osMessageQueuePut+0xe4>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d0c:	e01d      	b.n	8005d4a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <osMessageQueuePut+0xa2>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005d1a:	f06f 0303 	mvn.w	r3, #3
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	e014      	b.n	8005d4c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d22:	2300      	movs	r3, #0
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6a38      	ldr	r0, [r7, #32]
 8005d2a:	f000 fbe5 	bl	80064f8 <xQueueGenericSend>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d00b      	beq.n	8005d4c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005d3a:	f06f 0301 	mvn.w	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	e004      	b.n	8005d4c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005d42:	f06f 0302 	mvn.w	r3, #2
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e000      	b.n	8005d4c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d4a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3728      	adds	r7, #40	; 0x28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200000a8 	.word	0x200000a8
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d76:	f3ef 8305 	mrs	r3, IPSR
 8005d7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d7c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d82:	f3ef 8310 	mrs	r3, PRIMASK
 8005d86:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d92:	617b      	str	r3, [r7, #20]
  return(result);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02c      	beq.n	8005df4 <osMessageQueueGet+0x94>
 8005d9a:	4b28      	ldr	r3, [pc, #160]	; (8005e3c <osMessageQueueGet+0xdc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d128      	bne.n	8005df4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <osMessageQueueGet+0x54>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <osMessageQueueGet+0x54>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005db4:	f06f 0303 	mvn.w	r3, #3
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dba:	e038      	b.n	8005e2e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005dc0:	f107 0310 	add.w	r3, r7, #16
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6a38      	ldr	r0, [r7, #32]
 8005dca:	f000 ffb7 	bl	8006d3c <xQueueReceiveFromISR>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d003      	beq.n	8005ddc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005dd4:	f06f 0302 	mvn.w	r3, #2
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dda:	e028      	b.n	8005e2e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d025      	beq.n	8005e2e <osMessageQueueGet+0xce>
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <osMessageQueueGet+0xe0>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005df2:	e01c      	b.n	8005e2e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <osMessageQueueGet+0xa0>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005e00:	f06f 0303 	mvn.w	r3, #3
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	e013      	b.n	8005e30 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	6a38      	ldr	r0, [r7, #32]
 8005e0e:	f000 fda3 	bl	8006958 <xQueueReceive>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d00b      	beq.n	8005e30 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005e1e:	f06f 0301 	mvn.w	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
 8005e24:	e004      	b.n	8005e30 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005e26:	f06f 0302 	mvn.w	r3, #2
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	e000      	b.n	8005e30 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e2e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3728      	adds	r7, #40	; 0x28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200000a8 	.word	0x200000a8
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <vApplicationGetIdleTaskMemory+0x30>)
 8005e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200000ac 	.word	0x200000ac
 8005e74:	20000108 	.word	0x20000108

08005e78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a06      	ldr	r2, [pc, #24]	; (8005ea8 <vApplicationGetTimerTaskMemory+0x30>)
 8005e8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	20000308 	.word	0x20000308
 8005ea8:	20000364 	.word	0x20000364

08005eac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f103 0208 	add.w	r2, r3, #8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f103 0208 	add.w	r2, r3, #8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f103 0208 	add.w	r2, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f64:	d103      	bne.n	8005f6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e00c      	b.n	8005f88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3308      	adds	r3, #8
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e002      	b.n	8005f7c <vListInsert+0x2e>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d2f6      	bcs.n	8005f76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6892      	ldr	r2, [r2, #8]
 8005fd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d103      	bne.n	8005ff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	b672      	cpsid	i
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	b662      	cpsie	i
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	e7fe      	b.n	800603e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006040:	f002 fd5a 	bl	8008af8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006070:	3b01      	subs	r3, #1
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006076:	fb01 f303 	mul.w	r3, r1, r3
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d114      	bne.n	80060c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01a      	beq.n	80060d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3310      	adds	r3, #16
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 fd1c 	bl	8007ae0 <xTaskRemoveFromEventList>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <xQueueGenericReset+0xd0>)
 80060b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	e009      	b.n	80060d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3310      	adds	r3, #16
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fef1 	bl	8005eac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff feec 	bl	8005eac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060d4:	f002 fd42 	bl	8008b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060d8:	2301      	movs	r3, #1
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	; 0x38
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <xQueueGenericCreateStatic+0x2c>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	b672      	cpsid	i
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	b662      	cpsie	i
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
 8006112:	e7fe      	b.n	8006112 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <xQueueGenericCreateStatic+0x4a>
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	b672      	cpsid	i
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	b662      	cpsie	i
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	e7fe      	b.n	8006130 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <xQueueGenericCreateStatic+0x56>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <xQueueGenericCreateStatic+0x5a>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGenericCreateStatic+0x5c>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xQueueGenericCreateStatic+0x78>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e7fe      	b.n	800615e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <xQueueGenericCreateStatic+0x84>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <xQueueGenericCreateStatic+0x88>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <xQueueGenericCreateStatic+0x8a>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xQueueGenericCreateStatic+0xa6>
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	b672      	cpsid	i
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	b662      	cpsie	i
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	e7fe      	b.n	800618c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800618e:	2350      	movs	r3, #80	; 0x50
 8006190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b50      	cmp	r3, #80	; 0x50
 8006196:	d00b      	beq.n	80061b0 <xQueueGenericCreateStatic+0xc8>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	b672      	cpsid	i
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	b662      	cpsie	i
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f846 	bl	8006264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061da:	4618      	mov	r0, r3
 80061dc:	3730      	adds	r7, #48	; 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08a      	sub	sp, #40	; 0x28
 80061e6:	af02      	add	r7, sp, #8
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	4613      	mov	r3, r2
 80061ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <xQueueGenericCreate+0x2c>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	b672      	cpsid	i
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	b662      	cpsie	i
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e7fe      	b.n	800620c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e004      	b.n	8006224 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3350      	adds	r3, #80	; 0x50
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fd87 	bl	8008d3c <pvPortMalloc>
 800622e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d011      	beq.n	800625a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3350      	adds	r3, #80	; 0x50
 800623e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006248:	79fa      	ldrb	r2, [r7, #7]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4613      	mov	r3, r2
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f805 	bl	8006264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800625a:	69bb      	ldr	r3, [r7, #24]
	}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e002      	b.n	8006286 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006292:	2101      	movs	r1, #1
 8006294:	69b8      	ldr	r0, [r7, #24]
 8006296:	f7ff febd 	bl	8006014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062ca:	2300      	movs	r3, #0
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f911 	bl	80064f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	4603      	mov	r3, r0
 80062e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6939      	ldr	r1, [r7, #16]
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff ff73 	bl	80061e2 <xQueueGenericCreate>
 80062fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff ffd3 	bl	80062aa <prvInitialiseMutex>

		return xNewQueue;
 8006304:	68fb      	ldr	r3, [r7, #12]
	}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800630e:	b580      	push	{r7, lr}
 8006310:	b088      	sub	sp, #32
 8006312:	af02      	add	r7, sp, #8
 8006314:	4603      	mov	r3, r0
 8006316:	6039      	str	r1, [r7, #0]
 8006318:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800631a:	2301      	movs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2200      	movs	r2, #0
 800632a:	6939      	ldr	r1, [r7, #16]
 800632c:	6978      	ldr	r0, [r7, #20]
 800632e:	f7ff fedb 	bl	80060e8 <xQueueGenericCreateStatic>
 8006332:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ffb8 	bl	80062aa <prvInitialiseMutex>

		return xNewQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
	}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006344:	b590      	push	{r4, r7, lr}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <xQueueGiveMutexRecursive+0x2a>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e7fe      	b.n	800636c <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	689c      	ldr	r4, [r3, #8]
 8006372:	f001 fd73 	bl	8007e5c <xTaskGetCurrentTaskHandle>
 8006376:	4603      	mov	r3, r0
 8006378:	429c      	cmp	r4, r3
 800637a:	d111      	bne.n	80063a0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f000 f8af 	bl	80064f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800639a:	2301      	movs	r3, #1
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e001      	b.n	80063a4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063a4:	697b      	ldr	r3, [r7, #20]
	}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}

080063ae <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063ae:	b590      	push	{r4, r7, lr}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <xQueueTakeMutexRecursive+0x2c>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e7fe      	b.n	80063d8 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	689c      	ldr	r4, [r3, #8]
 80063de:	f001 fd3d 	bl	8007e5c <xTaskGetCurrentTaskHandle>
 80063e2:	4603      	mov	r3, r0
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d107      	bne.n	80063f8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e00c      	b.n	8006412 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 fb8e 	bl	8006b1c <xQueueSemaphoreTake>
 8006400:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006412:	697b      	ldr	r3, [r7, #20]
	}
 8006414:	4618      	mov	r0, r3
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	b672      	cpsid	i
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	b662      	cpsie	i
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e7fe      	b.n	8006444 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	429a      	cmp	r2, r3
 800644c:	d90b      	bls.n	8006466 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e7fe      	b.n	8006464 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006466:	2302      	movs	r3, #2
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff fe39 	bl	80060e8 <xQueueGenericCreateStatic>
 8006476:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006484:	69fb      	ldr	r3, [r7, #28]
	}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <xQueueCreateCountingSemaphore+0x28>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	e7fe      	b.n	80064b4 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d90b      	bls.n	80064d6 <xQueueCreateCountingSemaphore+0x48>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e7fe      	b.n	80064d4 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064d6:	2202      	movs	r2, #2
 80064d8:	2100      	movs	r1, #0
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff fe81 	bl	80061e2 <xQueueGenericCreate>
 80064e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064ee:	697b      	ldr	r3, [r7, #20]
	}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08e      	sub	sp, #56	; 0x38
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <xQueueGenericSend+0x34>
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	b672      	cpsid	i
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	b662      	cpsie	i
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	e7fe      	b.n	800652a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <xQueueGenericSend+0x42>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueGenericSend+0x46>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueGenericSend+0x48>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <xQueueGenericSend+0x64>
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e7fe      	b.n	800655a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d103      	bne.n	800656a <xQueueGenericSend+0x72>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <xQueueGenericSend+0x76>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <xQueueGenericSend+0x78>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <xQueueGenericSend+0x94>
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	b672      	cpsid	i
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	b662      	cpsie	i
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e7fe      	b.n	800658a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800658c:	f001 fc76 	bl	8007e7c <xTaskGetSchedulerState>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <xQueueGenericSend+0xa4>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueGenericSend+0xa8>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <xQueueGenericSend+0xaa>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <xQueueGenericSend+0xc6>
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	b672      	cpsid	i
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	b662      	cpsie	i
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e7fe      	b.n	80065bc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065be:	f002 fa9b 	bl	8008af8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d302      	bcc.n	80065d4 <xQueueGenericSend+0xdc>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d129      	bne.n	8006628 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065da:	f000 fc6e 	bl	8006eba <prvCopyDataToQueue>
 80065de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	3324      	adds	r3, #36	; 0x24
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fa77 	bl	8007ae0 <xTaskRemoveFromEventList>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d013      	beq.n	8006620 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065f8:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <xQueueGenericSend+0x200>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	e00a      	b.n	8006620 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006610:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <xQueueGenericSend+0x200>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006620:	f002 fa9c 	bl	8008b5c <vPortExitCritical>
				return pdPASS;
 8006624:	2301      	movs	r3, #1
 8006626:	e063      	b.n	80066f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800662e:	f002 fa95 	bl	8008b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006632:	2300      	movs	r3, #0
 8006634:	e05c      	b.n	80066f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fab1 	bl	8007ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006646:	2301      	movs	r3, #1
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800664a:	f002 fa87 	bl	8008b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800664e:	f001 f80f 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006652:	f002 fa51 	bl	8008af8 <vPortEnterCritical>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800665c:	b25b      	sxtb	r3, r3
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006662:	d103      	bne.n	800666c <xQueueGenericSend+0x174>
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006672:	b25b      	sxtb	r3, r3
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x18a>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006682:	f002 fa6b 	bl	8008b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 faa0 	bl	8007bd4 <xTaskCheckForTimeOut>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d124      	bne.n	80066e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800669a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669c:	f000 fd05 	bl	80070aa <prvIsQueueFull>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	3310      	adds	r3, #16
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f9c4 	bl	8007a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b6:	f000 fc90 	bl	8006fda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ba:	f000 ffe7 	bl	800768c <xTaskResumeAll>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f af7c 	bne.w	80065be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <xQueueGenericSend+0x200>)
 80066c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	e772      	b.n	80065be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066da:	f000 fc7e 	bl	8006fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066de:	f000 ffd5 	bl	800768c <xTaskResumeAll>
 80066e2:	e76c      	b.n	80065be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e6:	f000 fc78 	bl	8006fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ea:	f000 ffcf 	bl	800768c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3738      	adds	r7, #56	; 0x38
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08e      	sub	sp, #56	; 0x38
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <xQueueGenericSendFromISR+0x30>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	b672      	cpsid	i
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	b662      	cpsie	i
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	e7fe      	b.n	800672a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <xQueueGenericSendFromISR+0x3e>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <xQueueGenericSendFromISR+0x42>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <xQueueGenericSendFromISR+0x44>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <xQueueGenericSendFromISR+0x60>
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	b672      	cpsid	i
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	b662      	cpsie	i
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	e7fe      	b.n	800675a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d103      	bne.n	800676a <xQueueGenericSendFromISR+0x6e>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <xQueueGenericSendFromISR+0x72>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <xQueueGenericSendFromISR+0x74>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <xQueueGenericSendFromISR+0x90>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e7fe      	b.n	800678a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800678c:	f002 fa94 	bl	8008cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006790:	f3ef 8211 	mrs	r2, BASEPRI
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	61ba      	str	r2, [r7, #24]
 80067aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <xQueueGenericSendFromISR+0xc6>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d12c      	bne.n	800681c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d2:	f000 fb72 	bl	8006eba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067de:	d112      	bne.n	8006806 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d016      	beq.n	8006816 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	3324      	adds	r3, #36	; 0x24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f977 	bl	8007ae0 <xTaskRemoveFromEventList>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e007      	b.n	8006816 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800680a:	3301      	adds	r3, #1
 800680c:	b2db      	uxtb	r3, r3
 800680e:	b25a      	sxtb	r2, r3
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006816:	2301      	movs	r3, #1
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800681a:	e001      	b.n	8006820 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800682c:	4618      	mov	r0, r3
 800682e:	3738      	adds	r7, #56	; 0x38
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	; 0x38
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	e7fe      	b.n	800685e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <xQueueGiveFromISR+0x4c>
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	b672      	cpsid	i
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	b662      	cpsie	i
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	e7fe      	b.n	800687e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <xQueueGiveFromISR+0x5c>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <xQueueGiveFromISR+0x60>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <xQueueGiveFromISR+0x62>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <xQueueGiveFromISR+0x7e>
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	b672      	cpsid	i
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	b662      	cpsie	i
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e7fe      	b.n	80068b0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b2:	f002 fa01 	bl	8008cb8 <vPortValidateInterruptPriority>
	__asm volatile
 80068b6:	f3ef 8211 	mrs	r2, BASEPRI
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	b672      	cpsid	i
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	b662      	cpsie	i
 80068ce:	617a      	str	r2, [r7, #20]
 80068d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d22b      	bcs.n	800693e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006900:	d112      	bne.n	8006928 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	3324      	adds	r3, #36	; 0x24
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f8e6 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e007      	b.n	8006938 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692c:	3301      	adds	r3, #1
 800692e:	b2db      	uxtb	r3, r3
 8006930:	b25a      	sxtb	r2, r3
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006938:	2301      	movs	r3, #1
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	e001      	b.n	8006942 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800693e:	2300      	movs	r3, #0
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800694e:	4618      	mov	r0, r3
 8006950:	3738      	adds	r7, #56	; 0x38
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08c      	sub	sp, #48	; 0x30
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <xQueueReceive+0x32>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	b672      	cpsid	i
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	b662      	cpsie	i
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	e7fe      	b.n	8006988 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <xQueueReceive+0x40>
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <xQueueReceive+0x44>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <xQueueReceive+0x46>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <xQueueReceive+0x62>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e7fe      	b.n	80069b8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ba:	f001 fa5f 	bl	8007e7c <xTaskGetSchedulerState>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xQueueReceive+0x72>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <xQueueReceive+0x76>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <xQueueReceive+0x78>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <xQueueReceive+0x94>
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	b672      	cpsid	i
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	b662      	cpsie	i
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e7fe      	b.n	80069ea <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ec:	f002 f884 	bl	8008af8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01f      	beq.n	8006a3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a00:	f000 fac5 	bl	8006f8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	1e5a      	subs	r2, r3, #1
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00f      	beq.n	8006a34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	3310      	adds	r3, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 f861 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a24:	4b3c      	ldr	r3, [pc, #240]	; (8006b18 <xQueueReceive+0x1c0>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a34:	f002 f892 	bl	8008b5c <vPortExitCritical>
				return pdPASS;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e069      	b.n	8006b10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a42:	f002 f88b 	bl	8008b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e062      	b.n	8006b10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a50:	f107 0310 	add.w	r3, r7, #16
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f8a7 	bl	8007ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a5e:	f002 f87d 	bl	8008b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a62:	f000 fe05 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a66:	f002 f847 	bl	8008af8 <vPortEnterCritical>
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a76:	d103      	bne.n	8006a80 <xQueueReceive+0x128>
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8c:	d103      	bne.n	8006a96 <xQueueReceive+0x13e>
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a96:	f002 f861 	bl	8008b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a9a:	1d3a      	adds	r2, r7, #4
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 f896 	bl	8007bd4 <xTaskCheckForTimeOut>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d123      	bne.n	8006af6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab0:	f000 fae5 	bl	800707e <prvIsQueueEmpty>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d017      	beq.n	8006aea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	3324      	adds	r3, #36	; 0x24
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 ffba 	bl	8007a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aca:	f000 fa86 	bl	8006fda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ace:	f000 fddd 	bl	800768c <xTaskResumeAll>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d189      	bne.n	80069ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <xQueueReceive+0x1c0>)
 8006ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	e780      	b.n	80069ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aec:	f000 fa75 	bl	8006fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af0:	f000 fdcc 	bl	800768c <xTaskResumeAll>
 8006af4:	e77a      	b.n	80069ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af8:	f000 fa6f 	bl	8006fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006afc:	f000 fdc6 	bl	800768c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b02:	f000 fabc 	bl	800707e <prvIsQueueEmpty>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f43f af6f 	beq.w	80069ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3730      	adds	r7, #48	; 0x30
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <xQueueSemaphoreTake+0x34>
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	b672      	cpsid	i
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	b662      	cpsie	i
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	e7fe      	b.n	8006b4e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <xQueueSemaphoreTake+0x54>
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	b672      	cpsid	i
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	b662      	cpsie	i
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e7fe      	b.n	8006b6e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b70:	f001 f984 	bl	8007e7c <xTaskGetSchedulerState>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xQueueSemaphoreTake+0x64>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <xQueueSemaphoreTake+0x68>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <xQueueSemaphoreTake+0x6a>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <xQueueSemaphoreTake+0x86>
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	b672      	cpsid	i
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	b662      	cpsie	i
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba2:	f001 ffa9 	bl	8008af8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d024      	beq.n	8006bfc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bc2:	f001 fad5 	bl	8008170 <pvTaskIncrementMutexHeldCount>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	3310      	adds	r3, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 ff81 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006be4:	4b54      	ldr	r3, [pc, #336]	; (8006d38 <xQueueSemaphoreTake+0x21c>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bf4:	f001 ffb2 	bl	8008b5c <vPortExitCritical>
				return pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e098      	b.n	8006d2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d112      	bne.n	8006c28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <xQueueSemaphoreTake+0x104>
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	b672      	cpsid	i
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	b662      	cpsie	i
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e7fe      	b.n	8006c1e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c20:	f001 ff9c 	bl	8008b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e082      	b.n	8006d2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 ffb8 	bl	8007ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c3c:	f001 ff8e 	bl	8008b5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c40:	f000 fd16 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c44:	f001 ff58 	bl	8008af8 <vPortEnterCritical>
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c54:	d103      	bne.n	8006c5e <xQueueSemaphoreTake+0x142>
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6a:	d103      	bne.n	8006c74 <xQueueSemaphoreTake+0x158>
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c74:	f001 ff72 	bl	8008b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c78:	463a      	mov	r2, r7
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 ffa7 	bl	8007bd4 <xTaskCheckForTimeOut>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d132      	bne.n	8006cf2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c8e:	f000 f9f6 	bl	800707e <prvIsQueueEmpty>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d026      	beq.n	8006ce6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006ca0:	f001 ff2a 	bl	8008af8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f905 	bl	8007eb8 <xTaskPriorityInherit>
 8006cae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006cb0:	f001 ff54 	bl	8008b5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	3324      	adds	r3, #36	; 0x24
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 febd 	bl	8007a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc4:	f000 f989 	bl	8006fda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc8:	f000 fce0 	bl	800768c <xTaskResumeAll>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f47f af67 	bne.w	8006ba2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <xQueueSemaphoreTake+0x21c>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	e75d      	b.n	8006ba2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce8:	f000 f977 	bl	8006fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cec:	f000 fcce 	bl	800768c <xTaskResumeAll>
 8006cf0:	e757      	b.n	8006ba2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf4:	f000 f971 	bl	8006fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf8:	f000 fcc8 	bl	800768c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cfe:	f000 f9be 	bl	800707e <prvIsQueueEmpty>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f43f af4c 	beq.w	8006ba2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00d      	beq.n	8006d2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d10:	f001 fef2 	bl	8008af8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d16:	f000 f8b8 	bl	8006e8a <prvGetDisinheritPriorityAfterTimeout>
 8006d1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 f9a0 	bl	8008068 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d28:	f001 ff18 	bl	8008b5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3738      	adds	r7, #56	; 0x38
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08e      	sub	sp, #56	; 0x38
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <xQueueReceiveFromISR+0x2e>
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	b672      	cpsid	i
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	b662      	cpsie	i
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	e7fe      	b.n	8006d68 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <xQueueReceiveFromISR+0x3c>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueReceiveFromISR+0x40>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueReceiveFromISR+0x42>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <xQueueReceiveFromISR+0x5e>
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e7fe      	b.n	8006d98 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d9a:	f001 ff8d 	bl	8008cb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	61ba      	str	r2, [r7, #24]
 8006db8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006dba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02f      	beq.n	8006e2a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd8:	f000 f8d9 	bl	8006f8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d112      	bne.n	8006e14 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d016      	beq.n	8006e24 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	3310      	adds	r3, #16
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fe70 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e007      	b.n	8006e24 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e18:	3301      	adds	r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	b25a      	sxtb	r2, r3
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
 8006e28:	e001      	b.n	8006e2e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3738      	adds	r7, #56	; 0x38
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10b      	bne.n	8006e6c <vQueueDelete+0x2a>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	b672      	cpsid	i
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	b662      	cpsie	i
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	e7fe      	b.n	8006e6a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f95d 	bl	800712c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f002 f825 	bl	8008ecc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d006      	beq.n	8006ea8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e001      	b.n	8006eac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006eac:	68fb      	ldr	r3, [r7, #12]
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10d      	bne.n	8006ef4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d14d      	bne.n	8006f7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 f84f 	bl	8007f88 <xTaskPriorityDisinherit>
 8006eea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	e043      	b.n	8006f7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d119      	bne.n	8006f2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6858      	ldr	r0, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	461a      	mov	r2, r3
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	f00e fa5e 	bl	80153c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	441a      	add	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d32b      	bcc.n	8006f7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	605a      	str	r2, [r3, #4]
 8006f2c:	e026      	b.n	8006f7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68d8      	ldr	r0, [r3, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	461a      	mov	r2, r3
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	f00e fa44 	bl	80153c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	425b      	negs	r3, r3
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d207      	bcs.n	8006f6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	425b      	negs	r3, r3
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d105      	bne.n	8006f7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f84:	697b      	ldr	r3, [r7, #20]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d018      	beq.n	8006fd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d303      	bcc.n	8006fc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68d9      	ldr	r1, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6838      	ldr	r0, [r7, #0]
 8006fce:	f00e f9fa 	bl	80153c6 <memcpy>
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fe2:	f001 fd89 	bl	8008af8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fee:	e011      	b.n	8007014 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3324      	adds	r3, #36	; 0x24
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fd6f 	bl	8007ae0 <xTaskRemoveFromEventList>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007008:	f000 fe48 	bl	8007c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	3b01      	subs	r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	dce9      	bgt.n	8006ff0 <prvUnlockQueue+0x16>
 800701c:	e000      	b.n	8007020 <prvUnlockQueue+0x46>
					break;
 800701e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	22ff      	movs	r2, #255	; 0xff
 8007024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007028:	f001 fd98 	bl	8008b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800702c:	f001 fd64 	bl	8008af8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007036:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007038:	e011      	b.n	800705e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3310      	adds	r3, #16
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fd4a 	bl	8007ae0 <xTaskRemoveFromEventList>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007052:	f000 fe23 	bl	8007c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	3b01      	subs	r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800705e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dce9      	bgt.n	800703a <prvUnlockQueue+0x60>
 8007066:	e000      	b.n	800706a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007068:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007072:	f001 fd73 	bl	8008b5c <vPortExitCritical>
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007086:	f001 fd37 	bl	8008af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e001      	b.n	800709c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800709c:	f001 fd5e 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070b2:	f001 fd21 	bl	8008af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d102      	bne.n	80070c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e001      	b.n	80070cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070cc:	f001 fd46 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 80070d0:	68fb      	ldr	r3, [r7, #12]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	e014      	b.n	8007116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070ec:	4a0e      	ldr	r2, [pc, #56]	; (8007128 <vQueueAddToRegistry+0x4c>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10b      	bne.n	8007110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070f8:	490b      	ldr	r1, [pc, #44]	; (8007128 <vQueueAddToRegistry+0x4c>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <vQueueAddToRegistry+0x4c>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800710e:	e005      	b.n	800711c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b07      	cmp	r3, #7
 800711a:	d9e7      	bls.n	80070ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800711c:	bf00      	nop
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20008148 	.word	0x20008148

0800712c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e016      	b.n	8007168 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800713a:	4a10      	ldr	r2, [pc, #64]	; (800717c <vQueueUnregisterQueue+0x50>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	429a      	cmp	r2, r3
 8007148:	d10b      	bne.n	8007162 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800714a:	4a0c      	ldr	r2, [pc, #48]	; (800717c <vQueueUnregisterQueue+0x50>)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2100      	movs	r1, #0
 8007150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007154:	4a09      	ldr	r2, [pc, #36]	; (800717c <vQueueUnregisterQueue+0x50>)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4413      	add	r3, r2
 800715c:	2200      	movs	r2, #0
 800715e:	605a      	str	r2, [r3, #4]
				break;
 8007160:	e005      	b.n	800716e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b07      	cmp	r3, #7
 800716c:	d9e5      	bls.n	800713a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800716e:	bf00      	nop
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20008148 	.word	0x20008148

08007180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007190:	f001 fcb2 	bl	8008af8 <vPortEnterCritical>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800719a:	b25b      	sxtb	r3, r3
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a0:	d103      	bne.n	80071aa <vQueueWaitForMessageRestricted+0x2a>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b0:	b25b      	sxtb	r3, r3
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b6:	d103      	bne.n	80071c0 <vQueueWaitForMessageRestricted+0x40>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071c0:	f001 fccc 	bl	8008b5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	3324      	adds	r3, #36	; 0x24
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fc57 	bl	8007a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071da:	6978      	ldr	r0, [r7, #20]
 80071dc:	f7ff fefd 	bl	8006fda <prvUnlockQueue>
	}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08e      	sub	sp, #56	; 0x38
 80071ec:	af04      	add	r7, sp, #16
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <xTaskCreateStatic+0x2c>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	b672      	cpsid	i
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	b662      	cpsie	i
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	e7fe      	b.n	8007212 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10b      	bne.n	8007232 <xTaskCreateStatic+0x4a>
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	b672      	cpsid	i
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	b662      	cpsie	i
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e7fe      	b.n	8007230 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007232:	235c      	movs	r3, #92	; 0x5c
 8007234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b5c      	cmp	r3, #92	; 0x5c
 800723a:	d00b      	beq.n	8007254 <xTaskCreateStatic+0x6c>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	e7fe      	b.n	8007252 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007254:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01e      	beq.n	800729a <xTaskCreateStatic+0xb2>
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01b      	beq.n	800729a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	2202      	movs	r2, #2
 8007270:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007274:	2300      	movs	r3, #0
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	f107 0314 	add.w	r3, r7, #20
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f850 	bl	8007332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007294:	f000 f8de 	bl	8007454 <prvAddNewTaskToReadyList>
 8007298:	e001      	b.n	800729e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800729e:	697b      	ldr	r3, [r7, #20]
	}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	; 0x30
 80072ac:	af04      	add	r7, sp, #16
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 fd3d 	bl	8008d3c <pvPortMalloc>
 80072c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072ca:	205c      	movs	r0, #92	; 0x5c
 80072cc:	f001 fd36 	bl	8008d3c <pvPortMalloc>
 80072d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
 80072de:	e005      	b.n	80072ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072e0:	6978      	ldr	r0, [r7, #20]
 80072e2:	f001 fdf3 	bl	8008ecc <vPortFree>
 80072e6:	e001      	b.n	80072ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d017      	beq.n	8007322 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	2300      	movs	r3, #0
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f80e 	bl	8007332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007316:	69f8      	ldr	r0, [r7, #28]
 8007318:	f000 f89c 	bl	8007454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800731c:	2301      	movs	r3, #1
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e002      	b.n	8007328 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007326:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007328:	69bb      	ldr	r3, [r7, #24]
	}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b088      	sub	sp, #32
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	461a      	mov	r2, r3
 800734a:	21a5      	movs	r1, #165	; 0xa5
 800734c:	f00e f846 	bl	80153dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800735a:	440b      	add	r3, r1
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f023 0307 	bic.w	r3, r3, #7
 8007368:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <prvInitialiseNewTask+0x5a>
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	b672      	cpsid	i
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	b662      	cpsie	i
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e7fe      	b.n	800738a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01f      	beq.n	80073d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	e012      	b.n	80073be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	7819      	ldrb	r1, [r3, #0]
 80073a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	3334      	adds	r3, #52	; 0x34
 80073a8:	460a      	mov	r2, r1
 80073aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3301      	adds	r3, #1
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d9e9      	bls.n	8007398 <prvInitialiseNewTask+0x66>
 80073c4:	e000      	b.n	80073c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80073c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073d0:	e003      	b.n	80073da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	2b37      	cmp	r3, #55	; 0x37
 80073de:	d901      	bls.n	80073e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073e0:	2337      	movs	r3, #55	; 0x37
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	2200      	movs	r2, #0
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fd76 	bl	8005eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	3318      	adds	r3, #24
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fd71 	bl	8005eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	2200      	movs	r2, #0
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	69b8      	ldr	r0, [r7, #24]
 8007434:	f001 fa58 	bl	80088e8 <pxPortInitialiseStack>
 8007438:	4602      	mov	r2, r0
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800744a:	bf00      	nop
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800745c:	f001 fb4c 	bl	8008af8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007460:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <prvAddNewTaskToReadyList+0xc4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3301      	adds	r3, #1
 8007466:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <prvAddNewTaskToReadyList+0xc4>)
 8007468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800746a:	4b2c      	ldr	r3, [pc, #176]	; (800751c <prvAddNewTaskToReadyList+0xc8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007472:	4a2a      	ldr	r2, [pc, #168]	; (800751c <prvAddNewTaskToReadyList+0xc8>)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007478:	4b27      	ldr	r3, [pc, #156]	; (8007518 <prvAddNewTaskToReadyList+0xc4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d110      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007480:	f000 fc30 	bl	8007ce4 <prvInitialiseTaskLists>
 8007484:	e00d      	b.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007486:	4b26      	ldr	r3, [pc, #152]	; (8007520 <prvAddNewTaskToReadyList+0xcc>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800748e:	4b23      	ldr	r3, [pc, #140]	; (800751c <prvAddNewTaskToReadyList+0xc8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	429a      	cmp	r2, r3
 800749a:	d802      	bhi.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800749c:	4a1f      	ldr	r2, [pc, #124]	; (800751c <prvAddNewTaskToReadyList+0xc8>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074a2:	4b20      	ldr	r3, [pc, #128]	; (8007524 <prvAddNewTaskToReadyList+0xd0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <prvAddNewTaskToReadyList+0xd0>)
 80074aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <prvAddNewTaskToReadyList+0xd0>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <prvAddNewTaskToReadyList+0xd4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d903      	bls.n	80074c8 <prvAddNewTaskToReadyList+0x74>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4a18      	ldr	r2, [pc, #96]	; (8007528 <prvAddNewTaskToReadyList+0xd4>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a15      	ldr	r2, [pc, #84]	; (800752c <prvAddNewTaskToReadyList+0xd8>)
 80074d6:	441a      	add	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe fd11 	bl	8005f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e4:	f001 fb3a 	bl	8008b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e8:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <prvAddNewTaskToReadyList+0xcc>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <prvAddNewTaskToReadyList+0xc8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d207      	bcs.n	800750e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <prvAddNewTaskToReadyList+0xdc>)
 8007500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000c38 	.word	0x20000c38
 800751c:	20000764 	.word	0x20000764
 8007520:	20000c44 	.word	0x20000c44
 8007524:	20000c54 	.word	0x20000c54
 8007528:	20000c40 	.word	0x20000c40
 800752c:	20000768 	.word	0x20000768
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <vTaskDelay+0x64>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <vTaskDelay+0x32>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	b672      	cpsid	i
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	b662      	cpsie	i
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	e7fe      	b.n	8007564 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007566:	f000 f883 	bl	8007670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800756a:	2100      	movs	r1, #0
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fe13 	bl	8008198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007572:	f000 f88b 	bl	800768c <xTaskResumeAll>
 8007576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <vTaskDelay+0x68>)
 8007580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000c60 	.word	0x20000c60
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ae:	463a      	mov	r2, r7
 80075b0:	1d39      	adds	r1, r7, #4
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fc44 	bl	8005e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	9202      	str	r2, [sp, #8]
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	460a      	mov	r2, r1
 80075ce:	4922      	ldr	r1, [pc, #136]	; (8007658 <vTaskStartScheduler+0xb8>)
 80075d0:	4822      	ldr	r0, [pc, #136]	; (800765c <vTaskStartScheduler+0xbc>)
 80075d2:	f7ff fe09 	bl	80071e8 <xTaskCreateStatic>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b21      	ldr	r3, [pc, #132]	; (8007660 <vTaskStartScheduler+0xc0>)
 80075da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075dc:	4b20      	ldr	r3, [pc, #128]	; (8007660 <vTaskStartScheduler+0xc0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e001      	b.n	80075ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d102      	bne.n	80075fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075f4:	f000 fe24 	bl	8008240 <xTimerCreateTimerTask>
 80075f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d117      	bne.n	8007630 <vTaskStartScheduler+0x90>
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	b672      	cpsid	i
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	b662      	cpsie	i
 8007614:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <vTaskStartScheduler+0xc4>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800761c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <vTaskStartScheduler+0xc8>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <vTaskStartScheduler+0xcc>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800762a:	f001 f9e9 	bl	8008a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800762e:	e00f      	b.n	8007650 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007636:	d10b      	bne.n	8007650 <vTaskStartScheduler+0xb0>
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e7fe      	b.n	800764e <vTaskStartScheduler+0xae>
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	080162ac 	.word	0x080162ac
 800765c:	08007cb5 	.word	0x08007cb5
 8007660:	20000c5c 	.word	0x20000c5c
 8007664:	20000c58 	.word	0x20000c58
 8007668:	20000c44 	.word	0x20000c44
 800766c:	20000c3c 	.word	0x20000c3c

08007670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <vTaskSuspendAll+0x18>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a03      	ldr	r2, [pc, #12]	; (8007688 <vTaskSuspendAll+0x18>)
 800767c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800767e:	bf00      	nop
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20000c60 	.word	0x20000c60

0800768c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800769a:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <xTaskResumeAll+0x118>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <xTaskResumeAll+0x2e>
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	b672      	cpsid	i
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	b662      	cpsie	i
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	e7fe      	b.n	80076b8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076ba:	f001 fa1d 	bl	8008af8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076be:	4b39      	ldr	r3, [pc, #228]	; (80077a4 <xTaskResumeAll+0x118>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	4a37      	ldr	r2, [pc, #220]	; (80077a4 <xTaskResumeAll+0x118>)
 80076c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c8:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <xTaskResumeAll+0x118>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d162      	bne.n	8007796 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076d0:	4b35      	ldr	r3, [pc, #212]	; (80077a8 <xTaskResumeAll+0x11c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d05e      	beq.n	8007796 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d8:	e02f      	b.n	800773a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076da:	4b34      	ldr	r3, [pc, #208]	; (80077ac <xTaskResumeAll+0x120>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fc6a 	bl	8005fc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fc65 	bl	8005fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	4b2d      	ldr	r3, [pc, #180]	; (80077b0 <xTaskResumeAll+0x124>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <xTaskResumeAll+0x7e>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <xTaskResumeAll+0x124>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <xTaskResumeAll+0x128>)
 8007718:	441a      	add	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe fbf0 	bl	8005f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <xTaskResumeAll+0x12c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	429a      	cmp	r2, r3
 8007732:	d302      	bcc.n	800773a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007734:	4b21      	ldr	r3, [pc, #132]	; (80077bc <xTaskResumeAll+0x130>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800773a:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <xTaskResumeAll+0x120>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1cb      	bne.n	80076da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007748:	f000 fb68 	bl	8007e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800774c:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <xTaskResumeAll+0x134>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d010      	beq.n	800777a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007758:	f000 f858 	bl	800780c <xTaskIncrementTick>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007762:	4b16      	ldr	r3, [pc, #88]	; (80077bc <xTaskResumeAll+0x130>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3b01      	subs	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f1      	bne.n	8007758 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007774:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <xTaskResumeAll+0x134>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <xTaskResumeAll+0x130>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <xTaskResumeAll+0x138>)
 8007788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007796:	f001 f9e1 	bl	8008b5c <vPortExitCritical>

	return xAlreadyYielded;
 800779a:	68bb      	ldr	r3, [r7, #8]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000c60 	.word	0x20000c60
 80077a8:	20000c38 	.word	0x20000c38
 80077ac:	20000bf8 	.word	0x20000bf8
 80077b0:	20000c40 	.word	0x20000c40
 80077b4:	20000768 	.word	0x20000768
 80077b8:	20000764 	.word	0x20000764
 80077bc:	20000c4c 	.word	0x20000c4c
 80077c0:	20000c48 	.word	0x20000c48
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <xTaskGetTickCount+0x1c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077d4:	687b      	ldr	r3, [r7, #4]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000c3c 	.word	0x20000c3c

080077e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ee:	f001 fa63 	bl	8008cb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80077f2:	2300      	movs	r3, #0
 80077f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80077f6:	4b04      	ldr	r3, [pc, #16]	; (8007808 <xTaskGetTickCountFromISR+0x20>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077fc:	683b      	ldr	r3, [r7, #0]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000c3c 	.word	0x20000c3c

0800780c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007816:	4b4f      	ldr	r3, [pc, #316]	; (8007954 <xTaskIncrementTick+0x148>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 808a 	bne.w	8007934 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007820:	4b4d      	ldr	r3, [pc, #308]	; (8007958 <xTaskIncrementTick+0x14c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007828:	4a4b      	ldr	r2, [pc, #300]	; (8007958 <xTaskIncrementTick+0x14c>)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d121      	bne.n	8007878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007834:	4b49      	ldr	r3, [pc, #292]	; (800795c <xTaskIncrementTick+0x150>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <xTaskIncrementTick+0x4a>
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	b672      	cpsid	i
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	b662      	cpsie	i
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	e7fe      	b.n	8007854 <xTaskIncrementTick+0x48>
 8007856:	4b41      	ldr	r3, [pc, #260]	; (800795c <xTaskIncrementTick+0x150>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	4b40      	ldr	r3, [pc, #256]	; (8007960 <xTaskIncrementTick+0x154>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3e      	ldr	r2, [pc, #248]	; (800795c <xTaskIncrementTick+0x150>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	4a3e      	ldr	r2, [pc, #248]	; (8007960 <xTaskIncrementTick+0x154>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <xTaskIncrementTick+0x158>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3301      	adds	r3, #1
 8007870:	4a3c      	ldr	r2, [pc, #240]	; (8007964 <xTaskIncrementTick+0x158>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	f000 fad2 	bl	8007e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007878:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <xTaskIncrementTick+0x15c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	429a      	cmp	r2, r3
 8007880:	d349      	bcc.n	8007916 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007882:	4b36      	ldr	r3, [pc, #216]	; (800795c <xTaskIncrementTick+0x150>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <xTaskIncrementTick+0x15c>)
 800788e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007892:	601a      	str	r2, [r3, #0]
					break;
 8007894:	e03f      	b.n	8007916 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007896:	4b31      	ldr	r3, [pc, #196]	; (800795c <xTaskIncrementTick+0x150>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d203      	bcs.n	80078b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078ae:	4a2e      	ldr	r2, [pc, #184]	; (8007968 <xTaskIncrementTick+0x15c>)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078b4:	e02f      	b.n	8007916 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fb80 	bl	8005fc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3318      	adds	r3, #24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fb77 	bl	8005fc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d6:	4b25      	ldr	r3, [pc, #148]	; (800796c <xTaskIncrementTick+0x160>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d903      	bls.n	80078e6 <xTaskIncrementTick+0xda>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	4a22      	ldr	r2, [pc, #136]	; (800796c <xTaskIncrementTick+0x160>)
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <xTaskIncrementTick+0x164>)
 80078f4:	441a      	add	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f7fe fb02 	bl	8005f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <xTaskIncrementTick+0x168>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d3b8      	bcc.n	8007882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007914:	e7b5      	b.n	8007882 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007916:	4b17      	ldr	r3, [pc, #92]	; (8007974 <xTaskIncrementTick+0x168>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	4914      	ldr	r1, [pc, #80]	; (8007970 <xTaskIncrementTick+0x164>)
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d907      	bls.n	800793e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800792e:	2301      	movs	r3, #1
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	e004      	b.n	800793e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007934:	4b10      	ldr	r3, [pc, #64]	; (8007978 <xTaskIncrementTick+0x16c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a0f      	ldr	r2, [pc, #60]	; (8007978 <xTaskIncrementTick+0x16c>)
 800793c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTaskIncrementTick+0x170>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800794a:	697b      	ldr	r3, [r7, #20]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000c60 	.word	0x20000c60
 8007958:	20000c3c 	.word	0x20000c3c
 800795c:	20000bf0 	.word	0x20000bf0
 8007960:	20000bf4 	.word	0x20000bf4
 8007964:	20000c50 	.word	0x20000c50
 8007968:	20000c58 	.word	0x20000c58
 800796c:	20000c40 	.word	0x20000c40
 8007970:	20000768 	.word	0x20000768
 8007974:	20000764 	.word	0x20000764
 8007978:	20000c48 	.word	0x20000c48
 800797c:	20000c4c 	.word	0x20000c4c

08007980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007986:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <vTaskSwitchContext+0xa8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800798e:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <vTaskSwitchContext+0xac>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007994:	e042      	b.n	8007a1c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007996:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <vTaskSwitchContext+0xac>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800799c:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <vTaskSwitchContext+0xb0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e011      	b.n	80079c8 <vTaskSwitchContext+0x48>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <vTaskSwitchContext+0x42>
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e7fe      	b.n	80079c0 <vTaskSwitchContext+0x40>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	491a      	ldr	r1, [pc, #104]	; (8007a34 <vTaskSwitchContext+0xb4>)
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0e3      	beq.n	80079a4 <vTaskSwitchContext+0x24>
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <vTaskSwitchContext+0xb4>)
 80079e8:	4413      	add	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3308      	adds	r3, #8
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d104      	bne.n	8007a0c <vTaskSwitchContext+0x8c>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	4a09      	ldr	r2, [pc, #36]	; (8007a38 <vTaskSwitchContext+0xb8>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	4a06      	ldr	r2, [pc, #24]	; (8007a30 <vTaskSwitchContext+0xb0>)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6013      	str	r3, [r2, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000c60 	.word	0x20000c60
 8007a2c:	20000c4c 	.word	0x20000c4c
 8007a30:	20000c40 	.word	0x20000c40
 8007a34:	20000768 	.word	0x20000768
 8007a38:	20000764 	.word	0x20000764

08007a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <vTaskPlaceOnEventList+0x28>
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	b672      	cpsid	i
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	b662      	cpsie	i
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e7fe      	b.n	8007a62 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <vTaskPlaceOnEventList+0x48>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fe fa6e 	bl	8005f4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a72:	2101      	movs	r1, #1
 8007a74:	6838      	ldr	r0, [r7, #0]
 8007a76:	f000 fb8f 	bl	8008198 <prvAddCurrentTaskToDelayedList>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000764 	.word	0x20000764

08007a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <vTaskPlaceOnEventListRestricted+0x2a>
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	b672      	cpsid	i
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	b662      	cpsie	i
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e7fe      	b.n	8007ab0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <vTaskPlaceOnEventListRestricted+0x54>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3318      	adds	r3, #24
 8007ab8:	4619      	mov	r1, r3
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7fe fa23 	bl	8005f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	68b8      	ldr	r0, [r7, #8]
 8007ad0:	f000 fb62 	bl	8008198 <prvAddCurrentTaskToDelayedList>
	}
 8007ad4:	bf00      	nop
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000764 	.word	0x20000764

08007ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <xTaskRemoveFromEventList+0x2e>
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	b672      	cpsid	i
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	b662      	cpsie	i
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e7fe      	b.n	8007b0c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3318      	adds	r3, #24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fa54 	bl	8005fc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <xTaskRemoveFromEventList+0xb0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d11d      	bne.n	8007b5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fa4b 	bl	8005fc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	4b19      	ldr	r3, [pc, #100]	; (8007b94 <xTaskRemoveFromEventList+0xb4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d903      	bls.n	8007b3e <xTaskRemoveFromEventList+0x5e>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <xTaskRemoveFromEventList+0xb4>)
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <xTaskRemoveFromEventList+0xb8>)
 8007b4c:	441a      	add	r2, r3
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe f9d6 	bl	8005f06 <vListInsertEnd>
 8007b5a:	e005      	b.n	8007b68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4619      	mov	r1, r3
 8007b62:	480e      	ldr	r0, [pc, #56]	; (8007b9c <xTaskRemoveFromEventList+0xbc>)
 8007b64:	f7fe f9cf 	bl	8005f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <xTaskRemoveFromEventList+0xc0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d905      	bls.n	8007b82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <xTaskRemoveFromEventList+0xc4>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e001      	b.n	8007b86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000c60 	.word	0x20000c60
 8007b94:	20000c40 	.word	0x20000c40
 8007b98:	20000768 	.word	0x20000768
 8007b9c:	20000bf8 	.word	0x20000bf8
 8007ba0:	20000764 	.word	0x20000764
 8007ba4:	20000c4c 	.word	0x20000c4c

08007ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <vTaskInternalSetTimeOutState+0x24>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bb8:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <vTaskInternalSetTimeOutState+0x28>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000c50 	.word	0x20000c50
 8007bd0:	20000c3c 	.word	0x20000c3c

08007bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <xTaskCheckForTimeOut+0x28>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	b672      	cpsid	i
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	b662      	cpsie	i
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	e7fe      	b.n	8007bfa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <xTaskCheckForTimeOut+0x46>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e7fe      	b.n	8007c18 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8007c1a:	f000 ff6d 	bl	8008af8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <xTaskCheckForTimeOut+0xc0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c36:	d102      	bne.n	8007c3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e023      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <xTaskCheckForTimeOut+0xc4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d007      	beq.n	8007c5a <xTaskCheckForTimeOut+0x86>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d302      	bcc.n	8007c5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	e015      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d20b      	bcs.n	8007c7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad2      	subs	r2, r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff99 	bl	8007ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e004      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c86:	f000 ff69 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20000c3c 	.word	0x20000c3c
 8007c98:	20000c50 	.word	0x20000c50

08007c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ca0:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <vTaskMissedYield+0x14>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20000c4c 	.word	0x20000c4c

08007cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cbc:	f000 f852 	bl	8007d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <prvIdleTask+0x28>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d9f9      	bls.n	8007cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <prvIdleTask+0x2c>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cd8:	e7f0      	b.n	8007cbc <prvIdleTask+0x8>
 8007cda:	bf00      	nop
 8007cdc:	20000768 	.word	0x20000768
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	e00c      	b.n	8007d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a12      	ldr	r2, [pc, #72]	; (8007d44 <prvInitialiseTaskLists+0x60>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe f8d4 	bl	8005eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3301      	adds	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b37      	cmp	r3, #55	; 0x37
 8007d0e:	d9ef      	bls.n	8007cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d10:	480d      	ldr	r0, [pc, #52]	; (8007d48 <prvInitialiseTaskLists+0x64>)
 8007d12:	f7fe f8cb 	bl	8005eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d16:	480d      	ldr	r0, [pc, #52]	; (8007d4c <prvInitialiseTaskLists+0x68>)
 8007d18:	f7fe f8c8 	bl	8005eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d1c:	480c      	ldr	r0, [pc, #48]	; (8007d50 <prvInitialiseTaskLists+0x6c>)
 8007d1e:	f7fe f8c5 	bl	8005eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d22:	480c      	ldr	r0, [pc, #48]	; (8007d54 <prvInitialiseTaskLists+0x70>)
 8007d24:	f7fe f8c2 	bl	8005eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d28:	480b      	ldr	r0, [pc, #44]	; (8007d58 <prvInitialiseTaskLists+0x74>)
 8007d2a:	f7fe f8bf 	bl	8005eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <prvInitialiseTaskLists+0x78>)
 8007d30:	4a05      	ldr	r2, [pc, #20]	; (8007d48 <prvInitialiseTaskLists+0x64>)
 8007d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <prvInitialiseTaskLists+0x7c>)
 8007d36:	4a05      	ldr	r2, [pc, #20]	; (8007d4c <prvInitialiseTaskLists+0x68>)
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000768 	.word	0x20000768
 8007d48:	20000bc8 	.word	0x20000bc8
 8007d4c:	20000bdc 	.word	0x20000bdc
 8007d50:	20000bf8 	.word	0x20000bf8
 8007d54:	20000c0c 	.word	0x20000c0c
 8007d58:	20000c24 	.word	0x20000c24
 8007d5c:	20000bf0 	.word	0x20000bf0
 8007d60:	20000bf4 	.word	0x20000bf4

08007d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d6a:	e019      	b.n	8007da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d6c:	f000 fec4 	bl	8008af8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <prvCheckTasksWaitingTermination+0x4c>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe f91f 	bl	8005fc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <prvCheckTasksWaitingTermination+0x50>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <prvCheckTasksWaitingTermination+0x50>)
 8007d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvCheckTasksWaitingTermination+0x54>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <prvCheckTasksWaitingTermination+0x54>)
 8007d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d96:	f000 fee1 	bl	8008b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f80e 	bl	8007dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <prvCheckTasksWaitingTermination+0x54>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e1      	bne.n	8007d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000c0c 	.word	0x20000c0c
 8007db4:	20000c38 	.word	0x20000c38
 8007db8:	20000c20 	.word	0x20000c20

08007dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d108      	bne.n	8007de0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 f87a 	bl	8008ecc <vPortFree>
				vPortFree( pxTCB );
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 f877 	bl	8008ecc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dde:	e019      	b.n	8007e14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d103      	bne.n	8007df2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f86e 	bl	8008ecc <vPortFree>
	}
 8007df0:	e010      	b.n	8007e14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d00b      	beq.n	8007e14 <prvDeleteTCB+0x58>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e7fe      	b.n	8007e12 <prvDeleteTCB+0x56>
	}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <prvResetNextTaskUnblockTime+0x38>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <prvResetNextTaskUnblockTime+0x3c>)
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e34:	e008      	b.n	8007e48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e36:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <prvResetNextTaskUnblockTime+0x38>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4a04      	ldr	r2, [pc, #16]	; (8007e58 <prvResetNextTaskUnblockTime+0x3c>)
 8007e46:	6013      	str	r3, [r2, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	20000bf0 	.word	0x20000bf0
 8007e58:	20000c58 	.word	0x20000c58

08007e5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <xTaskGetCurrentTaskHandle+0x1c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e68:	687b      	ldr	r3, [r7, #4]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000764 	.word	0x20000764

08007e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <xTaskGetSchedulerState+0x34>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	607b      	str	r3, [r7, #4]
 8007e8e:	e008      	b.n	8007ea2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <xTaskGetSchedulerState+0x38>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	e001      	b.n	8007ea2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ea2:	687b      	ldr	r3, [r7, #4]
	}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	20000c44 	.word	0x20000c44
 8007eb4:	20000c60 	.word	0x20000c60

08007eb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d051      	beq.n	8007f72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <xTaskPriorityInherit+0xc4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d241      	bcs.n	8007f60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	db06      	blt.n	8007ef2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <xTaskPriorityInherit+0xc4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6959      	ldr	r1, [r3, #20]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <xTaskPriorityInherit+0xc8>)
 8007f04:	4413      	add	r3, r2
 8007f06:	4299      	cmp	r1, r3
 8007f08:	d122      	bne.n	8007f50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe f856 	bl	8005fc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <xTaskPriorityInherit+0xc4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <xTaskPriorityInherit+0xcc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d903      	bls.n	8007f32 <xTaskPriorityInherit+0x7a>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <xTaskPriorityInherit+0xcc>)
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4a10      	ldr	r2, [pc, #64]	; (8007f80 <xTaskPriorityInherit+0xc8>)
 8007f40:	441a      	add	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f7fd ffdc 	bl	8005f06 <vListInsertEnd>
 8007f4e:	e004      	b.n	8007f5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <xTaskPriorityInherit+0xc4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	e008      	b.n	8007f72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <xTaskPriorityInherit+0xc4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d201      	bcs.n	8007f72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f72:	68fb      	ldr	r3, [r7, #12]
	}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20000764 	.word	0x20000764
 8007f80:	20000768 	.word	0x20000768
 8007f84:	20000c40 	.word	0x20000c40

08007f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d058      	beq.n	8008050 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f9e:	4b2f      	ldr	r3, [pc, #188]	; (800805c <xTaskPriorityDisinherit+0xd4>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d00b      	beq.n	8007fc0 <xTaskPriorityDisinherit+0x38>
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	b672      	cpsid	i
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	b662      	cpsie	i
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e7fe      	b.n	8007fbe <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10b      	bne.n	8007fe0 <xTaskPriorityDisinherit+0x58>
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	b672      	cpsid	i
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	b662      	cpsie	i
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	e7fe      	b.n	8007fde <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe4:	1e5a      	subs	r2, r3, #1
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d02c      	beq.n	8008050 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d128      	bne.n	8008050 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3304      	adds	r3, #4
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd ffdc 	bl	8005fc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <xTaskPriorityDisinherit+0xd8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d903      	bls.n	8008030 <xTaskPriorityDisinherit+0xa8>
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <xTaskPriorityDisinherit+0xd8>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4a09      	ldr	r2, [pc, #36]	; (8008064 <xTaskPriorityDisinherit+0xdc>)
 800803e:	441a      	add	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fd ff5d 	bl	8005f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800804c:	2301      	movs	r3, #1
 800804e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
	}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000764 	.word	0x20000764
 8008060:	20000c40 	.word	0x20000c40
 8008064:	20000768 	.word	0x20000768

08008068 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008076:	2301      	movs	r3, #1
 8008078:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d06c      	beq.n	800815a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	b672      	cpsid	i
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	b662      	cpsie	i
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e7fe      	b.n	800809e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d902      	bls.n	80080b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	e002      	b.n	80080b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d04c      	beq.n	800815a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d147      	bne.n	800815a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80080ca:	4b26      	ldr	r3, [pc, #152]	; (8008164 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d10b      	bne.n	80080ec <vTaskPriorityDisinheritAfterTimeout+0x84>
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	b672      	cpsid	i
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	b662      	cpsie	i
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	e7fe      	b.n	80080ea <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db04      	blt.n	800810a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	6959      	ldr	r1, [r3, #20]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800811a:	4413      	add	r3, r2
 800811c:	4299      	cmp	r1, r3
 800811e:	d11c      	bne.n	800815a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	3304      	adds	r3, #4
 8008124:	4618      	mov	r0, r3
 8008126:	f7fd ff4b 	bl	8005fc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d903      	bls.n	800813e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a0c      	ldr	r2, [pc, #48]	; (800816c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4a07      	ldr	r2, [pc, #28]	; (8008168 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800814c:	441a      	add	r2, r3
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fd fed6 	bl	8005f06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800815a:	bf00      	nop
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000764 	.word	0x20000764
 8008168:	20000768 	.word	0x20000768
 800816c:	20000c40 	.word	0x20000c40

08008170 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <pvTaskIncrementMutexHeldCount+0x24>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800817c:	4b05      	ldr	r3, [pc, #20]	; (8008194 <pvTaskIncrementMutexHeldCount+0x24>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008182:	3201      	adds	r2, #1
 8008184:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008186:	4b03      	ldr	r3, [pc, #12]	; (8008194 <pvTaskIncrementMutexHeldCount+0x24>)
 8008188:	681b      	ldr	r3, [r3, #0]
	}
 800818a:	4618      	mov	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	20000764 	.word	0x20000764

08008198 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081a2:	4b21      	ldr	r3, [pc, #132]	; (8008228 <prvAddCurrentTaskToDelayedList+0x90>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a8:	4b20      	ldr	r3, [pc, #128]	; (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fd ff06 	bl	8005fc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ba:	d10a      	bne.n	80081d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c2:	4b1a      	ldr	r3, [pc, #104]	; (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	4819      	ldr	r0, [pc, #100]	; (8008230 <prvAddCurrentTaskToDelayedList+0x98>)
 80081cc:	f7fd fe9b 	bl	8005f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d0:	e026      	b.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081da:	4b14      	ldr	r3, [pc, #80]	; (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d209      	bcs.n	80081fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7fd fea9 	bl	8005f4e <vListInsert>
}
 80081fc:	e010      	b.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7fd fe9f 	bl	8005f4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d202      	bcs.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800821a:	4a08      	ldr	r2, [pc, #32]	; (800823c <prvAddCurrentTaskToDelayedList+0xa4>)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	6013      	str	r3, [r2, #0]
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000c3c 	.word	0x20000c3c
 800822c:	20000764 	.word	0x20000764
 8008230:	20000c24 	.word	0x20000c24
 8008234:	20000bf4 	.word	0x20000bf4
 8008238:	20000bf0 	.word	0x20000bf0
 800823c:	20000c58 	.word	0x20000c58

08008240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800824a:	f000 fb0d 	bl	8008868 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800824e:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <xTimerCreateTimerTask+0x84>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d021      	beq.n	800829a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800825e:	1d3a      	adds	r2, r7, #4
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	f107 030c 	add.w	r3, r7, #12
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd fe05 	bl	8005e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	9202      	str	r2, [sp, #8]
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	2302      	movs	r3, #2
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	2300      	movs	r3, #0
 800827e:	460a      	mov	r2, r1
 8008280:	4911      	ldr	r1, [pc, #68]	; (80082c8 <xTimerCreateTimerTask+0x88>)
 8008282:	4812      	ldr	r0, [pc, #72]	; (80082cc <xTimerCreateTimerTask+0x8c>)
 8008284:	f7fe ffb0 	bl	80071e8 <xTaskCreateStatic>
 8008288:	4602      	mov	r2, r0
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <xTimerCreateTimerTask+0x90>)
 800828c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <xTimerCreateTimerTask+0x90>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <xTimerCreateTimerTask+0x78>
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	e7fe      	b.n	80082b6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80082b8:	697b      	ldr	r3, [r7, #20]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000c94 	.word	0x20000c94
 80082c8:	080162b4 	.word	0x080162b4
 80082cc:	0800840d 	.word	0x0800840d
 80082d0:	20000c98 	.word	0x20000c98

080082d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <xTimerGenericCommand+0x30>
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	b672      	cpsid	i
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	b662      	cpsie	i
 8008300:	623b      	str	r3, [r7, #32]
 8008302:	e7fe      	b.n	8008302 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008304:	4b19      	ldr	r3, [pc, #100]	; (800836c <xTimerGenericCommand+0x98>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02a      	beq.n	8008362 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b05      	cmp	r3, #5
 800831c:	dc18      	bgt.n	8008350 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800831e:	f7ff fdad 	bl	8007e7c <xTaskGetSchedulerState>
 8008322:	4603      	mov	r3, r0
 8008324:	2b02      	cmp	r3, #2
 8008326:	d109      	bne.n	800833c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008328:	4b10      	ldr	r3, [pc, #64]	; (800836c <xTimerGenericCommand+0x98>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	f107 0110 	add.w	r1, r7, #16
 8008330:	2300      	movs	r3, #0
 8008332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008334:	f7fe f8e0 	bl	80064f8 <xQueueGenericSend>
 8008338:	6278      	str	r0, [r7, #36]	; 0x24
 800833a:	e012      	b.n	8008362 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <xTimerGenericCommand+0x98>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	f107 0110 	add.w	r1, r7, #16
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	f7fe f8d6 	bl	80064f8 <xQueueGenericSend>
 800834c:	6278      	str	r0, [r7, #36]	; 0x24
 800834e:	e008      	b.n	8008362 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <xTimerGenericCommand+0x98>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	f107 0110 	add.w	r1, r7, #16
 8008358:	2300      	movs	r3, #0
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	f7fe f9ce 	bl	80066fc <xQueueGenericSendFromISR>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000c94 	.word	0x20000c94

08008370 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <prvProcessExpiredTimer+0x98>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fe19 	bl	8005fc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d023      	beq.n	80083e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	18d1      	adds	r1, r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	6978      	ldr	r0, [r7, #20]
 80083aa:	f000 f8d3 	bl	8008554 <prvInsertTimerInActiveList>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2300      	movs	r3, #0
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	2100      	movs	r1, #0
 80083be:	6978      	ldr	r0, [r7, #20]
 80083c0:	f7ff ff88 	bl	80082d4 <xTimerGenericCommand>
 80083c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d114      	bne.n	80083f6 <prvProcessExpiredTimer+0x86>
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e7fe      	b.n	80083e2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	6978      	ldr	r0, [r7, #20]
 80083fc:	4798      	blx	r3
}
 80083fe:	bf00      	nop
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000c8c 	.word	0x20000c8c

0800840c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008414:	f107 0308 	add.w	r3, r7, #8
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f857 	bl	80084cc <prvGetNextExpireTime>
 800841e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4619      	mov	r1, r3
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f803 	bl	8008430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800842a:	f000 f8d5 	bl	80085d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800842e:	e7f1      	b.n	8008414 <prvTimerTask+0x8>

08008430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800843a:	f7ff f919 	bl	8007670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f866 	bl	8008514 <prvSampleTimeNow>
 8008448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d130      	bne.n	80084b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <prvProcessTimerOrBlockTask+0x3c>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	429a      	cmp	r2, r3
 800845c:	d806      	bhi.n	800846c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800845e:	f7ff f915 	bl	800768c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ff83 	bl	8008370 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800846a:	e024      	b.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008472:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <prvProcessTimerOrBlockTask+0x90>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <prvProcessTimerOrBlockTask+0x50>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <prvProcessTimerOrBlockTask+0x52>
 8008480:	2300      	movs	r3, #0
 8008482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <prvProcessTimerOrBlockTask+0x94>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4619      	mov	r1, r3
 8008492:	f7fe fe75 	bl	8007180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008496:	f7ff f8f9 	bl	800768c <xTaskResumeAll>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <prvProcessTimerOrBlockTask+0x98>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
}
 80084b0:	e001      	b.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084b2:	f7ff f8eb 	bl	800768c <xTaskResumeAll>
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20000c90 	.word	0x20000c90
 80084c4:	20000c94 	.word	0x20000c94
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <prvGetNextExpireTime+0x44>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <prvGetNextExpireTime+0x16>
 80084de:	2201      	movs	r2, #1
 80084e0:	e000      	b.n	80084e4 <prvGetNextExpireTime+0x18>
 80084e2:	2200      	movs	r2, #0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <prvGetNextExpireTime+0x44>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e001      	b.n	8008500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000c8c 	.word	0x20000c8c

08008514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800851c:	f7ff f954 	bl	80077c8 <xTaskGetTickCount>
 8008520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <prvSampleTimeNow+0x3c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d205      	bcs.n	8008538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800852c:	f000 f936 	bl	800879c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e002      	b.n	800853e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800853e:	4a04      	ldr	r2, [pc, #16]	; (8008550 <prvSampleTimeNow+0x3c>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000c9c 	.word	0x20000c9c

08008554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d812      	bhi.n	80085a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008588:	2301      	movs	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e01b      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800858e:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <prvInsertTimerInActiveList+0x7c>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3304      	adds	r3, #4
 8008596:	4619      	mov	r1, r3
 8008598:	4610      	mov	r0, r2
 800859a:	f7fd fcd8 	bl	8005f4e <vListInsert>
 800859e:	e012      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d206      	bcs.n	80085b6 <prvInsertTimerInActiveList+0x62>
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d302      	bcc.n	80085b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e007      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <prvInsertTimerInActiveList+0x80>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fd fcc4 	bl	8005f4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085c6:	697b      	ldr	r3, [r7, #20]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000c90 	.word	0x20000c90
 80085d4:	20000c8c 	.word	0x20000c8c

080085d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	; 0x38
 80085dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085de:	e0cc      	b.n	800877a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da19      	bge.n	800861a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085e6:	1d3b      	adds	r3, r7, #4
 80085e8:	3304      	adds	r3, #4
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <prvProcessReceivedCommands+0x32>
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	b672      	cpsid	i
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	b662      	cpsie	i
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e7fe      	b.n	8008608 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008610:	6850      	ldr	r0, [r2, #4]
 8008612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008614:	6892      	ldr	r2, [r2, #8]
 8008616:	4611      	mov	r1, r2
 8008618:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f2c0 80ab 	blt.w	8008778 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	3304      	adds	r3, #4
 8008632:	4618      	mov	r0, r3
 8008634:	f7fd fcc4 	bl	8005fc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008638:	463b      	mov	r3, r7
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff ff6a 	bl	8008514 <prvSampleTimeNow>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b09      	cmp	r3, #9
 8008646:	f200 8098 	bhi.w	800877a <prvProcessReceivedCommands+0x1a2>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <prvProcessReceivedCommands+0x78>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008679 	.word	0x08008679
 8008654:	08008679 	.word	0x08008679
 8008658:	08008679 	.word	0x08008679
 800865c:	080086ef 	.word	0x080086ef
 8008660:	08008703 	.word	0x08008703
 8008664:	0800874f 	.word	0x0800874f
 8008668:	08008679 	.word	0x08008679
 800866c:	08008679 	.word	0x08008679
 8008670:	080086ef 	.word	0x080086ef
 8008674:	08008703 	.word	0x08008703
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800867e:	f043 0301 	orr.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	18d1      	adds	r1, r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008698:	f7ff ff5c 	bl	8008554 <prvInsertTimerInActiveList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d06b      	beq.n	800877a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d060      	beq.n	800877a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	441a      	add	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ca:	f7ff fe03 	bl	80082d4 <xTimerGenericCommand>
 80086ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d151      	bne.n	800877a <prvProcessReceivedCommands+0x1a2>
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	b672      	cpsid	i
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	b662      	cpsie	i
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	e7fe      	b.n	80086ec <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008700:	e03b      	b.n	800877a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <prvProcessReceivedCommands+0x162>
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e7fe      	b.n	8008738 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	18d1      	adds	r1, r2, r3
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008748:	f7ff ff04 	bl	8008554 <prvInsertTimerInActiveList>
					break;
 800874c:	e015      	b.n	800877a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875e:	f000 fbb5 	bl	8008ecc <vPortFree>
 8008762:	e00a      	b.n	800877a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008776:	e000      	b.n	800877a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008778:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800877a:	4b07      	ldr	r3, [pc, #28]	; (8008798 <prvProcessReceivedCommands+0x1c0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1d39      	adds	r1, r7, #4
 8008780:	2200      	movs	r2, #0
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe f8e8 	bl	8006958 <xQueueReceive>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f47f af28 	bne.w	80085e0 <prvProcessReceivedCommands+0x8>
	}
}
 8008790:	bf00      	nop
 8008792:	3730      	adds	r7, #48	; 0x30
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000c94 	.word	0x20000c94

0800879c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087a2:	e049      	b.n	8008838 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087a4:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <prvSwitchTimerLists+0xc4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <prvSwitchTimerLists+0xc4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fd fbff 	bl	8005fc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d02f      	beq.n	8008838 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d90e      	bls.n	8008808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <prvSwitchTimerLists+0xc4>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fd fba4 	bl	8005f4e <vListInsert>
 8008806:	e017      	b.n	8008838 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008808:	2300      	movs	r3, #0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2300      	movs	r3, #0
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	2100      	movs	r1, #0
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7ff fd5e 	bl	80082d4 <xTimerGenericCommand>
 8008818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <prvSwitchTimerLists+0x9c>
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	b672      	cpsid	i
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	b662      	cpsie	i
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	e7fe      	b.n	8008836 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <prvSwitchTimerLists+0xc4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1b0      	bne.n	80087a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <prvSwitchTimerLists+0xc4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <prvSwitchTimerLists+0xc8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a04      	ldr	r2, [pc, #16]	; (8008860 <prvSwitchTimerLists+0xc4>)
 800884e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008850:	4a04      	ldr	r2, [pc, #16]	; (8008864 <prvSwitchTimerLists+0xc8>)
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	6013      	str	r3, [r2, #0]
}
 8008856:	bf00      	nop
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000c8c 	.word	0x20000c8c
 8008864:	20000c90 	.word	0x20000c90

08008868 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800886e:	f000 f943 	bl	8008af8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <prvCheckForValidListAndQueue+0x60>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d120      	bne.n	80088bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800887a:	4814      	ldr	r0, [pc, #80]	; (80088cc <prvCheckForValidListAndQueue+0x64>)
 800887c:	f7fd fb16 	bl	8005eac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008880:	4813      	ldr	r0, [pc, #76]	; (80088d0 <prvCheckForValidListAndQueue+0x68>)
 8008882:	f7fd fb13 	bl	8005eac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <prvCheckForValidListAndQueue+0x6c>)
 8008888:	4a10      	ldr	r2, [pc, #64]	; (80088cc <prvCheckForValidListAndQueue+0x64>)
 800888a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <prvCheckForValidListAndQueue+0x70>)
 800888e:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <prvCheckForValidListAndQueue+0x68>)
 8008890:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <prvCheckForValidListAndQueue+0x74>)
 8008898:	4a11      	ldr	r2, [pc, #68]	; (80088e0 <prvCheckForValidListAndQueue+0x78>)
 800889a:	2110      	movs	r1, #16
 800889c:	200a      	movs	r0, #10
 800889e:	f7fd fc23 	bl	80060e8 <xQueueGenericCreateStatic>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <prvCheckForValidListAndQueue+0x60>)
 80088a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <prvCheckForValidListAndQueue+0x60>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <prvCheckForValidListAndQueue+0x60>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	490b      	ldr	r1, [pc, #44]	; (80088e4 <prvCheckForValidListAndQueue+0x7c>)
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc10 	bl	80070dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088bc:	f000 f94e 	bl	8008b5c <vPortExitCritical>
}
 80088c0:	bf00      	nop
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000c94 	.word	0x20000c94
 80088cc:	20000c64 	.word	0x20000c64
 80088d0:	20000c78 	.word	0x20000c78
 80088d4:	20000c8c 	.word	0x20000c8c
 80088d8:	20000c90 	.word	0x20000c90
 80088dc:	20000d40 	.word	0x20000d40
 80088e0:	20000ca0 	.word	0x20000ca0
 80088e4:	080162bc 	.word	0x080162bc

080088e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3b04      	subs	r3, #4
 80088f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3b04      	subs	r3, #4
 8008906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f023 0201 	bic.w	r2, r3, #1
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3b04      	subs	r3, #4
 8008916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008918:	4a0c      	ldr	r2, [pc, #48]	; (800894c <pxPortInitialiseStack+0x64>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3b14      	subs	r3, #20
 8008922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b04      	subs	r3, #4
 800892e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f06f 0202 	mvn.w	r2, #2
 8008936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3b20      	subs	r3, #32
 800893c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	08008951 	.word	0x08008951

08008950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800895a:	4b13      	ldr	r3, [pc, #76]	; (80089a8 <prvTaskExitError+0x58>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008962:	d00b      	beq.n	800897c <prvTaskExitError+0x2c>
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	b672      	cpsid	i
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	b662      	cpsie	i
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e7fe      	b.n	800897a <prvTaskExitError+0x2a>
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	b672      	cpsid	i
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	b662      	cpsie	i
 8008990:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008992:	bf00      	nop
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0fc      	beq.n	8008994 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	00000000 	.word	0x00000000

080089b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089b0:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <pxCurrentTCBConst2>)
 80089b2:	6819      	ldr	r1, [r3, #0]
 80089b4:	6808      	ldr	r0, [r1, #0]
 80089b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	f380 8809 	msr	PSP, r0
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f04f 0000 	mov.w	r0, #0
 80089c6:	f380 8811 	msr	BASEPRI, r0
 80089ca:	4770      	bx	lr
 80089cc:	f3af 8000 	nop.w

080089d0 <pxCurrentTCBConst2>:
 80089d0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop

080089d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089d8:	4808      	ldr	r0, [pc, #32]	; (80089fc <prvPortStartFirstTask+0x24>)
 80089da:	6800      	ldr	r0, [r0, #0]
 80089dc:	6800      	ldr	r0, [r0, #0]
 80089de:	f380 8808 	msr	MSP, r0
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8814 	msr	CONTROL, r0
 80089ea:	b662      	cpsie	i
 80089ec:	b661      	cpsie	f
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	df00      	svc	0
 80089f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089fa:	bf00      	nop
 80089fc:	e000ed08 	.word	0xe000ed08

08008a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a06:	4b36      	ldr	r3, [pc, #216]	; (8008ae0 <xPortStartScheduler+0xe0>)
 8008a08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ae4 <xPortStartScheduler+0xe4>)
 8008a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a30:	2207      	movs	r2, #7
 8008a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a34:	e009      	b.n	8008a4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a36:	4b2c      	ldr	r3, [pc, #176]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a2a      	ldr	r2, [pc, #168]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a52:	2b80      	cmp	r3, #128	; 0x80
 8008a54:	d0ef      	beq.n	8008a36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a56:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1c3 0307 	rsb	r3, r3, #7
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d00b      	beq.n	8008a7a <xPortStartScheduler+0x7a>
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	b672      	cpsid	i
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	b662      	cpsie	i
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	e7fe      	b.n	8008a78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a84:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a8c:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <xPortStartScheduler+0xe8>)
 8008a8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a98:	4b14      	ldr	r3, [pc, #80]	; (8008aec <xPortStartScheduler+0xec>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a13      	ldr	r2, [pc, #76]	; (8008aec <xPortStartScheduler+0xec>)
 8008a9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aa2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <xPortStartScheduler+0xec>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <xPortStartScheduler+0xec>)
 8008aaa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008aae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ab0:	f000 f8d4 	bl	8008c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	; (8008af0 <xPortStartScheduler+0xf0>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008aba:	f000 f8f3 	bl	8008ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008abe:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <xPortStartScheduler+0xf4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <xPortStartScheduler+0xf4>)
 8008ac4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ac8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aca:	f7ff ff85 	bl	80089d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ace:	f7fe ff57 	bl	8007980 <vTaskSwitchContext>
	prvTaskExitError();
 8008ad2:	f7ff ff3d 	bl	8008950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	e000e400 	.word	0xe000e400
 8008ae4:	20000d90 	.word	0x20000d90
 8008ae8:	20000d94 	.word	0x20000d94
 8008aec:	e000ed20 	.word	0xe000ed20
 8008af0:	2000000c 	.word	0x2000000c
 8008af4:	e000ef34 	.word	0xe000ef34

08008af8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	b672      	cpsid	i
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	b662      	cpsie	i
 8008b12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <vPortEnterCritical+0x5c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a0e      	ldr	r2, [pc, #56]	; (8008b54 <vPortEnterCritical+0x5c>)
 8008b1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b1e:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <vPortEnterCritical+0x5c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d110      	bne.n	8008b48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b26:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <vPortEnterCritical+0x60>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <vPortEnterCritical+0x50>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	b672      	cpsid	i
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	b662      	cpsie	i
 8008b44:	603b      	str	r3, [r7, #0]
 8008b46:	e7fe      	b.n	8008b46 <vPortEnterCritical+0x4e>
	}
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	2000000c 	.word	0x2000000c
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <vPortExitCritical+0x26>
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	b672      	cpsid	i
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	b662      	cpsie	i
 8008b7e:	607b      	str	r3, [r7, #4]
 8008b80:	e7fe      	b.n	8008b80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <vPortExitCritical+0x50>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <vPortExitCritical+0x50>)
 8008b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b8c:	4b07      	ldr	r3, [pc, #28]	; (8008bac <vPortExitCritical+0x50>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <vPortExitCritical+0x42>
 8008b94:	2300      	movs	r3, #0
 8008b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	2000000c 	.word	0x2000000c

08008bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f01e 0f10 	tst.w	lr, #16
 8008bc0:	bf08      	it	eq
 8008bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	f7fe fecc 	bl	8007980 <vTaskSwitchContext>
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	f380 8811 	msr	BASEPRI, r0
 8008bf0:	bc09      	pop	{r0, r3}
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	6808      	ldr	r0, [r1, #0]
 8008bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	f01e 0f10 	tst.w	lr, #16
 8008bfe:	bf08      	it	eq
 8008c00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c04:	f380 8809 	msr	PSP, r0
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop

08008c10 <pxCurrentTCBConst>:
 8008c10:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	b672      	cpsid	i
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	b662      	cpsie	i
 8008c32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c34:	f7fe fdea 	bl	800780c <xTaskIncrementTick>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <SysTick_Handler+0x40>)
 8008c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	; (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <vPortSetupTimerInterrupt+0x44>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7e:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010
 8008c94:	e000e018 	.word	0xe000e018
 8008c98:	20000000 	.word	0x20000000
 8008c9c:	10624dd3 	.word	0x10624dd3
 8008ca0:	e000e014 	.word	0xe000e014

08008ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cb4 <vPortEnableVFP+0x10>
 8008ca8:	6801      	ldr	r1, [r0, #0]
 8008caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cae:	6001      	str	r1, [r0, #0]
 8008cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cb2:	bf00      	nop
 8008cb4:	e000ed88 	.word	0xe000ed88

08008cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cbe:	f3ef 8305 	mrs	r3, IPSR
 8008cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d915      	bls.n	8008cf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cca:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <vPortValidateInterruptPriority+0x74>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cd4:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <vPortValidateInterruptPriority+0x78>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	7afa      	ldrb	r2, [r7, #11]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d20b      	bcs.n	8008cf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	b672      	cpsid	i
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	b662      	cpsie	i
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	e7fe      	b.n	8008cf4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <vPortValidateInterruptPriority+0x7c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <vPortValidateInterruptPriority+0x80>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d90b      	bls.n	8008d1e <vPortValidateInterruptPriority+0x66>
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	b672      	cpsid	i
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	b662      	cpsie	i
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	e7fe      	b.n	8008d1c <vPortValidateInterruptPriority+0x64>
	}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	e000e3f0 	.word	0xe000e3f0
 8008d30:	20000d90 	.word	0x20000d90
 8008d34:	e000ed0c 	.word	0xe000ed0c
 8008d38:	20000d94 	.word	0x20000d94

08008d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d48:	f7fe fc92 	bl	8007670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d4c:	4b5a      	ldr	r3, [pc, #360]	; (8008eb8 <pvPortMalloc+0x17c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d54:	f000 f916 	bl	8008f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d58:	4b58      	ldr	r3, [pc, #352]	; (8008ebc <pvPortMalloc+0x180>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 8090 	bne.w	8008e86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01e      	beq.n	8008daa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d015      	beq.n	8008daa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	3308      	adds	r3, #8
 8008d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <pvPortMalloc+0x6e>
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	e7fe      	b.n	8008da8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06a      	beq.n	8008e86 <pvPortMalloc+0x14a>
 8008db0:	4b43      	ldr	r3, [pc, #268]	; (8008ec0 <pvPortMalloc+0x184>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d865      	bhi.n	8008e86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dba:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <pvPortMalloc+0x188>)
 8008dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dbe:	4b41      	ldr	r3, [pc, #260]	; (8008ec4 <pvPortMalloc+0x188>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc4:	e004      	b.n	8008dd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <pvPortMalloc+0xa6>
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f1      	bne.n	8008dc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008de2:	4b35      	ldr	r3, [pc, #212]	; (8008eb8 <pvPortMalloc+0x17c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d04c      	beq.n	8008e86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2208      	movs	r2, #8
 8008df2:	4413      	add	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	2308      	movs	r3, #8
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d920      	bls.n	8008e50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <pvPortMalloc+0xfc>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	b672      	cpsid	i
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	b662      	cpsie	i
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	e7fe      	b.n	8008e36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e4a:	69b8      	ldr	r0, [r7, #24]
 8008e4c:	f000 f8fc 	bl	8009048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <pvPortMalloc+0x184>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <pvPortMalloc+0x184>)
 8008e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e5e:	4b18      	ldr	r3, [pc, #96]	; (8008ec0 <pvPortMalloc+0x184>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <pvPortMalloc+0x18c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d203      	bcs.n	8008e72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e6a:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <pvPortMalloc+0x184>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <pvPortMalloc+0x18c>)
 8008e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <pvPortMalloc+0x180>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e86:	f7fe fc01 	bl	800768c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <pvPortMalloc+0x170>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	b672      	cpsid	i
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	b662      	cpsie	i
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e7fe      	b.n	8008eaa <pvPortMalloc+0x16e>
	return pvReturn;
 8008eac:	69fb      	ldr	r3, [r7, #28]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3728      	adds	r7, #40	; 0x28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200049a0 	.word	0x200049a0
 8008ebc:	200049ac 	.word	0x200049ac
 8008ec0:	200049a4 	.word	0x200049a4
 8008ec4:	20004998 	.word	0x20004998
 8008ec8:	200049a8 	.word	0x200049a8

08008ecc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d04a      	beq.n	8008f74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ede:	2308      	movs	r3, #8
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <vPortFree+0xb0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <vPortFree+0x46>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	b672      	cpsid	i
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	b662      	cpsie	i
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e7fe      	b.n	8008f10 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <vPortFree+0x66>
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	b672      	cpsid	i
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	b662      	cpsie	i
 8008f2e:	60bb      	str	r3, [r7, #8]
 8008f30:	e7fe      	b.n	8008f30 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <vPortFree+0xb0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d019      	beq.n	8008f74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d115      	bne.n	8008f74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <vPortFree+0xb0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	401a      	ands	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f58:	f7fe fb8a 	bl	8007670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <vPortFree+0xb4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <vPortFree+0xb4>)
 8008f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f000 f86c 	bl	8009048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f70:	f7fe fb8c 	bl	800768c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f74:	bf00      	nop
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200049ac 	.word	0x200049ac
 8008f80:	200049a4 	.word	0x200049a4

08008f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f90:	4b27      	ldr	r3, [pc, #156]	; (8009030 <prvHeapInit+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3307      	adds	r3, #7
 8008fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0307 	bic.w	r3, r3, #7
 8008faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <prvHeapInit+0xac>)
 8008fb4:	4413      	add	r3, r2
 8008fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fbc:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <prvHeapInit+0xb0>)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <prvHeapInit+0xb0>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4a15      	ldr	r2, [pc, #84]	; (8009038 <prvHeapInit+0xb4>)
 8008fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fe6:	4b14      	ldr	r3, [pc, #80]	; (8009038 <prvHeapInit+0xb4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <prvHeapInit+0xb4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvHeapInit+0xb4>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4a0a      	ldr	r2, [pc, #40]	; (800903c <prvHeapInit+0xb8>)
 8009012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <prvHeapInit+0xbc>)
 800901a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800901c:	4b09      	ldr	r3, [pc, #36]	; (8009044 <prvHeapInit+0xc0>)
 800901e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009022:	601a      	str	r2, [r3, #0]
}
 8009024:	bf00      	nop
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20000d98 	.word	0x20000d98
 8009034:	20004998 	.word	0x20004998
 8009038:	200049a0 	.word	0x200049a0
 800903c:	200049a8 	.word	0x200049a8
 8009040:	200049a4 	.word	0x200049a4
 8009044:	200049ac 	.word	0x200049ac

08009048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009050:	4b28      	ldr	r3, [pc, #160]	; (80090f4 <prvInsertBlockIntoFreeList+0xac>)
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e002      	b.n	800905c <prvInsertBlockIntoFreeList+0x14>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d8f7      	bhi.n	8009056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d108      	bne.n	800908a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d118      	bne.n	80090d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d00d      	beq.n	80090c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e008      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <prvInsertBlockIntoFreeList+0xb0>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e003      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d002      	beq.n	80090e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20004998 	.word	0x20004998
 80090f8:	200049a0 	.word	0x200049a0

080090fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009106:	f007 fa13 	bl	8010530 <sys_timeouts_sleeptime>
 800910a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009112:	d10b      	bne.n	800912c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009114:	4813      	ldr	r0, [pc, #76]	; (8009164 <tcpip_timeouts_mbox_fetch+0x68>)
 8009116:	f00c f8d8 	bl	80152ca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800911a:	2200      	movs	r2, #0
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f00c f860 	bl	80151e4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009124:	480f      	ldr	r0, [pc, #60]	; (8009164 <tcpip_timeouts_mbox_fetch+0x68>)
 8009126:	f00c f8c1 	bl	80152ac <sys_mutex_lock>
    return;
 800912a:	e018      	b.n	800915e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009132:	f007 f9c3 	bl	80104bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009136:	e7e6      	b.n	8009106 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009138:	480a      	ldr	r0, [pc, #40]	; (8009164 <tcpip_timeouts_mbox_fetch+0x68>)
 800913a:	f00c f8c6 	bl	80152ca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f00c f84e 	bl	80151e4 <sys_arch_mbox_fetch>
 8009148:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800914a:	4806      	ldr	r0, [pc, #24]	; (8009164 <tcpip_timeouts_mbox_fetch+0x68>)
 800914c:	f00c f8ae 	bl	80152ac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009156:	d102      	bne.n	800915e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009158:	f007 f9b0 	bl	80104bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800915c:	e7d3      	b.n	8009106 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20008188 	.word	0x20008188

08009168 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009170:	4810      	ldr	r0, [pc, #64]	; (80091b4 <tcpip_thread+0x4c>)
 8009172:	f00c f89b 	bl	80152ac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <tcpip_thread+0x50>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800917e:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <tcpip_thread+0x50>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a0e      	ldr	r2, [pc, #56]	; (80091bc <tcpip_thread+0x54>)
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	4610      	mov	r0, r2
 8009188:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800918a:	f107 030c 	add.w	r3, r7, #12
 800918e:	4619      	mov	r1, r3
 8009190:	480b      	ldr	r0, [pc, #44]	; (80091c0 <tcpip_thread+0x58>)
 8009192:	f7ff ffb3 	bl	80090fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d106      	bne.n	80091aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800919c:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <tcpip_thread+0x5c>)
 800919e:	2291      	movs	r2, #145	; 0x91
 80091a0:	4909      	ldr	r1, [pc, #36]	; (80091c8 <tcpip_thread+0x60>)
 80091a2:	480a      	ldr	r0, [pc, #40]	; (80091cc <tcpip_thread+0x64>)
 80091a4:	f00c f922 	bl	80153ec <iprintf>
      continue;
 80091a8:	e003      	b.n	80091b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f80f 	bl	80091d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80091b2:	e7ea      	b.n	800918a <tcpip_thread+0x22>
 80091b4:	20008188 	.word	0x20008188
 80091b8:	200049b0 	.word	0x200049b0
 80091bc:	200049b4 	.word	0x200049b4
 80091c0:	200049b8 	.word	0x200049b8
 80091c4:	080162c4 	.word	0x080162c4
 80091c8:	080162f4 	.word	0x080162f4
 80091cc:	08016314 	.word	0x08016314

080091d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d018      	beq.n	8009212 <tcpip_thread_handle_msg+0x42>
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d021      	beq.n	8009228 <tcpip_thread_handle_msg+0x58>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d126      	bne.n	8009236 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6850      	ldr	r0, [r2, #4]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6892      	ldr	r2, [r2, #8]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fc4e 	bl	800aaa4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	2009      	movs	r0, #9
 800920c:	f000 fe1c 	bl	8009e48 <memp_free>
      break;
 8009210:	e018      	b.n	8009244 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6892      	ldr	r2, [r2, #8]
 800921a:	4610      	mov	r0, r2
 800921c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	2008      	movs	r0, #8
 8009222:	f000 fe11 	bl	8009e48 <memp_free>
      break;
 8009226:	e00d      	b.n	8009244 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6892      	ldr	r2, [r2, #8]
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
      break;
 8009234:	e006      	b.n	8009244 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <tcpip_thread_handle_msg+0x7c>)
 8009238:	22cf      	movs	r2, #207	; 0xcf
 800923a:	4905      	ldr	r1, [pc, #20]	; (8009250 <tcpip_thread_handle_msg+0x80>)
 800923c:	4805      	ldr	r0, [pc, #20]	; (8009254 <tcpip_thread_handle_msg+0x84>)
 800923e:	f00c f8d5 	bl	80153ec <iprintf>
      break;
 8009242:	bf00      	nop
  }
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	080162c4 	.word	0x080162c4
 8009250:	080162f4 	.word	0x080162f4
 8009254:	08016314 	.word	0x08016314

08009258 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009264:	481a      	ldr	r0, [pc, #104]	; (80092d0 <tcpip_inpkt+0x78>)
 8009266:	f00b ffee 	bl	8015246 <sys_mbox_valid>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <tcpip_inpkt+0x24>
 8009270:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <tcpip_inpkt+0x7c>)
 8009272:	22fc      	movs	r2, #252	; 0xfc
 8009274:	4918      	ldr	r1, [pc, #96]	; (80092d8 <tcpip_inpkt+0x80>)
 8009276:	4819      	ldr	r0, [pc, #100]	; (80092dc <tcpip_inpkt+0x84>)
 8009278:	f00c f8b8 	bl	80153ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800927c:	2009      	movs	r0, #9
 800927e:	f000 fd91 	bl	8009da4 <memp_malloc>
 8009282:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800928e:	e01a      	b.n	80092c6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2200      	movs	r2, #0
 8009294:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092a8:	6979      	ldr	r1, [r7, #20]
 80092aa:	4809      	ldr	r0, [pc, #36]	; (80092d0 <tcpip_inpkt+0x78>)
 80092ac:	f00b ff80 	bl	80151b0 <sys_mbox_trypost>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80092b6:	6979      	ldr	r1, [r7, #20]
 80092b8:	2009      	movs	r0, #9
 80092ba:	f000 fdc5 	bl	8009e48 <memp_free>
    return ERR_MEM;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c2:	e000      	b.n	80092c6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80092c4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200049b8 	.word	0x200049b8
 80092d4:	080162c4 	.word	0x080162c4
 80092d8:	0801633c 	.word	0x0801633c
 80092dc:	08016314 	.word	0x08016314

080092e0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092f0:	f003 0318 	and.w	r3, r3, #24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80092f8:	4a08      	ldr	r2, [pc, #32]	; (800931c <tcpip_input+0x3c>)
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff ffab 	bl	8009258 <tcpip_inpkt>
 8009302:	4603      	mov	r3, r0
 8009304:	e005      	b.n	8009312 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009306:	4a06      	ldr	r2, [pc, #24]	; (8009320 <tcpip_input+0x40>)
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ffa4 	bl	8009258 <tcpip_inpkt>
 8009310:	4603      	mov	r3, r0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	08014fd1 	.word	0x08014fd1
 8009320:	08013eb5 	.word	0x08013eb5

08009324 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800932e:	4819      	ldr	r0, [pc, #100]	; (8009394 <tcpip_try_callback+0x70>)
 8009330:	f00b ff89 	bl	8015246 <sys_mbox_valid>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <tcpip_try_callback+0x24>
 800933a:	4b17      	ldr	r3, [pc, #92]	; (8009398 <tcpip_try_callback+0x74>)
 800933c:	f240 125d 	movw	r2, #349	; 0x15d
 8009340:	4916      	ldr	r1, [pc, #88]	; (800939c <tcpip_try_callback+0x78>)
 8009342:	4817      	ldr	r0, [pc, #92]	; (80093a0 <tcpip_try_callback+0x7c>)
 8009344:	f00c f852 	bl	80153ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009348:	2008      	movs	r0, #8
 800934a:	f000 fd2b 	bl	8009da4 <memp_malloc>
 800934e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800935a:	e017      	b.n	800938c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	4808      	ldr	r0, [pc, #32]	; (8009394 <tcpip_try_callback+0x70>)
 8009372:	f00b ff1d 	bl	80151b0 <sys_mbox_trypost>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	2008      	movs	r0, #8
 8009380:	f000 fd62 	bl	8009e48 <memp_free>
    return ERR_MEM;
 8009384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009388:	e000      	b.n	800938c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	200049b8 	.word	0x200049b8
 8009398:	080162c4 	.word	0x080162c4
 800939c:	0801633c 	.word	0x0801633c
 80093a0:	08016314 	.word	0x08016314

080093a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 80093ae:	f000 f871 	bl	8009494 <lwip_init>

  tcpip_init_done = initfunc;
 80093b2:	4a17      	ldr	r2, [pc, #92]	; (8009410 <tcpip_init+0x6c>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80093b8:	4a16      	ldr	r2, [pc, #88]	; (8009414 <tcpip_init+0x70>)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80093be:	2106      	movs	r1, #6
 80093c0:	4815      	ldr	r0, [pc, #84]	; (8009418 <tcpip_init+0x74>)
 80093c2:	f00b fedb 	bl	801517c <sys_mbox_new>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80093cc:	4b13      	ldr	r3, [pc, #76]	; (800941c <tcpip_init+0x78>)
 80093ce:	f240 2261 	movw	r2, #609	; 0x261
 80093d2:	4913      	ldr	r1, [pc, #76]	; (8009420 <tcpip_init+0x7c>)
 80093d4:	4813      	ldr	r0, [pc, #76]	; (8009424 <tcpip_init+0x80>)
 80093d6:	f00c f809 	bl	80153ec <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80093da:	4813      	ldr	r0, [pc, #76]	; (8009428 <tcpip_init+0x84>)
 80093dc:	f00b ff50 	bl	8015280 <sys_mutex_new>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d006      	beq.n	80093f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80093e6:	4b0d      	ldr	r3, [pc, #52]	; (800941c <tcpip_init+0x78>)
 80093e8:	f240 2265 	movw	r2, #613	; 0x265
 80093ec:	490f      	ldr	r1, [pc, #60]	; (800942c <tcpip_init+0x88>)
 80093ee:	480d      	ldr	r0, [pc, #52]	; (8009424 <tcpip_init+0x80>)
 80093f0:	f00b fffc 	bl	80153ec <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80093f4:	2318      	movs	r3, #24
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093fc:	2200      	movs	r2, #0
 80093fe:	490c      	ldr	r1, [pc, #48]	; (8009430 <tcpip_init+0x8c>)
 8009400:	480c      	ldr	r0, [pc, #48]	; (8009434 <tcpip_init+0x90>)
 8009402:	f00b ff6f 	bl	80152e4 <sys_thread_new>
}
 8009406:	bf00      	nop
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200049b0 	.word	0x200049b0
 8009414:	200049b4 	.word	0x200049b4
 8009418:	200049b8 	.word	0x200049b8
 800941c:	080162c4 	.word	0x080162c4
 8009420:	0801634c 	.word	0x0801634c
 8009424:	08016314 	.word	0x08016314
 8009428:	20008188 	.word	0x20008188
 800942c:	08016370 	.word	0x08016370
 8009430:	08009169 	.word	0x08009169
 8009434:	08016394 	.word	0x08016394

08009438 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	021b      	lsls	r3, r3, #8
 8009446:	b21a      	sxth	r2, r3
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b29b      	uxth	r3, r3
 800944e:	b21b      	sxth	r3, r3
 8009450:	4313      	orrs	r3, r2
 8009452:	b21b      	sxth	r3, r3
 8009454:	b29b      	uxth	r3, r3
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	061a      	lsls	r2, r3, #24
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0e1b      	lsrs	r3, r3, #24
 8009486:	4313      	orrs	r3, r2
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800949e:	f00b fee3 	bl	8015268 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80094a2:	f000 f8d5 	bl	8009650 <mem_init>
  memp_init();
 80094a6:	f000 fc31 	bl	8009d0c <memp_init>
  pbuf_init();
  netif_init();
 80094aa:	f000 fcf7 	bl	8009e9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80094ae:	f007 f877 	bl	80105a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80094b2:	f001 fda1 	bl	800aff8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80094b6:	f006 ffbb 	bl	8010430 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <ptr_to_mem+0x20>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	4413      	add	r3, r2
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	200049bc 	.word	0x200049bc

080094e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a05      	ldr	r2, [pc, #20]	; (8009508 <mem_to_ptr+0x20>)
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	b29b      	uxth	r3, r3
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	200049bc 	.word	0x200049bc

0800950c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009514:	4b45      	ldr	r3, [pc, #276]	; (800962c <plug_holes+0x120>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d206      	bcs.n	800952c <plug_holes+0x20>
 800951e:	4b44      	ldr	r3, [pc, #272]	; (8009630 <plug_holes+0x124>)
 8009520:	f240 12df 	movw	r2, #479	; 0x1df
 8009524:	4943      	ldr	r1, [pc, #268]	; (8009634 <plug_holes+0x128>)
 8009526:	4844      	ldr	r0, [pc, #272]	; (8009638 <plug_holes+0x12c>)
 8009528:	f00b ff60 	bl	80153ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800952c:	4b43      	ldr	r3, [pc, #268]	; (800963c <plug_holes+0x130>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d306      	bcc.n	8009544 <plug_holes+0x38>
 8009536:	4b3e      	ldr	r3, [pc, #248]	; (8009630 <plug_holes+0x124>)
 8009538:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800953c:	4940      	ldr	r1, [pc, #256]	; (8009640 <plug_holes+0x134>)
 800953e:	483e      	ldr	r0, [pc, #248]	; (8009638 <plug_holes+0x12c>)
 8009540:	f00b ff54 	bl	80153ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d006      	beq.n	800955a <plug_holes+0x4e>
 800954c:	4b38      	ldr	r3, [pc, #224]	; (8009630 <plug_holes+0x124>)
 800954e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009552:	493c      	ldr	r1, [pc, #240]	; (8009644 <plug_holes+0x138>)
 8009554:	4838      	ldr	r0, [pc, #224]	; (8009638 <plug_holes+0x12c>)
 8009556:	f00b ff49 	bl	80153ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009562:	d906      	bls.n	8009572 <plug_holes+0x66>
 8009564:	4b32      	ldr	r3, [pc, #200]	; (8009630 <plug_holes+0x124>)
 8009566:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800956a:	4937      	ldr	r1, [pc, #220]	; (8009648 <plug_holes+0x13c>)
 800956c:	4832      	ldr	r0, [pc, #200]	; (8009638 <plug_holes+0x12c>)
 800956e:	f00b ff3d 	bl	80153ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff ffa4 	bl	80094c4 <ptr_to_mem>
 800957c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d024      	beq.n	80095d0 <plug_holes+0xc4>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d120      	bne.n	80095d0 <plug_holes+0xc4>
 800958e:	4b2b      	ldr	r3, [pc, #172]	; (800963c <plug_holes+0x130>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	429a      	cmp	r2, r3
 8009596:	d01b      	beq.n	80095d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009598:	4b2c      	ldr	r3, [pc, #176]	; (800964c <plug_holes+0x140>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d102      	bne.n	80095a8 <plug_holes+0x9c>
      lfree = mem;
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <plug_holes+0x140>)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	881a      	ldrh	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095b8:	d00a      	beq.n	80095d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff ff80 	bl	80094c4 <ptr_to_mem>
 80095c4:	4604      	mov	r4, r0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff ff8e 	bl	80094e8 <mem_to_ptr>
 80095cc:	4603      	mov	r3, r0
 80095ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff ff75 	bl	80094c4 <ptr_to_mem>
 80095da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d01f      	beq.n	8009624 <plug_holes+0x118>
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d11b      	bne.n	8009624 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <plug_holes+0x140>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d102      	bne.n	80095fc <plug_holes+0xf0>
      lfree = pmem;
 80095f6:	4a15      	ldr	r2, [pc, #84]	; (800964c <plug_holes+0x140>)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	881a      	ldrh	r2, [r3, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800960c:	d00a      	beq.n	8009624 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ff56 	bl	80094c4 <ptr_to_mem>
 8009618:	4604      	mov	r4, r0
 800961a:	68b8      	ldr	r0, [r7, #8]
 800961c:	f7ff ff64 	bl	80094e8 <mem_to_ptr>
 8009620:	4603      	mov	r3, r0
 8009622:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	bd90      	pop	{r4, r7, pc}
 800962c:	200049bc 	.word	0x200049bc
 8009630:	080163a4 	.word	0x080163a4
 8009634:	080163d4 	.word	0x080163d4
 8009638:	080163ec 	.word	0x080163ec
 800963c:	200049c0 	.word	0x200049c0
 8009640:	08016414 	.word	0x08016414
 8009644:	08016430 	.word	0x08016430
 8009648:	0801644c 	.word	0x0801644c
 800964c:	200049c8 	.word	0x200049c8

08009650 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009656:	4b1f      	ldr	r3, [pc, #124]	; (80096d4 <mem_init+0x84>)
 8009658:	3303      	adds	r3, #3
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	461a      	mov	r2, r3
 8009660:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <mem_init+0x88>)
 8009662:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009664:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <mem_init+0x88>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009670:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800967e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009682:	f7ff ff1f 	bl	80094c4 <ptr_to_mem>
 8009686:	4602      	mov	r2, r0
 8009688:	4b14      	ldr	r3, [pc, #80]	; (80096dc <mem_init+0x8c>)
 800968a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800968c:	4b13      	ldr	r3, [pc, #76]	; (80096dc <mem_init+0x8c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <mem_init+0x8c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800969c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <mem_init+0x8c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80096a8:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <mem_init+0x88>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a0c      	ldr	r2, [pc, #48]	; (80096e0 <mem_init+0x90>)
 80096ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80096b0:	480c      	ldr	r0, [pc, #48]	; (80096e4 <mem_init+0x94>)
 80096b2:	f00b fde5 	bl	8015280 <sys_mutex_new>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d006      	beq.n	80096ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <mem_init+0x98>)
 80096be:	f240 221f 	movw	r2, #543	; 0x21f
 80096c2:	490a      	ldr	r1, [pc, #40]	; (80096ec <mem_init+0x9c>)
 80096c4:	480a      	ldr	r0, [pc, #40]	; (80096f0 <mem_init+0xa0>)
 80096c6:	f00b fe91 	bl	80153ec <iprintf>
  }
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	200081a4 	.word	0x200081a4
 80096d8:	200049bc 	.word	0x200049bc
 80096dc:	200049c0 	.word	0x200049c0
 80096e0:	200049c8 	.word	0x200049c8
 80096e4:	200049c4 	.word	0x200049c4
 80096e8:	080163a4 	.word	0x080163a4
 80096ec:	08016478 	.word	0x08016478
 80096f0:	080163ec 	.word	0x080163ec

080096f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff fef3 	bl	80094e8 <mem_to_ptr>
 8009702:	4603      	mov	r3, r0
 8009704:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff feda 	bl	80094c4 <ptr_to_mem>
 8009710:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	885b      	ldrh	r3, [r3, #2]
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fed4 	bl	80094c4 <ptr_to_mem>
 800971c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009726:	d818      	bhi.n	800975a <mem_link_valid+0x66>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009730:	d813      	bhi.n	800975a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009736:	8afa      	ldrh	r2, [r7, #22]
 8009738:	429a      	cmp	r2, r3
 800973a:	d004      	beq.n	8009746 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	8afa      	ldrh	r2, [r7, #22]
 8009742:	429a      	cmp	r2, r3
 8009744:	d109      	bne.n	800975a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009746:	4b08      	ldr	r3, [pc, #32]	; (8009768 <mem_link_valid+0x74>)
 8009748:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	429a      	cmp	r2, r3
 800974e:	d006      	beq.n	800975e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	8afa      	ldrh	r2, [r7, #22]
 8009756:	429a      	cmp	r2, r3
 8009758:	d001      	beq.n	800975e <mem_link_valid+0x6a>
    return 0;
 800975a:	2300      	movs	r3, #0
 800975c:	e000      	b.n	8009760 <mem_link_valid+0x6c>
  }
  return 1;
 800975e:	2301      	movs	r3, #1
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200049c0 	.word	0x200049c0

0800976c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d070      	beq.n	800985c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00d      	beq.n	80097a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009784:	4b37      	ldr	r3, [pc, #220]	; (8009864 <mem_free+0xf8>)
 8009786:	f240 2273 	movw	r2, #627	; 0x273
 800978a:	4937      	ldr	r1, [pc, #220]	; (8009868 <mem_free+0xfc>)
 800978c:	4837      	ldr	r0, [pc, #220]	; (800986c <mem_free+0x100>)
 800978e:	f00b fe2d 	bl	80153ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009792:	f00b fdc7 	bl	8015324 <sys_arch_protect>
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f00b fdd1 	bl	8015340 <sys_arch_unprotect>
    return;
 800979e:	e05e      	b.n	800985e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3b08      	subs	r3, #8
 80097a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80097a6:	4b32      	ldr	r3, [pc, #200]	; (8009870 <mem_free+0x104>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d306      	bcc.n	80097be <mem_free+0x52>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f103 020c 	add.w	r2, r3, #12
 80097b6:	4b2f      	ldr	r3, [pc, #188]	; (8009874 <mem_free+0x108>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d90d      	bls.n	80097da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80097be:	4b29      	ldr	r3, [pc, #164]	; (8009864 <mem_free+0xf8>)
 80097c0:	f240 227f 	movw	r2, #639	; 0x27f
 80097c4:	492c      	ldr	r1, [pc, #176]	; (8009878 <mem_free+0x10c>)
 80097c6:	4829      	ldr	r0, [pc, #164]	; (800986c <mem_free+0x100>)
 80097c8:	f00b fe10 	bl	80153ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80097cc:	f00b fdaa 	bl	8015324 <sys_arch_protect>
 80097d0:	6138      	str	r0, [r7, #16]
 80097d2:	6938      	ldr	r0, [r7, #16]
 80097d4:	f00b fdb4 	bl	8015340 <sys_arch_unprotect>
    return;
 80097d8:	e041      	b.n	800985e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80097da:	4828      	ldr	r0, [pc, #160]	; (800987c <mem_free+0x110>)
 80097dc:	f00b fd66 	bl	80152ac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	791b      	ldrb	r3, [r3, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d110      	bne.n	800980a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <mem_free+0xf8>)
 80097ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80097ee:	4924      	ldr	r1, [pc, #144]	; (8009880 <mem_free+0x114>)
 80097f0:	481e      	ldr	r0, [pc, #120]	; (800986c <mem_free+0x100>)
 80097f2:	f00b fdfb 	bl	80153ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80097f6:	4821      	ldr	r0, [pc, #132]	; (800987c <mem_free+0x110>)
 80097f8:	f00b fd67 	bl	80152ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80097fc:	f00b fd92 	bl	8015324 <sys_arch_protect>
 8009800:	6178      	str	r0, [r7, #20]
 8009802:	6978      	ldr	r0, [r7, #20]
 8009804:	f00b fd9c 	bl	8015340 <sys_arch_unprotect>
    return;
 8009808:	e029      	b.n	800985e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800980a:	69f8      	ldr	r0, [r7, #28]
 800980c:	f7ff ff72 	bl	80096f4 <mem_link_valid>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d110      	bne.n	8009838 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009816:	4b13      	ldr	r3, [pc, #76]	; (8009864 <mem_free+0xf8>)
 8009818:	f240 2295 	movw	r2, #661	; 0x295
 800981c:	4919      	ldr	r1, [pc, #100]	; (8009884 <mem_free+0x118>)
 800981e:	4813      	ldr	r0, [pc, #76]	; (800986c <mem_free+0x100>)
 8009820:	f00b fde4 	bl	80153ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009824:	4815      	ldr	r0, [pc, #84]	; (800987c <mem_free+0x110>)
 8009826:	f00b fd50 	bl	80152ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800982a:	f00b fd7b 	bl	8015324 <sys_arch_protect>
 800982e:	61b8      	str	r0, [r7, #24]
 8009830:	69b8      	ldr	r0, [r7, #24]
 8009832:	f00b fd85 	bl	8015340 <sys_arch_unprotect>
    return;
 8009836:	e012      	b.n	800985e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	2200      	movs	r2, #0
 800983c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800983e:	4b12      	ldr	r3, [pc, #72]	; (8009888 <mem_free+0x11c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	429a      	cmp	r2, r3
 8009846:	d202      	bcs.n	800984e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009848:	4a0f      	ldr	r2, [pc, #60]	; (8009888 <mem_free+0x11c>)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800984e:	69f8      	ldr	r0, [r7, #28]
 8009850:	f7ff fe5c 	bl	800950c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009854:	4809      	ldr	r0, [pc, #36]	; (800987c <mem_free+0x110>)
 8009856:	f00b fd38 	bl	80152ca <sys_mutex_unlock>
 800985a:	e000      	b.n	800985e <mem_free+0xf2>
    return;
 800985c:	bf00      	nop
}
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	080163a4 	.word	0x080163a4
 8009868:	08016494 	.word	0x08016494
 800986c:	080163ec 	.word	0x080163ec
 8009870:	200049bc 	.word	0x200049bc
 8009874:	200049c0 	.word	0x200049c0
 8009878:	080164b8 	.word	0x080164b8
 800987c:	200049c4 	.word	0x200049c4
 8009880:	080164d4 	.word	0x080164d4
 8009884:	080164fc 	.word	0x080164fc
 8009888:	200049c8 	.word	0x200049c8

0800988c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009898:	887b      	ldrh	r3, [r7, #2]
 800989a:	3303      	adds	r3, #3
 800989c:	b29b      	uxth	r3, r3
 800989e:	f023 0303 	bic.w	r3, r3, #3
 80098a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80098a4:	8bfb      	ldrh	r3, [r7, #30]
 80098a6:	2b0b      	cmp	r3, #11
 80098a8:	d801      	bhi.n	80098ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80098aa:	230c      	movs	r3, #12
 80098ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80098ae:	8bfb      	ldrh	r3, [r7, #30]
 80098b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098b4:	d803      	bhi.n	80098be <mem_trim+0x32>
 80098b6:	8bfa      	ldrh	r2, [r7, #30]
 80098b8:	887b      	ldrh	r3, [r7, #2]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d201      	bcs.n	80098c2 <mem_trim+0x36>
    return NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	e0d8      	b.n	8009a74 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80098c2:	4b6e      	ldr	r3, [pc, #440]	; (8009a7c <mem_trim+0x1f0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d304      	bcc.n	80098d6 <mem_trim+0x4a>
 80098cc:	4b6c      	ldr	r3, [pc, #432]	; (8009a80 <mem_trim+0x1f4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d306      	bcc.n	80098e4 <mem_trim+0x58>
 80098d6:	4b6b      	ldr	r3, [pc, #428]	; (8009a84 <mem_trim+0x1f8>)
 80098d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80098dc:	496a      	ldr	r1, [pc, #424]	; (8009a88 <mem_trim+0x1fc>)
 80098de:	486b      	ldr	r0, [pc, #428]	; (8009a8c <mem_trim+0x200>)
 80098e0:	f00b fd84 	bl	80153ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80098e4:	4b65      	ldr	r3, [pc, #404]	; (8009a7c <mem_trim+0x1f0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d304      	bcc.n	80098f8 <mem_trim+0x6c>
 80098ee:	4b64      	ldr	r3, [pc, #400]	; (8009a80 <mem_trim+0x1f4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d307      	bcc.n	8009908 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80098f8:	f00b fd14 	bl	8015324 <sys_arch_protect>
 80098fc:	60b8      	str	r0, [r7, #8]
 80098fe:	68b8      	ldr	r0, [r7, #8]
 8009900:	f00b fd1e 	bl	8015340 <sys_arch_unprotect>
    return rmem;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	e0b5      	b.n	8009a74 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3b08      	subs	r3, #8
 800990c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800990e:	69b8      	ldr	r0, [r7, #24]
 8009910:	f7ff fdea 	bl	80094e8 <mem_to_ptr>
 8009914:	4603      	mov	r3, r0
 8009916:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	881a      	ldrh	r2, [r3, #0]
 800991c:	8afb      	ldrh	r3, [r7, #22]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b08      	subs	r3, #8
 8009924:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009926:	8bfa      	ldrh	r2, [r7, #30]
 8009928:	8abb      	ldrh	r3, [r7, #20]
 800992a:	429a      	cmp	r2, r3
 800992c:	d906      	bls.n	800993c <mem_trim+0xb0>
 800992e:	4b55      	ldr	r3, [pc, #340]	; (8009a84 <mem_trim+0x1f8>)
 8009930:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009934:	4956      	ldr	r1, [pc, #344]	; (8009a90 <mem_trim+0x204>)
 8009936:	4855      	ldr	r0, [pc, #340]	; (8009a8c <mem_trim+0x200>)
 8009938:	f00b fd58 	bl	80153ec <iprintf>
  if (newsize > size) {
 800993c:	8bfa      	ldrh	r2, [r7, #30]
 800993e:	8abb      	ldrh	r3, [r7, #20]
 8009940:	429a      	cmp	r2, r3
 8009942:	d901      	bls.n	8009948 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	e095      	b.n	8009a74 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009948:	8bfa      	ldrh	r2, [r7, #30]
 800994a:	8abb      	ldrh	r3, [r7, #20]
 800994c:	429a      	cmp	r2, r3
 800994e:	d101      	bne.n	8009954 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	e08f      	b.n	8009a74 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009954:	484f      	ldr	r0, [pc, #316]	; (8009a94 <mem_trim+0x208>)
 8009956:	f00b fca9 	bl	80152ac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fdb0 	bl	80094c4 <ptr_to_mem>
 8009964:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d13f      	bne.n	80099ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009976:	d106      	bne.n	8009986 <mem_trim+0xfa>
 8009978:	4b42      	ldr	r3, [pc, #264]	; (8009a84 <mem_trim+0x1f8>)
 800997a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800997e:	4946      	ldr	r1, [pc, #280]	; (8009a98 <mem_trim+0x20c>)
 8009980:	4842      	ldr	r0, [pc, #264]	; (8009a8c <mem_trim+0x200>)
 8009982:	f00b fd33 	bl	80153ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800998c:	8afa      	ldrh	r2, [r7, #22]
 800998e:	8bfb      	ldrh	r3, [r7, #30]
 8009990:	4413      	add	r3, r2
 8009992:	b29b      	uxth	r3, r3
 8009994:	3308      	adds	r3, #8
 8009996:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009998:	4b40      	ldr	r3, [pc, #256]	; (8009a9c <mem_trim+0x210>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d106      	bne.n	80099b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fd8d 	bl	80094c4 <ptr_to_mem>
 80099aa:	4602      	mov	r2, r0
 80099ac:	4b3b      	ldr	r3, [pc, #236]	; (8009a9c <mem_trim+0x210>)
 80099ae:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fd86 	bl	80094c4 <ptr_to_mem>
 80099b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2200      	movs	r2, #0
 80099be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	89ba      	ldrh	r2, [r7, #12]
 80099c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	8afa      	ldrh	r2, [r7, #22]
 80099ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	89fa      	ldrh	r2, [r7, #14]
 80099d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099da:	d047      	beq.n	8009a6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff fd6f 	bl	80094c4 <ptr_to_mem>
 80099e6:	4602      	mov	r2, r0
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	8053      	strh	r3, [r2, #2]
 80099ec:	e03e      	b.n	8009a6c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80099ee:	8bfb      	ldrh	r3, [r7, #30]
 80099f0:	f103 0214 	add.w	r2, r3, #20
 80099f4:	8abb      	ldrh	r3, [r7, #20]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d838      	bhi.n	8009a6c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80099fa:	8afa      	ldrh	r2, [r7, #22]
 80099fc:	8bfb      	ldrh	r3, [r7, #30]
 80099fe:	4413      	add	r3, r2
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3308      	adds	r3, #8
 8009a04:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a0e:	d106      	bne.n	8009a1e <mem_trim+0x192>
 8009a10:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <mem_trim+0x1f8>)
 8009a12:	f240 3216 	movw	r2, #790	; 0x316
 8009a16:	4920      	ldr	r1, [pc, #128]	; (8009a98 <mem_trim+0x20c>)
 8009a18:	481c      	ldr	r0, [pc, #112]	; (8009a8c <mem_trim+0x200>)
 8009a1a:	f00b fce7 	bl	80153ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009a1e:	89fb      	ldrh	r3, [r7, #14]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fd4f 	bl	80094c4 <ptr_to_mem>
 8009a26:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009a28:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <mem_trim+0x210>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d202      	bcs.n	8009a38 <mem_trim+0x1ac>
      lfree = mem2;
 8009a32:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <mem_trim+0x210>)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	881a      	ldrh	r2, [r3, #0]
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	8afa      	ldrh	r2, [r7, #22]
 8009a4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	89fa      	ldrh	r2, [r7, #14]
 8009a50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a5a:	d007      	beq.n	8009a6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fd2f 	bl	80094c4 <ptr_to_mem>
 8009a66:	4602      	mov	r2, r0
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009a6c:	4809      	ldr	r0, [pc, #36]	; (8009a94 <mem_trim+0x208>)
 8009a6e:	f00b fc2c 	bl	80152ca <sys_mutex_unlock>
  return rmem;
 8009a72:	687b      	ldr	r3, [r7, #4]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3720      	adds	r7, #32
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	200049bc 	.word	0x200049bc
 8009a80:	200049c0 	.word	0x200049c0
 8009a84:	080163a4 	.word	0x080163a4
 8009a88:	08016530 	.word	0x08016530
 8009a8c:	080163ec 	.word	0x080163ec
 8009a90:	08016548 	.word	0x08016548
 8009a94:	200049c4 	.word	0x200049c4
 8009a98:	08016568 	.word	0x08016568
 8009a9c:	200049c8 	.word	0x200049c8

08009aa0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <mem_malloc+0x14>
    return NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e0e2      	b.n	8009c7a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	3303      	adds	r3, #3
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009ac0:	8bbb      	ldrh	r3, [r7, #28]
 8009ac2:	2b0b      	cmp	r3, #11
 8009ac4:	d801      	bhi.n	8009aca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009aca:	8bbb      	ldrh	r3, [r7, #28]
 8009acc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ad0:	d803      	bhi.n	8009ada <mem_malloc+0x3a>
 8009ad2:	8bba      	ldrh	r2, [r7, #28]
 8009ad4:	88fb      	ldrh	r3, [r7, #6]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d201      	bcs.n	8009ade <mem_malloc+0x3e>
    return NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e0cd      	b.n	8009c7a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009ade:	4869      	ldr	r0, [pc, #420]	; (8009c84 <mem_malloc+0x1e4>)
 8009ae0:	f00b fbe4 	bl	80152ac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009ae4:	4b68      	ldr	r3, [pc, #416]	; (8009c88 <mem_malloc+0x1e8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff fcfd 	bl	80094e8 <mem_to_ptr>
 8009aee:	4603      	mov	r3, r0
 8009af0:	83fb      	strh	r3, [r7, #30]
 8009af2:	e0b7      	b.n	8009c64 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009af4:	8bfb      	ldrh	r3, [r7, #30]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fce4 	bl	80094c4 <ptr_to_mem>
 8009afc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	791b      	ldrb	r3, [r3, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 80a7 	bne.w	8009c56 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	8bfb      	ldrh	r3, [r7, #30]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	f1a3 0208 	sub.w	r2, r3, #8
 8009b16:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	f0c0 809c 	bcc.w	8009c56 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	8bfb      	ldrh	r3, [r7, #30]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	f1a3 0208 	sub.w	r2, r3, #8
 8009b2c:	8bbb      	ldrh	r3, [r7, #28]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d333      	bcc.n	8009b9c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009b34:	8bfa      	ldrh	r2, [r7, #30]
 8009b36:	8bbb      	ldrh	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009b40:	8a7b      	ldrh	r3, [r7, #18]
 8009b42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b46:	d106      	bne.n	8009b56 <mem_malloc+0xb6>
 8009b48:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <mem_malloc+0x1ec>)
 8009b4a:	f240 3287 	movw	r2, #903	; 0x387
 8009b4e:	4950      	ldr	r1, [pc, #320]	; (8009c90 <mem_malloc+0x1f0>)
 8009b50:	4850      	ldr	r0, [pc, #320]	; (8009c94 <mem_malloc+0x1f4>)
 8009b52:	f00b fc4b 	bl	80153ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009b56:	8a7b      	ldrh	r3, [r7, #18]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fcb3 	bl	80094c4 <ptr_to_mem>
 8009b5e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8bfa      	ldrh	r2, [r7, #30]
 8009b72:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	8a7a      	ldrh	r2, [r7, #18]
 8009b78:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b88:	d00b      	beq.n	8009ba2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fc98 	bl	80094c4 <ptr_to_mem>
 8009b94:	4602      	mov	r2, r0
 8009b96:	8a7b      	ldrh	r3, [r7, #18]
 8009b98:	8053      	strh	r3, [r2, #2]
 8009b9a:	e002      	b.n	8009ba2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009ba2:	4b39      	ldr	r3, [pc, #228]	; (8009c88 <mem_malloc+0x1e8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d127      	bne.n	8009bfc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009bac:	4b36      	ldr	r3, [pc, #216]	; (8009c88 <mem_malloc+0x1e8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009bb2:	e005      	b.n	8009bc0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fc83 	bl	80094c4 <ptr_to_mem>
 8009bbe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	791b      	ldrb	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <mem_malloc+0x132>
 8009bc8:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <mem_malloc+0x1f8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d1f0      	bne.n	8009bb4 <mem_malloc+0x114>
          }
          lfree = cur;
 8009bd2:	4a2d      	ldr	r2, [pc, #180]	; (8009c88 <mem_malloc+0x1e8>)
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009bd8:	4b2b      	ldr	r3, [pc, #172]	; (8009c88 <mem_malloc+0x1e8>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <mem_malloc+0x1f8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d00b      	beq.n	8009bfc <mem_malloc+0x15c>
 8009be4:	4b28      	ldr	r3, [pc, #160]	; (8009c88 <mem_malloc+0x1e8>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	791b      	ldrb	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d006      	beq.n	8009bfc <mem_malloc+0x15c>
 8009bee:	4b27      	ldr	r3, [pc, #156]	; (8009c8c <mem_malloc+0x1ec>)
 8009bf0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009bf4:	4929      	ldr	r1, [pc, #164]	; (8009c9c <mem_malloc+0x1fc>)
 8009bf6:	4827      	ldr	r0, [pc, #156]	; (8009c94 <mem_malloc+0x1f4>)
 8009bf8:	f00b fbf8 	bl	80153ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009bfc:	4821      	ldr	r0, [pc, #132]	; (8009c84 <mem_malloc+0x1e4>)
 8009bfe:	f00b fb64 	bl	80152ca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c02:	8bba      	ldrh	r2, [r7, #28]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	4413      	add	r3, r2
 8009c08:	3308      	adds	r3, #8
 8009c0a:	4a23      	ldr	r2, [pc, #140]	; (8009c98 <mem_malloc+0x1f8>)
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d906      	bls.n	8009c20 <mem_malloc+0x180>
 8009c12:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <mem_malloc+0x1ec>)
 8009c14:	f240 32ba 	movw	r2, #954	; 0x3ba
 8009c18:	4921      	ldr	r1, [pc, #132]	; (8009ca0 <mem_malloc+0x200>)
 8009c1a:	481e      	ldr	r0, [pc, #120]	; (8009c94 <mem_malloc+0x1f4>)
 8009c1c:	f00b fbe6 	bl	80153ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f003 0303 	and.w	r3, r3, #3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d006      	beq.n	8009c38 <mem_malloc+0x198>
 8009c2a:	4b18      	ldr	r3, [pc, #96]	; (8009c8c <mem_malloc+0x1ec>)
 8009c2c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009c30:	491c      	ldr	r1, [pc, #112]	; (8009ca4 <mem_malloc+0x204>)
 8009c32:	4818      	ldr	r0, [pc, #96]	; (8009c94 <mem_malloc+0x1f4>)
 8009c34:	f00b fbda 	bl	80153ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d006      	beq.n	8009c50 <mem_malloc+0x1b0>
 8009c42:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <mem_malloc+0x1ec>)
 8009c44:	f240 32be 	movw	r2, #958	; 0x3be
 8009c48:	4917      	ldr	r1, [pc, #92]	; (8009ca8 <mem_malloc+0x208>)
 8009c4a:	4812      	ldr	r0, [pc, #72]	; (8009c94 <mem_malloc+0x1f4>)
 8009c4c:	f00b fbce 	bl	80153ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3308      	adds	r3, #8
 8009c54:	e011      	b.n	8009c7a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009c56:	8bfb      	ldrh	r3, [r7, #30]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fc33 	bl	80094c4 <ptr_to_mem>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c64:	8bfa      	ldrh	r2, [r7, #30]
 8009c66:	8bbb      	ldrh	r3, [r7, #28]
 8009c68:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	f4ff af41 	bcc.w	8009af4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009c72:	4804      	ldr	r0, [pc, #16]	; (8009c84 <mem_malloc+0x1e4>)
 8009c74:	f00b fb29 	bl	80152ca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200049c4 	.word	0x200049c4
 8009c88:	200049c8 	.word	0x200049c8
 8009c8c:	080163a4 	.word	0x080163a4
 8009c90:	08016568 	.word	0x08016568
 8009c94:	080163ec 	.word	0x080163ec
 8009c98:	200049c0 	.word	0x200049c0
 8009c9c:	0801657c 	.word	0x0801657c
 8009ca0:	08016598 	.word	0x08016598
 8009ca4:	080165c8 	.word	0x080165c8
 8009ca8:	080165f8 	.word	0x080165f8

08009cac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	3303      	adds	r3, #3
 8009cc2:	f023 0303 	bic.w	r3, r3, #3
 8009cc6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e011      	b.n	8009cf2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	4413      	add	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	dbe7      	blt.n	8009cce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009cfe:	bf00      	nop
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d12:	2300      	movs	r3, #0
 8009d14:	80fb      	strh	r3, [r7, #6]
 8009d16:	e009      	b.n	8009d2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <memp_init+0x30>)
 8009d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff ffc3 	bl	8009cac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	80fb      	strh	r3, [r7, #6]
 8009d2c:	88fb      	ldrh	r3, [r7, #6]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d9f2      	bls.n	8009d18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	080191c4 	.word	0x080191c4

08009d40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009d48:	f00b faec 	bl	8015324 <sys_arch_protect>
 8009d4c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d015      	beq.n	8009d88 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f003 0303 	and.w	r3, r3, #3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d006      	beq.n	8009d7e <do_memp_malloc_pool+0x3e>
 8009d70:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <do_memp_malloc_pool+0x58>)
 8009d72:	f240 1219 	movw	r2, #281	; 0x119
 8009d76:	4909      	ldr	r1, [pc, #36]	; (8009d9c <do_memp_malloc_pool+0x5c>)
 8009d78:	4809      	ldr	r0, [pc, #36]	; (8009da0 <do_memp_malloc_pool+0x60>)
 8009d7a:	f00b fb37 	bl	80153ec <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f00b fade 	bl	8015340 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	e003      	b.n	8009d90 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f00b fad9 	bl	8015340 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	0801661c 	.word	0x0801661c
 8009d9c:	0801664c 	.word	0x0801664c
 8009da0:	08016670 	.word	0x08016670

08009da4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b0c      	cmp	r3, #12
 8009db2:	d908      	bls.n	8009dc6 <memp_malloc+0x22>
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <memp_malloc+0x3c>)
 8009db6:	f240 1257 	movw	r2, #343	; 0x157
 8009dba:	490a      	ldr	r1, [pc, #40]	; (8009de4 <memp_malloc+0x40>)
 8009dbc:	480a      	ldr	r0, [pc, #40]	; (8009de8 <memp_malloc+0x44>)
 8009dbe:	f00b fb15 	bl	80153ec <iprintf>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e008      	b.n	8009dd8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4a08      	ldr	r2, [pc, #32]	; (8009dec <memp_malloc+0x48>)
 8009dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff ffb6 	bl	8009d40 <do_memp_malloc_pool>
 8009dd4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	0801661c 	.word	0x0801661c
 8009de4:	080166ac 	.word	0x080166ac
 8009de8:	08016670 	.word	0x08016670
 8009dec:	080191c4 	.word	0x080191c4

08009df0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <do_memp_free_pool+0x22>
 8009e04:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <do_memp_free_pool+0x4c>)
 8009e06:	f240 126d 	movw	r2, #365	; 0x16d
 8009e0a:	490d      	ldr	r1, [pc, #52]	; (8009e40 <do_memp_free_pool+0x50>)
 8009e0c:	480d      	ldr	r0, [pc, #52]	; (8009e44 <do_memp_free_pool+0x54>)
 8009e0e:	f00b faed 	bl	80153ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009e16:	f00b fa85 	bl	8015324 <sys_arch_protect>
 8009e1a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009e2e:	68b8      	ldr	r0, [r7, #8]
 8009e30:	f00b fa86 	bl	8015340 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	0801661c 	.word	0x0801661c
 8009e40:	080166cc 	.word	0x080166cc
 8009e44:	08016670 	.word	0x08016670

08009e48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	2b0c      	cmp	r3, #12
 8009e58:	d907      	bls.n	8009e6a <memp_free+0x22>
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <memp_free+0x44>)
 8009e5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e60:	490b      	ldr	r1, [pc, #44]	; (8009e90 <memp_free+0x48>)
 8009e62:	480c      	ldr	r0, [pc, #48]	; (8009e94 <memp_free+0x4c>)
 8009e64:	f00b fac2 	bl	80153ec <iprintf>
 8009e68:	e00c      	b.n	8009e84 <memp_free+0x3c>

  if (mem == NULL) {
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	4a09      	ldr	r2, [pc, #36]	; (8009e98 <memp_free+0x50>)
 8009e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff ffb8 	bl	8009df0 <do_memp_free_pool>
 8009e80:	e000      	b.n	8009e84 <memp_free+0x3c>
    return;
 8009e82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	0801661c 	.word	0x0801661c
 8009e90:	080166ec 	.word	0x080166ec
 8009e94:	08016670 	.word	0x08016670
 8009e98:	080191c4 	.word	0x080191c4

08009e9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009ea0:	bf00      	nop
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d108      	bne.n	8009ed2 <netif_add+0x26>
 8009ec0:	4b59      	ldr	r3, [pc, #356]	; (800a028 <netif_add+0x17c>)
 8009ec2:	f240 1227 	movw	r2, #295	; 0x127
 8009ec6:	4959      	ldr	r1, [pc, #356]	; (800a02c <netif_add+0x180>)
 8009ec8:	4859      	ldr	r0, [pc, #356]	; (800a030 <netif_add+0x184>)
 8009eca:	f00b fa8f 	bl	80153ec <iprintf>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e0a6      	b.n	800a020 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d108      	bne.n	8009eea <netif_add+0x3e>
 8009ed8:	4b53      	ldr	r3, [pc, #332]	; (800a028 <netif_add+0x17c>)
 8009eda:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009ede:	4955      	ldr	r1, [pc, #340]	; (800a034 <netif_add+0x188>)
 8009ee0:	4853      	ldr	r0, [pc, #332]	; (800a030 <netif_add+0x184>)
 8009ee2:	f00b fa83 	bl	80153ec <iprintf>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e09a      	b.n	800a020 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009ef0:	4b51      	ldr	r3, [pc, #324]	; (800a038 <netif_add+0x18c>)
 8009ef2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009efa:	4b4f      	ldr	r3, [pc, #316]	; (800a038 <netif_add+0x18c>)
 8009efc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009f04:	4b4c      	ldr	r3, [pc, #304]	; (800a038 <netif_add+0x18c>)
 8009f06:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4a47      	ldr	r2, [pc, #284]	; (800a03c <netif_add+0x190>)
 8009f1e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3320      	adds	r3, #32
 8009f32:	2204      	movs	r2, #4
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f00b fa50 	bl	80153dc <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a3a      	ldr	r2, [r7, #32]
 8009f40:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8009f42:	4b3f      	ldr	r3, [pc, #252]	; (800a040 <netif_add+0x194>)
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f50:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f913 	bl	800a184 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	4798      	blx	r3
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <netif_add+0xc2>
    return NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e058      	b.n	800a020 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f74:	2bff      	cmp	r3, #255	; 0xff
 8009f76:	d103      	bne.n	8009f80 <netif_add+0xd4>
        netif->num = 0;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f84:	4b2f      	ldr	r3, [pc, #188]	; (800a044 <netif_add+0x198>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	e02b      	b.n	8009fe4 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d106      	bne.n	8009fa2 <netif_add+0xf6>
 8009f94:	4b24      	ldr	r3, [pc, #144]	; (800a028 <netif_add+0x17c>)
 8009f96:	f240 128b 	movw	r2, #395	; 0x18b
 8009f9a:	492b      	ldr	r1, [pc, #172]	; (800a048 <netif_add+0x19c>)
 8009f9c:	4824      	ldr	r0, [pc, #144]	; (800a030 <netif_add+0x184>)
 8009f9e:	f00b fa25 	bl	80153ec <iprintf>
        num_netifs++;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2bff      	cmp	r3, #255	; 0xff
 8009fac:	dd06      	ble.n	8009fbc <netif_add+0x110>
 8009fae:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <netif_add+0x17c>)
 8009fb0:	f240 128d 	movw	r2, #397	; 0x18d
 8009fb4:	4925      	ldr	r1, [pc, #148]	; (800a04c <netif_add+0x1a0>)
 8009fb6:	481e      	ldr	r0, [pc, #120]	; (800a030 <netif_add+0x184>)
 8009fb8:	f00b fa18 	bl	80153ec <iprintf>
        if (netif2->num == netif->num) {
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d108      	bne.n	8009fde <netif_add+0x132>
          netif->num++;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009fdc:	e005      	b.n	8009fea <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1d0      	bne.n	8009f8c <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1be      	bne.n	8009f6e <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ff6:	2bfe      	cmp	r3, #254	; 0xfe
 8009ff8:	d103      	bne.n	800a002 <netif_add+0x156>
    netif_num = 0;
 8009ffa:	4b11      	ldr	r3, [pc, #68]	; (800a040 <netif_add+0x194>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
 800a000:	e006      	b.n	800a010 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a008:	3301      	adds	r3, #1
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <netif_add+0x194>)
 800a00e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a010:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <netif_add+0x198>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a018:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <netif_add+0x198>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a01e:	68fb      	ldr	r3, [r7, #12]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	08016708 	.word	0x08016708
 800a02c:	0801679c 	.word	0x0801679c
 800a030:	08016758 	.word	0x08016758
 800a034:	080167b8 	.word	0x080167b8
 800a038:	08019248 	.word	0x08019248
 800a03c:	0800a375 	.word	0x0800a375
 800a040:	20004a00 	.word	0x20004a00
 800a044:	2000b8b0 	.word	0x2000b8b0
 800a048:	080167dc 	.word	0x080167dc
 800a04c:	080167f0 	.word	0x080167f0

0800a050 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f002 fb07 	bl	800c670 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f006 ff27 	bl	8010eb8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <netif_do_set_ipaddr+0x20>
 800a086:	4b1d      	ldr	r3, [pc, #116]	; (800a0fc <netif_do_set_ipaddr+0x88>)
 800a088:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a08c:	491c      	ldr	r1, [pc, #112]	; (800a100 <netif_do_set_ipaddr+0x8c>)
 800a08e:	481d      	ldr	r0, [pc, #116]	; (800a104 <netif_do_set_ipaddr+0x90>)
 800a090:	f00b f9ac 	bl	80153ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d106      	bne.n	800a0a8 <netif_do_set_ipaddr+0x34>
 800a09a:	4b18      	ldr	r3, [pc, #96]	; (800a0fc <netif_do_set_ipaddr+0x88>)
 800a09c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a0a0:	4917      	ldr	r1, [pc, #92]	; (800a100 <netif_do_set_ipaddr+0x8c>)
 800a0a2:	4818      	ldr	r0, [pc, #96]	; (800a104 <netif_do_set_ipaddr+0x90>)
 800a0a4:	f00b f9a2 	bl	80153ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d01c      	beq.n	800a0f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ffbf 	bl	800a050 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <netif_do_set_ipaddr+0x6a>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	e000      	b.n	800a0e0 <netif_do_set_ipaddr+0x6c>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f8d2 	bl	800a290 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	08016708 	.word	0x08016708
 800a100:	08016820 	.word	0x08016820
 800a104:	08016758 	.word	0x08016758

0800a108 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3308      	adds	r3, #8
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d00a      	beq.n	800a138 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <netif_do_set_netmask+0x26>
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	e000      	b.n	800a130 <netif_do_set_netmask+0x28>
 800a12e:	2300      	movs	r3, #0
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a134:	2301      	movs	r3, #1
 800a136:	e000      	b.n	800a13a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	330c      	adds	r3, #12
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d00a      	beq.n	800a176 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d002      	beq.n	800a16c <netif_do_set_gw+0x26>
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	e000      	b.n	800a16e <netif_do_set_gw+0x28>
 800a16c:	2300      	movs	r3, #0
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <netif_set_addr+0x90>)
 800a1a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a1aa:	4b1a      	ldr	r3, [pc, #104]	; (800a214 <netif_set_addr+0x90>)
 800a1ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a1b4:	4b17      	ldr	r3, [pc, #92]	; (800a214 <netif_set_addr+0x90>)
 800a1b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <netif_set_addr+0x42>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <netif_set_addr+0x46>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e000      	b.n	800a1cc <netif_set_addr+0x48>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1d4:	f107 0310 	add.w	r3, r7, #16
 800a1d8:	461a      	mov	r2, r3
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff ff49 	bl	800a074 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff ff8e 	bl	800a108 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7ff ffa8 	bl	800a146 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	461a      	mov	r2, r3
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff ff35 	bl	800a074 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a20a:	bf00      	nop
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	08019248 	.word	0x08019248

0800a218 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a220:	4a04      	ldr	r2, [pc, #16]	; (800a234 <netif_set_default+0x1c>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	2000b8b4 	.word	0x2000b8b4

0800a238 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <netif_set_up+0x1e>
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <netif_set_up+0x4c>)
 800a248:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a24c:	490e      	ldr	r1, [pc, #56]	; (800a288 <netif_set_up+0x50>)
 800a24e:	480f      	ldr	r0, [pc, #60]	; (800a28c <netif_set_up+0x54>)
 800a250:	f00b f8cc 	bl	80153ec <iprintf>
 800a254:	e013      	b.n	800a27e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10c      	bne.n	800a27e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a276:	2103      	movs	r1, #3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f809 	bl	800a290 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08016708 	.word	0x08016708
 800a288:	08016890 	.word	0x08016890
 800a28c:	08016758 	.word	0x08016758

0800a290 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <netif_issue_reports+0x20>
 800a2a2:	4b18      	ldr	r3, [pc, #96]	; (800a304 <netif_issue_reports+0x74>)
 800a2a4:	f240 326d 	movw	r2, #877	; 0x36d
 800a2a8:	4917      	ldr	r1, [pc, #92]	; (800a308 <netif_issue_reports+0x78>)
 800a2aa:	4818      	ldr	r0, [pc, #96]	; (800a30c <netif_issue_reports+0x7c>)
 800a2ac:	f00b f89e 	bl	80153ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01e      	beq.n	800a2fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d017      	beq.n	800a2fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d013      	beq.n	800a2fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00e      	beq.n	800a2fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f009 fba3 	bl	8013a40 <etharp_request>
 800a2fa:	e000      	b.n	800a2fe <netif_issue_reports+0x6e>
    return;
 800a2fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	08016708 	.word	0x08016708
 800a308:	080168ac 	.word	0x080168ac
 800a30c:	08016758 	.word	0x08016758

0800a310 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d107      	bne.n	800a32e <netif_set_down+0x1e>
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <netif_set_down+0x58>)
 800a320:	f240 329b 	movw	r2, #923	; 0x39b
 800a324:	4911      	ldr	r1, [pc, #68]	; (800a36c <netif_set_down+0x5c>)
 800a326:	4812      	ldr	r0, [pc, #72]	; (800a370 <netif_set_down+0x60>)
 800a328:	f00b f860 	bl	80153ec <iprintf>
 800a32c:	e019      	b.n	800a362 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d012      	beq.n	800a362 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a342:	f023 0301 	bic.w	r3, r3, #1
 800a346:	b2da      	uxtb	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a354:	f003 0308 	and.w	r3, r3, #8
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f008 ff29 	bl	80131b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08016708 	.word	0x08016708
 800a36c:	080168d0 	.word	0x080168d0
 800a370:	08016758 	.word	0x08016758

0800a374 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a380:	f06f 030b 	mvn.w	r3, #11
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d013      	beq.n	800a3c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <netif_get_by_index+0x48>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	e00c      	b.n	800a3c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	79fa      	ldrb	r2, [r7, #7]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d101      	bne.n	800a3bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	e006      	b.n	800a3ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1ef      	bne.n	800a3a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	2000b8b0 	.word	0x2000b8b0

0800a3dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a3e2:	f00a ff9f 	bl	8015324 <sys_arch_protect>
 800a3e6:	6038      	str	r0, [r7, #0]
 800a3e8:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <pbuf_free_ooseq+0x44>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	6838      	ldr	r0, [r7, #0]
 800a3f0:	f00a ffa6 	bl	8015340 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a3f4:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <pbuf_free_ooseq+0x48>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	607b      	str	r3, [r7, #4]
 800a3fa:	e00a      	b.n	800a412 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f002 f971 	bl	800c6ec <tcp_free_ooseq>
      return;
 800a40a:	e005      	b.n	800a418 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f1      	bne.n	800a3fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000b8b8 	.word	0x2000b8b8
 800a424:	2000b8c0 	.word	0x2000b8c0

0800a428 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a430:	f7ff ffd4 	bl	800a3dc <pbuf_free_ooseq>
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a442:	f00a ff6f 	bl	8015324 <sys_arch_protect>
 800a446:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <pbuf_pool_is_empty+0x4c>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a44e:	4b0e      	ldr	r3, [pc, #56]	; (800a488 <pbuf_pool_is_empty+0x4c>)
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f00a ff73 	bl	8015340 <sys_arch_unprotect>

  if (!queued) {
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10f      	bne.n	800a480 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a460:	2100      	movs	r1, #0
 800a462:	480a      	ldr	r0, [pc, #40]	; (800a48c <pbuf_pool_is_empty+0x50>)
 800a464:	f7fe ff5e 	bl	8009324 <tcpip_try_callback>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d008      	beq.n	800a480 <pbuf_pool_is_empty+0x44>
 800a46e:	f00a ff59 	bl	8015324 <sys_arch_protect>
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <pbuf_pool_is_empty+0x4c>)
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f00a ff60 	bl	8015340 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	2000b8b8 	.word	0x2000b8b8
 800a48c:	0800a429 	.word	0x0800a429

0800a490 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4611      	mov	r1, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	460b      	mov	r3, r1
 800a4a0:	80fb      	strh	r3, [r7, #6]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	88fa      	ldrh	r2, [r7, #6]
 800a4b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	88ba      	ldrh	r2, [r7, #4]
 800a4bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a4be:	8b3b      	ldrh	r3, [r7, #24]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7f3a      	ldrb	r2, [r7, #28]
 800a4ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	73da      	strb	r2, [r3, #15]
}
 800a4d8:	bf00      	nop
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08c      	sub	sp, #48	; 0x30
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	80bb      	strh	r3, [r7, #4]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a4fa:	887b      	ldrh	r3, [r7, #2]
 800a4fc:	2b41      	cmp	r3, #65	; 0x41
 800a4fe:	d00b      	beq.n	800a518 <pbuf_alloc+0x34>
 800a500:	2b41      	cmp	r3, #65	; 0x41
 800a502:	dc02      	bgt.n	800a50a <pbuf_alloc+0x26>
 800a504:	2b01      	cmp	r3, #1
 800a506:	d007      	beq.n	800a518 <pbuf_alloc+0x34>
 800a508:	e0c2      	b.n	800a690 <pbuf_alloc+0x1ac>
 800a50a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a50e:	d00b      	beq.n	800a528 <pbuf_alloc+0x44>
 800a510:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a514:	d070      	beq.n	800a5f8 <pbuf_alloc+0x114>
 800a516:	e0bb      	b.n	800a690 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a518:	887a      	ldrh	r2, [r7, #2]
 800a51a:	88bb      	ldrh	r3, [r7, #4]
 800a51c:	4619      	mov	r1, r3
 800a51e:	2000      	movs	r0, #0
 800a520:	f000 f8d2 	bl	800a6c8 <pbuf_alloc_reference>
 800a524:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a526:	e0bd      	b.n	800a6a4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a530:	88bb      	ldrh	r3, [r7, #4]
 800a532:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a534:	200c      	movs	r0, #12
 800a536:	f7ff fc35 	bl	8009da4 <memp_malloc>
 800a53a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800a542:	f7ff ff7b 	bl	800a43c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800a54c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a54e:	f000 faa9 	bl	800aaa4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	e0a7      	b.n	800a6a6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a558:	3303      	adds	r3, #3
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	b29b      	uxth	r3, r3
 800a562:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a566:	b29b      	uxth	r3, r3
 800a568:	8b7a      	ldrh	r2, [r7, #26]
 800a56a:	4293      	cmp	r3, r2
 800a56c:	bf28      	it	cs
 800a56e:	4613      	movcs	r3, r2
 800a570:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a574:	3310      	adds	r3, #16
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4413      	add	r3, r2
 800a57a:	3303      	adds	r3, #3
 800a57c:	f023 0303 	bic.w	r3, r3, #3
 800a580:	4618      	mov	r0, r3
 800a582:	89f9      	ldrh	r1, [r7, #14]
 800a584:	8b7a      	ldrh	r2, [r7, #26]
 800a586:	2300      	movs	r3, #0
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	887b      	ldrh	r3, [r7, #2]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	460b      	mov	r3, r1
 800a590:	4601      	mov	r1, r0
 800a592:	6938      	ldr	r0, [r7, #16]
 800a594:	f7ff ff7c 	bl	800a490 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f003 0303 	and.w	r3, r3, #3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <pbuf_alloc+0xce>
 800a5a4:	4b42      	ldr	r3, [pc, #264]	; (800a6b0 <pbuf_alloc+0x1cc>)
 800a5a6:	f240 1201 	movw	r2, #257	; 0x101
 800a5aa:	4942      	ldr	r1, [pc, #264]	; (800a6b4 <pbuf_alloc+0x1d0>)
 800a5ac:	4842      	ldr	r0, [pc, #264]	; (800a6b8 <pbuf_alloc+0x1d4>)
 800a5ae:	f00a ff1d 	bl	80153ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a5b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5b4:	3303      	adds	r3, #3
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a5be:	d106      	bne.n	800a5ce <pbuf_alloc+0xea>
 800a5c0:	4b3b      	ldr	r3, [pc, #236]	; (800a6b0 <pbuf_alloc+0x1cc>)
 800a5c2:	f240 1203 	movw	r2, #259	; 0x103
 800a5c6:	493d      	ldr	r1, [pc, #244]	; (800a6bc <pbuf_alloc+0x1d8>)
 800a5c8:	483b      	ldr	r0, [pc, #236]	; (800a6b8 <pbuf_alloc+0x1d4>)
 800a5ca:	f00a ff0f 	bl	80153ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d8:	e002      	b.n	800a5e0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a5e4:	8b7a      	ldrh	r2, [r7, #26]
 800a5e6:	89fb      	ldrh	r3, [r7, #14]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a5f0:	8b7b      	ldrh	r3, [r7, #26]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d19e      	bne.n	800a534 <pbuf_alloc+0x50>
      break;
 800a5f6:	e055      	b.n	800a6a4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a5f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5fa:	3303      	adds	r3, #3
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	b29a      	uxth	r2, r3
 800a604:	88bb      	ldrh	r3, [r7, #4]
 800a606:	3303      	adds	r3, #3
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4413      	add	r3, r2
 800a612:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a614:	8b3b      	ldrh	r3, [r7, #24]
 800a616:	3310      	adds	r3, #16
 800a618:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a61a:	8b3a      	ldrh	r2, [r7, #24]
 800a61c:	88bb      	ldrh	r3, [r7, #4]
 800a61e:	3303      	adds	r3, #3
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	429a      	cmp	r2, r3
 800a626:	d306      	bcc.n	800a636 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a628:	8afa      	ldrh	r2, [r7, #22]
 800a62a:	88bb      	ldrh	r3, [r7, #4]
 800a62c:	3303      	adds	r3, #3
 800a62e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a632:	429a      	cmp	r2, r3
 800a634:	d201      	bcs.n	800a63a <pbuf_alloc+0x156>
        return NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	e035      	b.n	800a6a6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a63a:	8afb      	ldrh	r3, [r7, #22]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fa2f 	bl	8009aa0 <mem_malloc>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <pbuf_alloc+0x16a>
        return NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e02b      	b.n	800a6a6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a650:	3310      	adds	r3, #16
 800a652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a654:	4413      	add	r3, r2
 800a656:	3303      	adds	r3, #3
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	4618      	mov	r0, r3
 800a65e:	88b9      	ldrh	r1, [r7, #4]
 800a660:	88ba      	ldrh	r2, [r7, #4]
 800a662:	2300      	movs	r3, #0
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	887b      	ldrh	r3, [r7, #2]
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	460b      	mov	r3, r1
 800a66c:	4601      	mov	r1, r0
 800a66e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a670:	f7ff ff0e 	bl	800a490 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d010      	beq.n	800a6a2 <pbuf_alloc+0x1be>
 800a680:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <pbuf_alloc+0x1cc>)
 800a682:	f240 1223 	movw	r2, #291	; 0x123
 800a686:	490e      	ldr	r1, [pc, #56]	; (800a6c0 <pbuf_alloc+0x1dc>)
 800a688:	480b      	ldr	r0, [pc, #44]	; (800a6b8 <pbuf_alloc+0x1d4>)
 800a68a:	f00a feaf 	bl	80153ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a68e:	e008      	b.n	800a6a2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pbuf_alloc+0x1cc>)
 800a692:	f240 1227 	movw	r2, #295	; 0x127
 800a696:	490b      	ldr	r1, [pc, #44]	; (800a6c4 <pbuf_alloc+0x1e0>)
 800a698:	4807      	ldr	r0, [pc, #28]	; (800a6b8 <pbuf_alloc+0x1d4>)
 800a69a:	f00a fea7 	bl	80153ec <iprintf>
      return NULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e001      	b.n	800a6a6 <pbuf_alloc+0x1c2>
      break;
 800a6a2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3728      	adds	r7, #40	; 0x28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08016938 	.word	0x08016938
 800a6b4:	08016968 	.word	0x08016968
 800a6b8:	08016998 	.word	0x08016998
 800a6bc:	080169c0 	.word	0x080169c0
 800a6c0:	080169f4 	.word	0x080169f4
 800a6c4:	08016a20 	.word	0x08016a20

0800a6c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	807b      	strh	r3, [r7, #2]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a6d8:	883b      	ldrh	r3, [r7, #0]
 800a6da:	2b41      	cmp	r3, #65	; 0x41
 800a6dc:	d009      	beq.n	800a6f2 <pbuf_alloc_reference+0x2a>
 800a6de:	883b      	ldrh	r3, [r7, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d006      	beq.n	800a6f2 <pbuf_alloc_reference+0x2a>
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <pbuf_alloc_reference+0x5c>)
 800a6e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a6ea:	490f      	ldr	r1, [pc, #60]	; (800a728 <pbuf_alloc_reference+0x60>)
 800a6ec:	480f      	ldr	r0, [pc, #60]	; (800a72c <pbuf_alloc_reference+0x64>)
 800a6ee:	f00a fe7d 	bl	80153ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a6f2:	200b      	movs	r0, #11
 800a6f4:	f7ff fb56 	bl	8009da4 <memp_malloc>
 800a6f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a700:	2300      	movs	r3, #0
 800a702:	e00b      	b.n	800a71c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a704:	8879      	ldrh	r1, [r7, #2]
 800a706:	887a      	ldrh	r2, [r7, #2]
 800a708:	2300      	movs	r3, #0
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	883b      	ldrh	r3, [r7, #0]
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	460b      	mov	r3, r1
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7ff febb 	bl	800a490 <pbuf_init_alloced_pbuf>
  return p;
 800a71a:	68fb      	ldr	r3, [r7, #12]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	08016938 	.word	0x08016938
 800a728:	08016a3c 	.word	0x08016a3c
 800a72c:	08016998 	.word	0x08016998

0800a730 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af02      	add	r7, sp, #8
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	460b      	mov	r3, r1
 800a73e:	81bb      	strh	r3, [r7, #12]
 800a740:	4613      	mov	r3, r2
 800a742:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a748:	8a7b      	ldrh	r3, [r7, #18]
 800a74a:	3303      	adds	r3, #3
 800a74c:	f023 0203 	bic.w	r2, r3, #3
 800a750:	89bb      	ldrh	r3, [r7, #12]
 800a752:	441a      	add	r2, r3
 800a754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a756:	429a      	cmp	r2, r3
 800a758:	d901      	bls.n	800a75e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e018      	b.n	800a790 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a764:	8a7b      	ldrh	r3, [r7, #18]
 800a766:	3303      	adds	r3, #3
 800a768:	f023 0303 	bic.w	r3, r3, #3
 800a76c:	6a3a      	ldr	r2, [r7, #32]
 800a76e:	4413      	add	r3, r2
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	e001      	b.n	800a778 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	89b9      	ldrh	r1, [r7, #12]
 800a77c:	89ba      	ldrh	r2, [r7, #12]
 800a77e:	2302      	movs	r3, #2
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	897b      	ldrh	r3, [r7, #10]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	460b      	mov	r3, r1
 800a788:	6979      	ldr	r1, [r7, #20]
 800a78a:	f7ff fe81 	bl	800a490 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a78e:	687b      	ldr	r3, [r7, #4]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <pbuf_realloc+0x20>
 800a7aa:	4b3a      	ldr	r3, [pc, #232]	; (800a894 <pbuf_realloc+0xfc>)
 800a7ac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a7b0:	4939      	ldr	r1, [pc, #228]	; (800a898 <pbuf_realloc+0x100>)
 800a7b2:	483a      	ldr	r0, [pc, #232]	; (800a89c <pbuf_realloc+0x104>)
 800a7b4:	f00a fe1a 	bl	80153ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	891b      	ldrh	r3, [r3, #8]
 800a7bc:	887a      	ldrh	r2, [r7, #2]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d264      	bcs.n	800a88c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	891a      	ldrh	r2, [r3, #8]
 800a7c6:	887b      	ldrh	r3, [r7, #2]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	817b      	strh	r3, [r7, #10]
  q = p;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a7d4:	e018      	b.n	800a808 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	895b      	ldrh	r3, [r3, #10]
 800a7da:	897a      	ldrh	r2, [r7, #10]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	891a      	ldrh	r2, [r3, #8]
 800a7e4:	893b      	ldrh	r3, [r7, #8]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <pbuf_realloc+0x70>
 800a7fa:	4b26      	ldr	r3, [pc, #152]	; (800a894 <pbuf_realloc+0xfc>)
 800a7fc:	f240 12af 	movw	r2, #431	; 0x1af
 800a800:	4927      	ldr	r1, [pc, #156]	; (800a8a0 <pbuf_realloc+0x108>)
 800a802:	4826      	ldr	r0, [pc, #152]	; (800a89c <pbuf_realloc+0x104>)
 800a804:	f00a fdf2 	bl	80153ec <iprintf>
  while (rem_len > q->len) {
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	897a      	ldrh	r2, [r7, #10]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d8e1      	bhi.n	800a7d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	7b1b      	ldrb	r3, [r3, #12]
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d122      	bne.n	800a864 <pbuf_realloc+0xcc>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	895b      	ldrh	r3, [r3, #10]
 800a822:	897a      	ldrh	r2, [r7, #10]
 800a824:	429a      	cmp	r2, r3
 800a826:	d01d      	beq.n	800a864 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	7b5b      	ldrb	r3, [r3, #13]
 800a82c:	f003 0302 	and.w	r3, r3, #2
 800a830:	2b00      	cmp	r3, #0
 800a832:	d117      	bne.n	800a864 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	461a      	mov	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	b29a      	uxth	r2, r3
 800a840:	897b      	ldrh	r3, [r7, #10]
 800a842:	4413      	add	r3, r2
 800a844:	b29b      	uxth	r3, r3
 800a846:	4619      	mov	r1, r3
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7ff f81f 	bl	800988c <mem_trim>
 800a84e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <pbuf_realloc+0xcc>
 800a856:	4b0f      	ldr	r3, [pc, #60]	; (800a894 <pbuf_realloc+0xfc>)
 800a858:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a85c:	4911      	ldr	r1, [pc, #68]	; (800a8a4 <pbuf_realloc+0x10c>)
 800a85e:	480f      	ldr	r0, [pc, #60]	; (800a89c <pbuf_realloc+0x104>)
 800a860:	f00a fdc4 	bl	80153ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	897a      	ldrh	r2, [r7, #10]
 800a868:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	895a      	ldrh	r2, [r3, #10]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f910 	bl	800aaa4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e000      	b.n	800a88e <pbuf_realloc+0xf6>
    return;
 800a88c:	bf00      	nop

}
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08016938 	.word	0x08016938
 800a898:	08016a50 	.word	0x08016a50
 800a89c:	08016998 	.word	0x08016998
 800a8a0:	08016a68 	.word	0x08016a68
 800a8a4:	08016a80 	.word	0x08016a80

0800a8a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <pbuf_add_header_impl+0x22>
 800a8bc:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <pbuf_add_header_impl+0xc4>)
 800a8be:	f240 12df 	movw	r2, #479	; 0x1df
 800a8c2:	492b      	ldr	r1, [pc, #172]	; (800a970 <pbuf_add_header_impl+0xc8>)
 800a8c4:	482b      	ldr	r0, [pc, #172]	; (800a974 <pbuf_add_header_impl+0xcc>)
 800a8c6:	f00a fd91 	bl	80153ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <pbuf_add_header_impl+0x30>
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d301      	bcc.n	800a8dc <pbuf_add_header_impl+0x34>
    return 1;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e043      	b.n	800a964 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <pbuf_add_header_impl+0x3e>
    return 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e03e      	b.n	800a964 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	891a      	ldrh	r2, [r3, #8]
 800a8ee:	8a7b      	ldrh	r3, [r7, #18]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	8a7a      	ldrh	r2, [r7, #18]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d901      	bls.n	800a8fe <pbuf_add_header_impl+0x56>
    return 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e032      	b.n	800a964 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7b1b      	ldrb	r3, [r3, #12]
 800a902:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a904:	8a3b      	ldrh	r3, [r7, #16]
 800a906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	425b      	negs	r3, r3
 800a916:	4413      	add	r3, r2
 800a918:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3310      	adds	r3, #16
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	429a      	cmp	r2, r3
 800a922:	d20d      	bcs.n	800a940 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a924:	2301      	movs	r3, #1
 800a926:	e01d      	b.n	800a964 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	425b      	negs	r3, r3
 800a936:	4413      	add	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
 800a93a:	e001      	b.n	800a940 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e011      	b.n	800a964 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	895a      	ldrh	r2, [r3, #10]
 800a94a:	8a7b      	ldrh	r3, [r7, #18]
 800a94c:	4413      	add	r3, r2
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	891a      	ldrh	r2, [r3, #8]
 800a958:	8a7b      	ldrh	r3, [r7, #18]
 800a95a:	4413      	add	r3, r2
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	811a      	strh	r2, [r3, #8]


  return 0;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08016938 	.word	0x08016938
 800a970:	08016a9c 	.word	0x08016a9c
 800a974:	08016998 	.word	0x08016998

0800a978 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a982:	2200      	movs	r2, #0
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff ff8e 	bl	800a8a8 <pbuf_add_header_impl>
 800a98c:	4603      	mov	r3, r0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <pbuf_remove_header+0x1e>
 800a9a8:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <pbuf_remove_header+0x94>)
 800a9aa:	f240 224b 	movw	r2, #587	; 0x24b
 800a9ae:	4920      	ldr	r1, [pc, #128]	; (800aa30 <pbuf_remove_header+0x98>)
 800a9b0:	4820      	ldr	r0, [pc, #128]	; (800aa34 <pbuf_remove_header+0x9c>)
 800a9b2:	f00a fd1b 	bl	80153ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <pbuf_remove_header+0x2c>
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9c2:	d301      	bcc.n	800a9c8 <pbuf_remove_header+0x30>
    return 1;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e02c      	b.n	800aa22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <pbuf_remove_header+0x3a>
    return 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e027      	b.n	800aa22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	895b      	ldrh	r3, [r3, #10]
 800a9da:	89fa      	ldrh	r2, [r7, #14]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d908      	bls.n	800a9f2 <pbuf_remove_header+0x5a>
 800a9e0:	4b12      	ldr	r3, [pc, #72]	; (800aa2c <pbuf_remove_header+0x94>)
 800a9e2:	f240 2255 	movw	r2, #597	; 0x255
 800a9e6:	4914      	ldr	r1, [pc, #80]	; (800aa38 <pbuf_remove_header+0xa0>)
 800a9e8:	4812      	ldr	r0, [pc, #72]	; (800aa34 <pbuf_remove_header+0x9c>)
 800a9ea:	f00a fcff 	bl	80153ec <iprintf>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e017      	b.n	800aa22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	441a      	add	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	895a      	ldrh	r2, [r3, #10]
 800aa08:	89fb      	ldrh	r3, [r7, #14]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	891a      	ldrh	r2, [r3, #8]
 800aa16:	89fb      	ldrh	r3, [r7, #14]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	08016938 	.word	0x08016938
 800aa30:	08016a9c 	.word	0x08016a9c
 800aa34:	08016998 	.word	0x08016998
 800aa38:	08016aa8 	.word	0x08016aa8

0800aa3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	807b      	strh	r3, [r7, #2]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aa4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da08      	bge.n	800aa66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aa54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa58:	425b      	negs	r3, r3
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff ff9b 	bl	800a998 <pbuf_remove_header>
 800aa62:	4603      	mov	r3, r0
 800aa64:	e007      	b.n	800aa76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aa66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa6a:	787a      	ldrb	r2, [r7, #1]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff ff1a 	bl	800a8a8 <pbuf_add_header_impl>
 800aa74:	4603      	mov	r3, r0
  }
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800aa8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff ffd2 	bl	800aa3c <pbuf_header_impl>
 800aa98:	4603      	mov	r3, r0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10b      	bne.n	800aaca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d106      	bne.n	800aac6 <pbuf_free+0x22>
 800aab8:	4b3b      	ldr	r3, [pc, #236]	; (800aba8 <pbuf_free+0x104>)
 800aaba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800aabe:	493b      	ldr	r1, [pc, #236]	; (800abac <pbuf_free+0x108>)
 800aac0:	483b      	ldr	r0, [pc, #236]	; (800abb0 <pbuf_free+0x10c>)
 800aac2:	f00a fc93 	bl	80153ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e069      	b.n	800ab9e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800aace:	e062      	b.n	800ab96 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800aad0:	f00a fc28 	bl	8015324 <sys_arch_protect>
 800aad4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7b9b      	ldrb	r3, [r3, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <pbuf_free+0x48>
 800aade:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <pbuf_free+0x104>)
 800aae0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800aae4:	4933      	ldr	r1, [pc, #204]	; (800abb4 <pbuf_free+0x110>)
 800aae6:	4832      	ldr	r0, [pc, #200]	; (800abb0 <pbuf_free+0x10c>)
 800aae8:	f00a fc80 	bl	80153ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7b9b      	ldrb	r3, [r3, #14]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	739a      	strb	r2, [r3, #14]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7b9b      	ldrb	r3, [r3, #14]
 800aafc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800aafe:	69b8      	ldr	r0, [r7, #24]
 800ab00:	f00a fc1e 	bl	8015340 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d143      	bne.n	800ab92 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	7b1b      	ldrb	r3, [r3, #12]
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7b5b      	ldrb	r3, [r3, #13]
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d011      	beq.n	800ab4a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <pbuf_free+0x9c>
 800ab32:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <pbuf_free+0x104>)
 800ab34:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ab38:	491f      	ldr	r1, [pc, #124]	; (800abb8 <pbuf_free+0x114>)
 800ab3a:	481d      	ldr	r0, [pc, #116]	; (800abb0 <pbuf_free+0x10c>)
 800ab3c:	f00a fc56 	bl	80153ec <iprintf>
        pc->custom_free_function(p);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
 800ab48:	e01d      	b.n	800ab86 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d104      	bne.n	800ab5a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	200c      	movs	r0, #12
 800ab54:	f7ff f978 	bl	8009e48 <memp_free>
 800ab58:	e015      	b.n	800ab86 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d104      	bne.n	800ab6a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	200b      	movs	r0, #11
 800ab64:	f7ff f970 	bl	8009e48 <memp_free>
 800ab68:	e00d      	b.n	800ab86 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d103      	bne.n	800ab78 <pbuf_free+0xd4>
          mem_free(p);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7fe fdfb 	bl	800976c <mem_free>
 800ab76:	e006      	b.n	800ab86 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ab78:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <pbuf_free+0x104>)
 800ab7a:	f240 320f 	movw	r2, #783	; 0x30f
 800ab7e:	490f      	ldr	r1, [pc, #60]	; (800abbc <pbuf_free+0x118>)
 800ab80:	480b      	ldr	r0, [pc, #44]	; (800abb0 <pbuf_free+0x10c>)
 800ab82:	f00a fc33 	bl	80153ec <iprintf>
        }
      }
      count++;
 800ab86:	7ffb      	ldrb	r3, [r7, #31]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	607b      	str	r3, [r7, #4]
 800ab90:	e001      	b.n	800ab96 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d199      	bne.n	800aad0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ab9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3720      	adds	r7, #32
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	08016938 	.word	0x08016938
 800abac:	08016a9c 	.word	0x08016a9c
 800abb0:	08016998 	.word	0x08016998
 800abb4:	08016ac8 	.word	0x08016ac8
 800abb8:	08016ae0 	.word	0x08016ae0
 800abbc:	08016b04 	.word	0x08016b04

0800abc0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800abcc:	e005      	b.n	800abda <pbuf_clen+0x1a>
    ++len;
 800abce:	89fb      	ldrh	r3, [r7, #14]
 800abd0:	3301      	adds	r3, #1
 800abd2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f6      	bne.n	800abce <pbuf_clen+0xe>
  }
  return len;
 800abe0:	89fb      	ldrh	r3, [r7, #14]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
	...

0800abf0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d016      	beq.n	800ac2c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800abfe:	f00a fb91 	bl	8015324 <sys_arch_protect>
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7b9b      	ldrb	r3, [r3, #14]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	739a      	strb	r2, [r3, #14]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f00a fb95 	bl	8015340 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	7b9b      	ldrb	r3, [r3, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d106      	bne.n	800ac2c <pbuf_ref+0x3c>
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <pbuf_ref+0x44>)
 800ac20:	f240 3242 	movw	r2, #834	; 0x342
 800ac24:	4904      	ldr	r1, [pc, #16]	; (800ac38 <pbuf_ref+0x48>)
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <pbuf_ref+0x4c>)
 800ac28:	f00a fbe0 	bl	80153ec <iprintf>
  }
}
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	08016938 	.word	0x08016938
 800ac38:	08016b18 	.word	0x08016b18
 800ac3c:	08016998 	.word	0x08016998

0800ac40 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <pbuf_cat+0x16>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d107      	bne.n	800ac66 <pbuf_cat+0x26>
 800ac56:	4b20      	ldr	r3, [pc, #128]	; (800acd8 <pbuf_cat+0x98>)
 800ac58:	f240 325a 	movw	r2, #858	; 0x35a
 800ac5c:	491f      	ldr	r1, [pc, #124]	; (800acdc <pbuf_cat+0x9c>)
 800ac5e:	4820      	ldr	r0, [pc, #128]	; (800ace0 <pbuf_cat+0xa0>)
 800ac60:	f00a fbc4 	bl	80153ec <iprintf>
 800ac64:	e034      	b.n	800acd0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	e00a      	b.n	800ac82 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	891a      	ldrh	r2, [r3, #8]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	891b      	ldrh	r3, [r3, #8]
 800ac74:	4413      	add	r3, r2
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1f0      	bne.n	800ac6c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	891a      	ldrh	r2, [r3, #8]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	895b      	ldrh	r3, [r3, #10]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d006      	beq.n	800aca4 <pbuf_cat+0x64>
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <pbuf_cat+0x98>)
 800ac98:	f240 3262 	movw	r2, #866	; 0x362
 800ac9c:	4911      	ldr	r1, [pc, #68]	; (800ace4 <pbuf_cat+0xa4>)
 800ac9e:	4810      	ldr	r0, [pc, #64]	; (800ace0 <pbuf_cat+0xa0>)
 800aca0:	f00a fba4 	bl	80153ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d006      	beq.n	800acba <pbuf_cat+0x7a>
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <pbuf_cat+0x98>)
 800acae:	f240 3263 	movw	r2, #867	; 0x363
 800acb2:	490d      	ldr	r1, [pc, #52]	; (800ace8 <pbuf_cat+0xa8>)
 800acb4:	480a      	ldr	r0, [pc, #40]	; (800ace0 <pbuf_cat+0xa0>)
 800acb6:	f00a fb99 	bl	80153ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	891a      	ldrh	r2, [r3, #8]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	891b      	ldrh	r3, [r3, #8]
 800acc2:	4413      	add	r3, r2
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08016938 	.word	0x08016938
 800acdc:	08016b2c 	.word	0x08016b2c
 800ace0:	08016998 	.word	0x08016998
 800ace4:	08016b64 	.word	0x08016b64
 800ace8:	08016b94 	.word	0x08016b94

0800acec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7ff ffa1 	bl	800ac40 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800acfe:	6838      	ldr	r0, [r7, #0]
 800ad00:	f7ff ff76 	bl	800abf0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d008      	beq.n	800ad36 <pbuf_copy+0x2a>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <pbuf_copy+0x2a>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	891a      	ldrh	r2, [r3, #8]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	891b      	ldrh	r3, [r3, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d209      	bcs.n	800ad4a <pbuf_copy+0x3e>
 800ad36:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <pbuf_copy+0x188>)
 800ad38:	f240 32ca 	movw	r2, #970	; 0x3ca
 800ad3c:	4956      	ldr	r1, [pc, #344]	; (800ae98 <pbuf_copy+0x18c>)
 800ad3e:	4857      	ldr	r0, [pc, #348]	; (800ae9c <pbuf_copy+0x190>)
 800ad40:	f00a fb54 	bl	80153ec <iprintf>
 800ad44:	f06f 030f 	mvn.w	r3, #15
 800ad48:	e09f      	b.n	800ae8a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	895b      	ldrh	r3, [r3, #10]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	1ad2      	subs	r2, r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	895b      	ldrh	r3, [r3, #10]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	1acb      	subs	r3, r1, r3
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d306      	bcc.n	800ad70 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	895b      	ldrh	r3, [r3, #10]
 800ad66:	461a      	mov	r2, r3
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	e005      	b.n	800ad7c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	461a      	mov	r2, r3
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	18d0      	adds	r0, r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	f00a fb19 	bl	80153c6 <memcpy>
    offset_to += len;
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4413      	add	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	895b      	ldrh	r3, [r3, #10]
 800ada8:	461a      	mov	r2, r3
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	4293      	cmp	r3, r2
 800adae:	d906      	bls.n	800adbe <pbuf_copy+0xb2>
 800adb0:	4b38      	ldr	r3, [pc, #224]	; (800ae94 <pbuf_copy+0x188>)
 800adb2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800adb6:	493a      	ldr	r1, [pc, #232]	; (800aea0 <pbuf_copy+0x194>)
 800adb8:	4838      	ldr	r0, [pc, #224]	; (800ae9c <pbuf_copy+0x190>)
 800adba:	f00a fb17 	bl	80153ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	895b      	ldrh	r3, [r3, #10]
 800adc2:	461a      	mov	r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d906      	bls.n	800add8 <pbuf_copy+0xcc>
 800adca:	4b32      	ldr	r3, [pc, #200]	; (800ae94 <pbuf_copy+0x188>)
 800adcc:	f240 32da 	movw	r2, #986	; 0x3da
 800add0:	4934      	ldr	r1, [pc, #208]	; (800aea4 <pbuf_copy+0x198>)
 800add2:	4832      	ldr	r0, [pc, #200]	; (800ae9c <pbuf_copy+0x190>)
 800add4:	f00a fb0a 	bl	80153ec <iprintf>
    if (offset_from >= p_from->len) {
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	895b      	ldrh	r3, [r3, #10]
 800addc:	461a      	mov	r2, r3
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d304      	bcc.n	800adee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	895b      	ldrh	r3, [r3, #10]
 800adf2:	461a      	mov	r2, r3
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d114      	bne.n	800ae24 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10c      	bne.n	800ae24 <pbuf_copy+0x118>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d009      	beq.n	800ae24 <pbuf_copy+0x118>
 800ae10:	4b20      	ldr	r3, [pc, #128]	; (800ae94 <pbuf_copy+0x188>)
 800ae12:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ae16:	4924      	ldr	r1, [pc, #144]	; (800aea8 <pbuf_copy+0x19c>)
 800ae18:	4820      	ldr	r0, [pc, #128]	; (800ae9c <pbuf_copy+0x190>)
 800ae1a:	f00a fae7 	bl	80153ec <iprintf>
 800ae1e:	f06f 030f 	mvn.w	r3, #15
 800ae22:	e032      	b.n	800ae8a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d013      	beq.n	800ae52 <pbuf_copy+0x146>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	895a      	ldrh	r2, [r3, #10]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	891b      	ldrh	r3, [r3, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d10d      	bne.n	800ae52 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <pbuf_copy+0x146>
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <pbuf_copy+0x188>)
 800ae40:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800ae44:	4919      	ldr	r1, [pc, #100]	; (800aeac <pbuf_copy+0x1a0>)
 800ae46:	4815      	ldr	r0, [pc, #84]	; (800ae9c <pbuf_copy+0x190>)
 800ae48:	f00a fad0 	bl	80153ec <iprintf>
 800ae4c:	f06f 0305 	mvn.w	r3, #5
 800ae50:	e01b      	b.n	800ae8a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d013      	beq.n	800ae80 <pbuf_copy+0x174>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	895a      	ldrh	r2, [r3, #10]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d10d      	bne.n	800ae80 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <pbuf_copy+0x174>
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <pbuf_copy+0x188>)
 800ae6e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ae72:	490e      	ldr	r1, [pc, #56]	; (800aeac <pbuf_copy+0x1a0>)
 800ae74:	4809      	ldr	r0, [pc, #36]	; (800ae9c <pbuf_copy+0x190>)
 800ae76:	f00a fab9 	bl	80153ec <iprintf>
 800ae7a:	f06f 0305 	mvn.w	r3, #5
 800ae7e:	e004      	b.n	800ae8a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f47f af61 	bne.w	800ad4a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	08016938 	.word	0x08016938
 800ae98:	08016be0 	.word	0x08016be0
 800ae9c:	08016998 	.word	0x08016998
 800aea0:	08016c10 	.word	0x08016c10
 800aea4:	08016c28 	.word	0x08016c28
 800aea8:	08016c44 	.word	0x08016c44
 800aeac:	08016c54 	.word	0x08016c54

0800aeb0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4611      	mov	r1, r2
 800aebc:	461a      	mov	r2, r3
 800aebe:	460b      	mov	r3, r1
 800aec0:	80fb      	strh	r3, [r7, #6]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d108      	bne.n	800aee6 <pbuf_copy_partial+0x36>
 800aed4:	4b2b      	ldr	r3, [pc, #172]	; (800af84 <pbuf_copy_partial+0xd4>)
 800aed6:	f240 420a 	movw	r2, #1034	; 0x40a
 800aeda:	492b      	ldr	r1, [pc, #172]	; (800af88 <pbuf_copy_partial+0xd8>)
 800aedc:	482b      	ldr	r0, [pc, #172]	; (800af8c <pbuf_copy_partial+0xdc>)
 800aede:	f00a fa85 	bl	80153ec <iprintf>
 800aee2:	2300      	movs	r3, #0
 800aee4:	e04a      	b.n	800af7c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d108      	bne.n	800aefe <pbuf_copy_partial+0x4e>
 800aeec:	4b25      	ldr	r3, [pc, #148]	; (800af84 <pbuf_copy_partial+0xd4>)
 800aeee:	f240 420b 	movw	r2, #1035	; 0x40b
 800aef2:	4927      	ldr	r1, [pc, #156]	; (800af90 <pbuf_copy_partial+0xe0>)
 800aef4:	4825      	ldr	r0, [pc, #148]	; (800af8c <pbuf_copy_partial+0xdc>)
 800aef6:	f00a fa79 	bl	80153ec <iprintf>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e03e      	b.n	800af7c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	e034      	b.n	800af6e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800af04:	88bb      	ldrh	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <pbuf_copy_partial+0x70>
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	895b      	ldrh	r3, [r3, #10]
 800af0e:	88ba      	ldrh	r2, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d305      	bcc.n	800af20 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	895b      	ldrh	r3, [r3, #10]
 800af18:	88ba      	ldrh	r2, [r7, #4]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	80bb      	strh	r3, [r7, #4]
 800af1e:	e023      	b.n	800af68 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	895a      	ldrh	r2, [r3, #10]
 800af24:	88bb      	ldrh	r3, [r7, #4]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800af2a:	8b3a      	ldrh	r2, [r7, #24]
 800af2c:	88fb      	ldrh	r3, [r7, #6]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d901      	bls.n	800af36 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800af36:	8b7b      	ldrh	r3, [r7, #26]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	18d0      	adds	r0, r2, r3
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	88bb      	ldrh	r3, [r7, #4]
 800af42:	4413      	add	r3, r2
 800af44:	8b3a      	ldrh	r2, [r7, #24]
 800af46:	4619      	mov	r1, r3
 800af48:	f00a fa3d 	bl	80153c6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800af4c:	8afa      	ldrh	r2, [r7, #22]
 800af4e:	8b3b      	ldrh	r3, [r7, #24]
 800af50:	4413      	add	r3, r2
 800af52:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800af54:	8b7a      	ldrh	r2, [r7, #26]
 800af56:	8b3b      	ldrh	r3, [r7, #24]
 800af58:	4413      	add	r3, r2
 800af5a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800af5c:	88fa      	ldrh	r2, [r7, #6]
 800af5e:	8b3b      	ldrh	r3, [r7, #24]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <pbuf_copy_partial+0xca>
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1c4      	bne.n	800af04 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800af7a:	8afb      	ldrh	r3, [r7, #22]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	08016938 	.word	0x08016938
 800af88:	08016c80 	.word	0x08016c80
 800af8c:	08016998 	.word	0x08016998
 800af90:	08016ca0 	.word	0x08016ca0

0800af94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	603a      	str	r2, [r7, #0]
 800af9e:	71fb      	strb	r3, [r7, #7]
 800afa0:	460b      	mov	r3, r1
 800afa2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	8919      	ldrh	r1, [r3, #8]
 800afa8:	88ba      	ldrh	r2, [r7, #4]
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff fa99 	bl	800a4e4 <pbuf_alloc>
 800afb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <pbuf_clone+0x2a>
    return NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	e011      	b.n	800afe2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff fea3 	bl	800ad0c <pbuf_copy>
 800afc6:	4603      	mov	r3, r0
 800afc8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800afca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <pbuf_clone+0x4c>
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <pbuf_clone+0x58>)
 800afd4:	f240 5224 	movw	r2, #1316	; 0x524
 800afd8:	4905      	ldr	r1, [pc, #20]	; (800aff0 <pbuf_clone+0x5c>)
 800afda:	4806      	ldr	r0, [pc, #24]	; (800aff4 <pbuf_clone+0x60>)
 800afdc:	f00a fa06 	bl	80153ec <iprintf>
  return q;
 800afe0:	68fb      	ldr	r3, [r7, #12]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	08016938 	.word	0x08016938
 800aff0:	08016dac 	.word	0x08016dac
 800aff4:	08016998 	.word	0x08016998

0800aff8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800affc:	f00a fa0e 	bl	801541c <rand>
 800b000:	4603      	mov	r3, r0
 800b002:	b29b      	uxth	r3, r3
 800b004:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b00e:	b29a      	uxth	r2, r3
 800b010:	4b01      	ldr	r3, [pc, #4]	; (800b018 <tcp_init+0x20>)
 800b012:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b014:	bf00      	nop
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20000010 	.word	0x20000010

0800b01c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7d1b      	ldrb	r3, [r3, #20]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d105      	bne.n	800b038 <tcp_free+0x1c>
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <tcp_free+0x2c>)
 800b02e:	22d4      	movs	r2, #212	; 0xd4
 800b030:	4906      	ldr	r1, [pc, #24]	; (800b04c <tcp_free+0x30>)
 800b032:	4807      	ldr	r0, [pc, #28]	; (800b050 <tcp_free+0x34>)
 800b034:	f00a f9da 	bl	80153ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	2001      	movs	r0, #1
 800b03c:	f7fe ff04 	bl	8009e48 <memp_free>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	08016e38 	.word	0x08016e38
 800b04c:	08016e68 	.word	0x08016e68
 800b050:	08016e7c 	.word	0x08016e7c

0800b054 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7d1b      	ldrb	r3, [r3, #20]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d105      	bne.n	800b070 <tcp_free_listen+0x1c>
 800b064:	4b06      	ldr	r3, [pc, #24]	; (800b080 <tcp_free_listen+0x2c>)
 800b066:	22df      	movs	r2, #223	; 0xdf
 800b068:	4906      	ldr	r1, [pc, #24]	; (800b084 <tcp_free_listen+0x30>)
 800b06a:	4807      	ldr	r0, [pc, #28]	; (800b088 <tcp_free_listen+0x34>)
 800b06c:	f00a f9be 	bl	80153ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	2002      	movs	r0, #2
 800b074:	f7fe fee8 	bl	8009e48 <memp_free>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08016e38 	.word	0x08016e38
 800b084:	08016ea4 	.word	0x08016ea4
 800b088:	08016e7c 	.word	0x08016e7c

0800b08c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b090:	f000 fe98 	bl	800bdc4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b094:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <tcp_tmr+0x28>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <tcp_tmr+0x28>)
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <tcp_tmr+0x28>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b0ac:	f000 fb4c 	bl	800b748 <tcp_slowtmr>
  }
}
 800b0b0:	bf00      	nop
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20004a01 	.word	0x20004a01

0800b0b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <tcp_remove_listener+0x1c>
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <tcp_remove_listener+0x48>)
 800b0ca:	22ff      	movs	r2, #255	; 0xff
 800b0cc:	490d      	ldr	r1, [pc, #52]	; (800b104 <tcp_remove_listener+0x4c>)
 800b0ce:	480e      	ldr	r0, [pc, #56]	; (800b108 <tcp_remove_listener+0x50>)
 800b0d0:	f00a f98c 	bl	80153ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e00a      	b.n	800b0f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d102      	bne.n	800b0ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1f1      	bne.n	800b0da <tcp_remove_listener+0x22>
    }
  }
}
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	08016e38 	.word	0x08016e38
 800b104:	08016ec0 	.word	0x08016ec0
 800b108:	08016e7c 	.word	0x08016e7c

0800b10c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <tcp_listen_closed+0x1c>
 800b11a:	4b14      	ldr	r3, [pc, #80]	; (800b16c <tcp_listen_closed+0x60>)
 800b11c:	f240 1211 	movw	r2, #273	; 0x111
 800b120:	4913      	ldr	r1, [pc, #76]	; (800b170 <tcp_listen_closed+0x64>)
 800b122:	4814      	ldr	r0, [pc, #80]	; (800b174 <tcp_listen_closed+0x68>)
 800b124:	f00a f962 	bl	80153ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7d1b      	ldrb	r3, [r3, #20]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d006      	beq.n	800b13e <tcp_listen_closed+0x32>
 800b130:	4b0e      	ldr	r3, [pc, #56]	; (800b16c <tcp_listen_closed+0x60>)
 800b132:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b136:	4910      	ldr	r1, [pc, #64]	; (800b178 <tcp_listen_closed+0x6c>)
 800b138:	480e      	ldr	r0, [pc, #56]	; (800b174 <tcp_listen_closed+0x68>)
 800b13a:	f00a f957 	bl	80153ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b13e:	2301      	movs	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e00b      	b.n	800b15c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <tcp_listen_closed+0x70>)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff ffb1 	bl	800b0b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3301      	adds	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d9f0      	bls.n	800b144 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b162:	bf00      	nop
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08016e38 	.word	0x08016e38
 800b170:	08016ee8 	.word	0x08016ee8
 800b174:	08016e7c 	.word	0x08016e7c
 800b178:	08016ef4 	.word	0x08016ef4
 800b17c:	08019210 	.word	0x08019210

0800b180 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b180:	b5b0      	push	{r4, r5, r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af04      	add	r7, sp, #16
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <tcp_close_shutdown+0x20>
 800b192:	4b61      	ldr	r3, [pc, #388]	; (800b318 <tcp_close_shutdown+0x198>)
 800b194:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b198:	4960      	ldr	r1, [pc, #384]	; (800b31c <tcp_close_shutdown+0x19c>)
 800b19a:	4861      	ldr	r0, [pc, #388]	; (800b320 <tcp_close_shutdown+0x1a0>)
 800b19c:	f00a f926 	bl	80153ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d066      	beq.n	800b274 <tcp_close_shutdown+0xf4>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7d1b      	ldrb	r3, [r3, #20]
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d003      	beq.n	800b1b6 <tcp_close_shutdown+0x36>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7d1b      	ldrb	r3, [r3, #20]
 800b1b2:	2b07      	cmp	r3, #7
 800b1b4:	d15e      	bne.n	800b274 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d104      	bne.n	800b1c8 <tcp_close_shutdown+0x48>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1c6:	d055      	beq.n	800b274 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	8b5b      	ldrh	r3, [r3, #26]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <tcp_close_shutdown+0x62>
 800b1d4:	4b50      	ldr	r3, [pc, #320]	; (800b318 <tcp_close_shutdown+0x198>)
 800b1d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b1da:	4952      	ldr	r1, [pc, #328]	; (800b324 <tcp_close_shutdown+0x1a4>)
 800b1dc:	4850      	ldr	r0, [pc, #320]	; (800b320 <tcp_close_shutdown+0x1a0>)
 800b1de:	f00a f905 	bl	80153ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b1ea:	687d      	ldr	r5, [r7, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	8ad2      	ldrh	r2, [r2, #22]
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	8b09      	ldrh	r1, [r1, #24]
 800b1f8:	9102      	str	r1, [sp, #8]
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	462b      	mov	r3, r5
 800b200:	4622      	mov	r2, r4
 800b202:	4601      	mov	r1, r0
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f004 fe91 	bl	800ff2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f8ba 	bl	800c384 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b210:	4b45      	ldr	r3, [pc, #276]	; (800b328 <tcp_close_shutdown+0x1a8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d105      	bne.n	800b226 <tcp_close_shutdown+0xa6>
 800b21a:	4b43      	ldr	r3, [pc, #268]	; (800b328 <tcp_close_shutdown+0x1a8>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4a41      	ldr	r2, [pc, #260]	; (800b328 <tcp_close_shutdown+0x1a8>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	e013      	b.n	800b24e <tcp_close_shutdown+0xce>
 800b226:	4b40      	ldr	r3, [pc, #256]	; (800b328 <tcp_close_shutdown+0x1a8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e00c      	b.n	800b248 <tcp_close_shutdown+0xc8>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	d104      	bne.n	800b242 <tcp_close_shutdown+0xc2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	60da      	str	r2, [r3, #12]
 800b240:	e005      	b.n	800b24e <tcp_close_shutdown+0xce>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1ef      	bne.n	800b22e <tcp_close_shutdown+0xae>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	60da      	str	r2, [r3, #12]
 800b254:	4b35      	ldr	r3, [pc, #212]	; (800b32c <tcp_close_shutdown+0x1ac>)
 800b256:	2201      	movs	r2, #1
 800b258:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b25a:	4b35      	ldr	r3, [pc, #212]	; (800b330 <tcp_close_shutdown+0x1b0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d102      	bne.n	800b26a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b264:	f003 fd4c 	bl	800ed00 <tcp_trigger_input_pcb_close>
 800b268:	e002      	b.n	800b270 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff fed6 	bl	800b01c <tcp_free>
      }
      return ERR_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	e04d      	b.n	800b310 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d02d      	beq.n	800b2d8 <tcp_close_shutdown+0x158>
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d036      	beq.n	800b2ee <tcp_close_shutdown+0x16e>
 800b280:	2b00      	cmp	r3, #0
 800b282:	d13f      	bne.n	800b304 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	8adb      	ldrh	r3, [r3, #22]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d021      	beq.n	800b2d0 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b28c:	4b29      	ldr	r3, [pc, #164]	; (800b334 <tcp_close_shutdown+0x1b4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	429a      	cmp	r2, r3
 800b294:	d105      	bne.n	800b2a2 <tcp_close_shutdown+0x122>
 800b296:	4b27      	ldr	r3, [pc, #156]	; (800b334 <tcp_close_shutdown+0x1b4>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4a25      	ldr	r2, [pc, #148]	; (800b334 <tcp_close_shutdown+0x1b4>)
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	e013      	b.n	800b2ca <tcp_close_shutdown+0x14a>
 800b2a2:	4b24      	ldr	r3, [pc, #144]	; (800b334 <tcp_close_shutdown+0x1b4>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60bb      	str	r3, [r7, #8]
 800b2a8:	e00c      	b.n	800b2c4 <tcp_close_shutdown+0x144>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d104      	bne.n	800b2be <tcp_close_shutdown+0x13e>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	60da      	str	r2, [r3, #12]
 800b2bc:	e005      	b.n	800b2ca <tcp_close_shutdown+0x14a>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	60bb      	str	r3, [r7, #8]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1ef      	bne.n	800b2aa <tcp_close_shutdown+0x12a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff fea3 	bl	800b01c <tcp_free>
      break;
 800b2d6:	e01a      	b.n	800b30e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff ff17 	bl	800b10c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4815      	ldr	r0, [pc, #84]	; (800b338 <tcp_close_shutdown+0x1b8>)
 800b2e2:	f001 f89f 	bl	800c424 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff feb4 	bl	800b054 <tcp_free_listen>
      break;
 800b2ec:	e00f      	b.n	800b30e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	480d      	ldr	r0, [pc, #52]	; (800b328 <tcp_close_shutdown+0x1a8>)
 800b2f2:	f001 f897 	bl	800c424 <tcp_pcb_remove>
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <tcp_close_shutdown+0x1ac>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff fe8d 	bl	800b01c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b302:	e004      	b.n	800b30e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f819 	bl	800b33c <tcp_close_shutdown_fin>
 800b30a:	4603      	mov	r3, r0
 800b30c:	e000      	b.n	800b310 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bdb0      	pop	{r4, r5, r7, pc}
 800b318:	08016e38 	.word	0x08016e38
 800b31c:	08016f0c 	.word	0x08016f0c
 800b320:	08016e7c 	.word	0x08016e7c
 800b324:	08016f2c 	.word	0x08016f2c
 800b328:	2000b8c0 	.word	0x2000b8c0
 800b32c:	2000b8bc 	.word	0x2000b8bc
 800b330:	2000b8d4 	.word	0x2000b8d4
 800b334:	2000b8cc 	.word	0x2000b8cc
 800b338:	2000b8c8 	.word	0x2000b8c8

0800b33c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <tcp_close_shutdown_fin+0x1c>
 800b34a:	4b2c      	ldr	r3, [pc, #176]	; (800b3fc <tcp_close_shutdown_fin+0xc0>)
 800b34c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b350:	492b      	ldr	r1, [pc, #172]	; (800b400 <tcp_close_shutdown_fin+0xc4>)
 800b352:	482c      	ldr	r0, [pc, #176]	; (800b404 <tcp_close_shutdown_fin+0xc8>)
 800b354:	f00a f84a 	bl	80153ec <iprintf>

  switch (pcb->state) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d010      	beq.n	800b382 <tcp_close_shutdown_fin+0x46>
 800b360:	2b07      	cmp	r3, #7
 800b362:	d01b      	beq.n	800b39c <tcp_close_shutdown_fin+0x60>
 800b364:	2b03      	cmp	r3, #3
 800b366:	d126      	bne.n	800b3b6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f003 fedb 	bl	800f124 <tcp_send_fin>
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d11f      	bne.n	800b3ba <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2205      	movs	r2, #5
 800b37e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b380:	e01b      	b.n	800b3ba <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f003 fece 	bl	800f124 <tcp_send_fin>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d114      	bne.n	800b3be <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2205      	movs	r2, #5
 800b398:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b39a:	e010      	b.n	800b3be <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f003 fec1 	bl	800f124 <tcp_send_fin>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2209      	movs	r2, #9
 800b3b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b3b4:	e005      	b.n	800b3c2 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e01c      	b.n	800b3f4 <tcp_close_shutdown_fin+0xb8>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e002      	b.n	800b3c4 <tcp_close_shutdown_fin+0x88>
      break;
 800b3be:	bf00      	nop
 800b3c0:	e000      	b.n	800b3c4 <tcp_close_shutdown_fin+0x88>
      break;
 800b3c2:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d103      	bne.n	800b3d4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f003 ffe7 	bl	800f3a0 <tcp_output>
 800b3d2:	e00d      	b.n	800b3f0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800b3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3dc:	d108      	bne.n	800b3f0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8b5b      	ldrh	r3, [r3, #26]
 800b3e2:	f043 0308 	orr.w	r3, r3, #8
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e001      	b.n	800b3f4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800b3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	08016e38 	.word	0x08016e38
 800b400:	08016ee8 	.word	0x08016ee8
 800b404:	08016e7c 	.word	0x08016e7c

0800b408 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d109      	bne.n	800b42a <tcp_close+0x22>
 800b416:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <tcp_close+0x4c>)
 800b418:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b41c:	490e      	ldr	r1, [pc, #56]	; (800b458 <tcp_close+0x50>)
 800b41e:	480f      	ldr	r0, [pc, #60]	; (800b45c <tcp_close+0x54>)
 800b420:	f009 ffe4 	bl	80153ec <iprintf>
 800b424:	f06f 030f 	mvn.w	r3, #15
 800b428:	e00f      	b.n	800b44a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7d1b      	ldrb	r3, [r3, #20]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d006      	beq.n	800b440 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	8b5b      	ldrh	r3, [r3, #26]
 800b436:	f043 0310 	orr.w	r3, r3, #16
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b440:	2101      	movs	r1, #1
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff fe9c 	bl	800b180 <tcp_close_shutdown>
 800b448:	4603      	mov	r3, r0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	08016e38 	.word	0x08016e38
 800b458:	08016f48 	.word	0x08016f48
 800b45c:	08016e7c 	.word	0x08016e7c

0800b460 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08e      	sub	sp, #56	; 0x38
 800b464:	af04      	add	r7, sp, #16
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d107      	bne.n	800b480 <tcp_abandon+0x20>
 800b470:	4b52      	ldr	r3, [pc, #328]	; (800b5bc <tcp_abandon+0x15c>)
 800b472:	f240 223d 	movw	r2, #573	; 0x23d
 800b476:	4952      	ldr	r1, [pc, #328]	; (800b5c0 <tcp_abandon+0x160>)
 800b478:	4852      	ldr	r0, [pc, #328]	; (800b5c4 <tcp_abandon+0x164>)
 800b47a:	f009 ffb7 	bl	80153ec <iprintf>
 800b47e:	e099      	b.n	800b5b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7d1b      	ldrb	r3, [r3, #20]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d106      	bne.n	800b496 <tcp_abandon+0x36>
 800b488:	4b4c      	ldr	r3, [pc, #304]	; (800b5bc <tcp_abandon+0x15c>)
 800b48a:	f240 2241 	movw	r2, #577	; 0x241
 800b48e:	494e      	ldr	r1, [pc, #312]	; (800b5c8 <tcp_abandon+0x168>)
 800b490:	484c      	ldr	r0, [pc, #304]	; (800b5c4 <tcp_abandon+0x164>)
 800b492:	f009 ffab 	bl	80153ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7d1b      	ldrb	r3, [r3, #20]
 800b49a:	2b0a      	cmp	r3, #10
 800b49c:	d107      	bne.n	800b4ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	484a      	ldr	r0, [pc, #296]	; (800b5cc <tcp_abandon+0x16c>)
 800b4a2:	f000 ffbf 	bl	800c424 <tcp_pcb_remove>
    tcp_free(pcb);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fdb8 	bl	800b01c <tcp_free>
 800b4ac:	e082      	b.n	800b5b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	7d1b      	ldrb	r3, [r3, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d126      	bne.n	800b526 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8adb      	ldrh	r3, [r3, #22]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d02e      	beq.n	800b53e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4e0:	4b3b      	ldr	r3, [pc, #236]	; (800b5d0 <tcp_abandon+0x170>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d105      	bne.n	800b4f6 <tcp_abandon+0x96>
 800b4ea:	4b39      	ldr	r3, [pc, #228]	; (800b5d0 <tcp_abandon+0x170>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4a37      	ldr	r2, [pc, #220]	; (800b5d0 <tcp_abandon+0x170>)
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	e013      	b.n	800b51e <tcp_abandon+0xbe>
 800b4f6:	4b36      	ldr	r3, [pc, #216]	; (800b5d0 <tcp_abandon+0x170>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	e00c      	b.n	800b518 <tcp_abandon+0xb8>
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d104      	bne.n	800b512 <tcp_abandon+0xb2>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	60da      	str	r2, [r3, #12]
 800b510:	e005      	b.n	800b51e <tcp_abandon+0xbe>
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	61fb      	str	r3, [r7, #28]
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1ef      	bne.n	800b4fe <tcp_abandon+0x9e>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	60da      	str	r2, [r3, #12]
 800b524:	e00b      	b.n	800b53e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8adb      	ldrh	r3, [r3, #22]
 800b52e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4828      	ldr	r0, [pc, #160]	; (800b5d4 <tcp_abandon+0x174>)
 800b534:	f000 ff76 	bl	800c424 <tcp_pcb_remove>
 800b538:	4b27      	ldr	r3, [pc, #156]	; (800b5d8 <tcp_abandon+0x178>)
 800b53a:	2201      	movs	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b542:	2b00      	cmp	r3, #0
 800b544:	d004      	beq.n	800b550 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fd1a 	bl	800bf84 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fd11 	bl	800bf84 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b566:	2b00      	cmp	r3, #0
 800b568:	d004      	beq.n	800b574 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fd08 	bl	800bf84 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3304      	adds	r3, #4
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	8b12      	ldrh	r2, [r2, #24]
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b588:	9201      	str	r2, [sp, #4]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	460b      	mov	r3, r1
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	69b9      	ldr	r1, [r7, #24]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f004 fcca 	bl	800ff2c <tcp_rst>
    }
    last_state = pcb->state;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	7d1b      	ldrb	r3, [r3, #20]
 800b59c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fd3c 	bl	800b01c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <tcp_abandon+0x154>
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f06f 010c 	mvn.w	r1, #12
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	4798      	blx	r3
  }
}
 800b5b4:	3728      	adds	r7, #40	; 0x28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	08016e38 	.word	0x08016e38
 800b5c0:	08016f7c 	.word	0x08016f7c
 800b5c4:	08016e7c 	.word	0x08016e7c
 800b5c8:	08016f98 	.word	0x08016f98
 800b5cc:	2000b8d0 	.word	0x2000b8d0
 800b5d0:	2000b8cc 	.word	0x2000b8cc
 800b5d4:	2000b8c0 	.word	0x2000b8c0
 800b5d8:	2000b8bc 	.word	0x2000b8bc

0800b5dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff ff3a 	bl	800b460 <tcp_abandon>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d106      	bne.n	800b610 <tcp_update_rcv_ann_wnd+0x1c>
 800b602:	4b25      	ldr	r3, [pc, #148]	; (800b698 <tcp_update_rcv_ann_wnd+0xa4>)
 800b604:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b608:	4924      	ldr	r1, [pc, #144]	; (800b69c <tcp_update_rcv_ann_wnd+0xa8>)
 800b60a:	4825      	ldr	r0, [pc, #148]	; (800b6a0 <tcp_update_rcv_ann_wnd+0xac>)
 800b60c:	f009 feee 	bl	80153ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b618:	4413      	add	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b624:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b628:	bf28      	it	cs
 800b62a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b62e:	b292      	uxth	r2, r2
 800b630:	4413      	add	r3, r2
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	db08      	blt.n	800b64c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	e020      	b.n	800b68e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	dd03      	ble.n	800b662 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b660:	e014      	b.n	800b68c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b674:	d306      	bcc.n	800b684 <tcp_update_rcv_ann_wnd+0x90>
 800b676:	4b08      	ldr	r3, [pc, #32]	; (800b698 <tcp_update_rcv_ann_wnd+0xa4>)
 800b678:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b67c:	4909      	ldr	r1, [pc, #36]	; (800b6a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800b67e:	4808      	ldr	r0, [pc, #32]	; (800b6a0 <tcp_update_rcv_ann_wnd+0xac>)
 800b680:	f009 feb4 	bl	80153ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b68c:	2300      	movs	r3, #0
  }
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	08016e38 	.word	0x08016e38
 800b69c:	08017094 	.word	0x08017094
 800b6a0:	08016e7c 	.word	0x08016e7c
 800b6a4:	080170b8 	.word	0x080170b8

0800b6a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d107      	bne.n	800b6ca <tcp_recved+0x22>
 800b6ba:	4b1f      	ldr	r3, [pc, #124]	; (800b738 <tcp_recved+0x90>)
 800b6bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b6c0:	491e      	ldr	r1, [pc, #120]	; (800b73c <tcp_recved+0x94>)
 800b6c2:	481f      	ldr	r0, [pc, #124]	; (800b740 <tcp_recved+0x98>)
 800b6c4:	f009 fe92 	bl	80153ec <iprintf>
 800b6c8:	e032      	b.n	800b730 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7d1b      	ldrb	r3, [r3, #20]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d106      	bne.n	800b6e0 <tcp_recved+0x38>
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <tcp_recved+0x90>)
 800b6d4:	f240 32d3 	movw	r2, #979	; 0x3d3
 800b6d8:	491a      	ldr	r1, [pc, #104]	; (800b744 <tcp_recved+0x9c>)
 800b6da:	4819      	ldr	r0, [pc, #100]	; (800b740 <tcp_recved+0x98>)
 800b6dc:	f009 fe86 	bl	80153ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b6e4:	887b      	ldrh	r3, [r7, #2]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b6ea:	89fb      	ldrh	r3, [r7, #14]
 800b6ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b6f0:	d804      	bhi.n	800b6fc <tcp_recved+0x54>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f6:	89fa      	ldrh	r2, [r7, #14]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d204      	bcs.n	800b706 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b702:	851a      	strh	r2, [r3, #40]	; 0x28
 800b704:	e002      	b.n	800b70c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	89fa      	ldrh	r2, [r7, #14]
 800b70a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff ff71 	bl	800b5f4 <tcp_update_rcv_ann_wnd>
 800b712:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b71a:	d309      	bcc.n	800b730 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8b5b      	ldrh	r3, [r3, #26]
 800b720:	f043 0302 	orr.w	r3, r3, #2
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f003 fe38 	bl	800f3a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	08016e38 	.word	0x08016e38
 800b73c:	080170d4 	.word	0x080170d4
 800b740:	08016e7c 	.word	0x08016e7c
 800b744:	080170ec 	.word	0x080170ec

0800b748 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b748:	b5b0      	push	{r4, r5, r7, lr}
 800b74a:	b090      	sub	sp, #64	; 0x40
 800b74c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b754:	4b94      	ldr	r3, [pc, #592]	; (800b9a8 <tcp_slowtmr+0x260>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	4a93      	ldr	r2, [pc, #588]	; (800b9a8 <tcp_slowtmr+0x260>)
 800b75c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b75e:	4b93      	ldr	r3, [pc, #588]	; (800b9ac <tcp_slowtmr+0x264>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	4b91      	ldr	r3, [pc, #580]	; (800b9ac <tcp_slowtmr+0x264>)
 800b768:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b76e:	4b90      	ldr	r3, [pc, #576]	; (800b9b0 <tcp_slowtmr+0x268>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b774:	e29d      	b.n	800bcb2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	7d1b      	ldrb	r3, [r3, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <tcp_slowtmr+0x44>
 800b77e:	4b8d      	ldr	r3, [pc, #564]	; (800b9b4 <tcp_slowtmr+0x26c>)
 800b780:	f240 42be 	movw	r2, #1214	; 0x4be
 800b784:	498c      	ldr	r1, [pc, #560]	; (800b9b8 <tcp_slowtmr+0x270>)
 800b786:	488d      	ldr	r0, [pc, #564]	; (800b9bc <tcp_slowtmr+0x274>)
 800b788:	f009 fe30 	bl	80153ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	7d1b      	ldrb	r3, [r3, #20]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d106      	bne.n	800b7a2 <tcp_slowtmr+0x5a>
 800b794:	4b87      	ldr	r3, [pc, #540]	; (800b9b4 <tcp_slowtmr+0x26c>)
 800b796:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b79a:	4989      	ldr	r1, [pc, #548]	; (800b9c0 <tcp_slowtmr+0x278>)
 800b79c:	4887      	ldr	r0, [pc, #540]	; (800b9bc <tcp_slowtmr+0x274>)
 800b79e:	f009 fe25 	bl	80153ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	7d1b      	ldrb	r3, [r3, #20]
 800b7a6:	2b0a      	cmp	r3, #10
 800b7a8:	d106      	bne.n	800b7b8 <tcp_slowtmr+0x70>
 800b7aa:	4b82      	ldr	r3, [pc, #520]	; (800b9b4 <tcp_slowtmr+0x26c>)
 800b7ac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b7b0:	4984      	ldr	r1, [pc, #528]	; (800b9c4 <tcp_slowtmr+0x27c>)
 800b7b2:	4882      	ldr	r0, [pc, #520]	; (800b9bc <tcp_slowtmr+0x274>)
 800b7b4:	f009 fe1a 	bl	80153ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ba:	7f9a      	ldrb	r2, [r3, #30]
 800b7bc:	4b7b      	ldr	r3, [pc, #492]	; (800b9ac <tcp_slowtmr+0x264>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d105      	bne.n	800b7d0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b7ce:	e270      	b.n	800bcb2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b7d0:	4b76      	ldr	r3, [pc, #472]	; (800b9ac <tcp_slowtmr+0x264>)
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	7d1b      	ldrb	r3, [r3, #20]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d10a      	bne.n	800b802 <tcp_slowtmr+0xba>
 800b7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7f2:	2b05      	cmp	r3, #5
 800b7f4:	d905      	bls.n	800b802 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b7f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b800:	e11e      	b.n	800ba40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b808:	2b0b      	cmp	r3, #11
 800b80a:	d905      	bls.n	800b818 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b810:	3301      	adds	r3, #1
 800b812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b816:	e113      	b.n	800ba40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d075      	beq.n	800b90e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b826:	2b00      	cmp	r3, #0
 800b828:	d006      	beq.n	800b838 <tcp_slowtmr+0xf0>
 800b82a:	4b62      	ldr	r3, [pc, #392]	; (800b9b4 <tcp_slowtmr+0x26c>)
 800b82c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b830:	4965      	ldr	r1, [pc, #404]	; (800b9c8 <tcp_slowtmr+0x280>)
 800b832:	4862      	ldr	r0, [pc, #392]	; (800b9bc <tcp_slowtmr+0x274>)
 800b834:	f009 fdda 	bl	80153ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <tcp_slowtmr+0x106>
 800b840:	4b5c      	ldr	r3, [pc, #368]	; (800b9b4 <tcp_slowtmr+0x26c>)
 800b842:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b846:	4961      	ldr	r1, [pc, #388]	; (800b9cc <tcp_slowtmr+0x284>)
 800b848:	485c      	ldr	r0, [pc, #368]	; (800b9bc <tcp_slowtmr+0x274>)
 800b84a:	f009 fdcf 	bl	80153ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b854:	2b0b      	cmp	r3, #11
 800b856:	d905      	bls.n	800b864 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b85c:	3301      	adds	r3, #1
 800b85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b862:	e0ed      	b.n	800ba40 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b86a:	3b01      	subs	r3, #1
 800b86c:	4a58      	ldr	r2, [pc, #352]	; (800b9d0 <tcp_slowtmr+0x288>)
 800b86e:	5cd3      	ldrb	r3, [r2, r3]
 800b870:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b878:	7c7a      	ldrb	r2, [r7, #17]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d907      	bls.n	800b88e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b884:	3301      	adds	r3, #1
 800b886:	b2da      	uxtb	r2, r3
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b890:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b894:	7c7a      	ldrb	r2, [r7, #17]
 800b896:	429a      	cmp	r2, r3
 800b898:	f200 80d2 	bhi.w	800ba40 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b89c:	2301      	movs	r3, #1
 800b89e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d108      	bne.n	800b8bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b8aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8ac:	f004 fc32 	bl	8010114 <tcp_zero_window_probe>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d014      	beq.n	800b8e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	623b      	str	r3, [r7, #32]
 800b8ba:	e011      	b.n	800b8e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8c6:	f003 fae5 	bl	800ee94 <tcp_split_unsent_seg>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d107      	bne.n	800b8e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8d2:	f003 fd65 	bl	800f3a0 <tcp_output>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 80ac 	beq.w	800ba40 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	f200 80a2 	bhi.w	800ba40 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b902:	3301      	adds	r3, #1
 800b904:	b2da      	uxtb	r2, r3
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b90c:	e098      	b.n	800ba40 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b914:	2b00      	cmp	r3, #0
 800b916:	db0f      	blt.n	800b938 <tcp_slowtmr+0x1f0>
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b91e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b922:	4293      	cmp	r3, r2
 800b924:	d008      	beq.n	800b938 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	3301      	adds	r3, #1
 800b930:	b29b      	uxth	r3, r3
 800b932:	b21a      	sxth	r2, r3
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b944:	429a      	cmp	r2, r3
 800b946:	db7b      	blt.n	800ba40 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b94a:	f004 f821 	bl	800f990 <tcp_rexmit_rto_prepare>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <tcp_slowtmr+0x21c>
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d171      	bne.n	800ba40 <tcp_slowtmr+0x2f8>
 800b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d06d      	beq.n	800ba40 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	7d1b      	ldrb	r3, [r3, #20]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d03a      	beq.n	800b9e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b972:	2b0c      	cmp	r3, #12
 800b974:	bf28      	it	cs
 800b976:	230c      	movcs	r3, #12
 800b978:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b980:	10db      	asrs	r3, r3, #3
 800b982:	b21b      	sxth	r3, r3
 800b984:	461a      	mov	r2, r3
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b98c:	4413      	add	r3, r2
 800b98e:	7efa      	ldrb	r2, [r7, #27]
 800b990:	4910      	ldr	r1, [pc, #64]	; (800b9d4 <tcp_slowtmr+0x28c>)
 800b992:	5c8a      	ldrb	r2, [r1, r2]
 800b994:	4093      	lsls	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	dc1a      	bgt.n	800b9d8 <tcp_slowtmr+0x290>
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	b21a      	sxth	r2, r3
 800b9a6:	e019      	b.n	800b9dc <tcp_slowtmr+0x294>
 800b9a8:	2000b8c4 	.word	0x2000b8c4
 800b9ac:	20004a02 	.word	0x20004a02
 800b9b0:	2000b8c0 	.word	0x2000b8c0
 800b9b4:	08016e38 	.word	0x08016e38
 800b9b8:	0801717c 	.word	0x0801717c
 800b9bc:	08016e7c 	.word	0x08016e7c
 800b9c0:	080171a8 	.word	0x080171a8
 800b9c4:	080171d4 	.word	0x080171d4
 800b9c8:	08017204 	.word	0x08017204
 800b9cc:	08017238 	.word	0x08017238
 800b9d0:	08019208 	.word	0x08019208
 800b9d4:	080191f8 	.word	0x080191f8
 800b9d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	bf28      	it	cs
 800b9f8:	4613      	movcs	r3, r2
 800b9fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b9fc:	8a7b      	ldrh	r3, [r7, #18]
 800b9fe:	085b      	lsrs	r3, r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d206      	bcs.n	800ba28 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ba28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ba32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ba3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba3c:	f004 f818 	bl	800fa70 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	7d1b      	ldrb	r3, [r3, #20]
 800ba44:	2b06      	cmp	r3, #6
 800ba46:	d111      	bne.n	800ba6c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	8b5b      	ldrh	r3, [r3, #26]
 800ba4c:	f003 0310 	and.w	r3, r3, #16
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00b      	beq.n	800ba6c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ba54:	4b9c      	ldr	r3, [pc, #624]	; (800bcc8 <tcp_slowtmr+0x580>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b28      	cmp	r3, #40	; 0x28
 800ba60:	d904      	bls.n	800ba6c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ba62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba66:	3301      	adds	r3, #1
 800ba68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	7a5b      	ldrb	r3, [r3, #9]
 800ba70:	f003 0308 	and.w	r3, r3, #8
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d04a      	beq.n	800bb0e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d003      	beq.n	800ba88 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ba84:	2b07      	cmp	r3, #7
 800ba86:	d142      	bne.n	800bb0e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ba88:	4b8f      	ldr	r3, [pc, #572]	; (800bcc8 <tcp_slowtmr+0x580>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba94:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ba98:	4b8c      	ldr	r3, [pc, #560]	; (800bccc <tcp_slowtmr+0x584>)
 800ba9a:	440b      	add	r3, r1
 800ba9c:	498c      	ldr	r1, [pc, #560]	; (800bcd0 <tcp_slowtmr+0x588>)
 800ba9e:	fba1 1303 	umull	r1, r3, r1, r3
 800baa2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d90a      	bls.n	800babe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800baa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baac:	3301      	adds	r3, #1
 800baae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bab6:	3301      	adds	r3, #1
 800bab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800babc:	e027      	b.n	800bb0e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800babe:	4b82      	ldr	r3, [pc, #520]	; (800bcc8 <tcp_slowtmr+0x580>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bad4:	4618      	mov	r0, r3
 800bad6:	4b7f      	ldr	r3, [pc, #508]	; (800bcd4 <tcp_slowtmr+0x58c>)
 800bad8:	fb03 f300 	mul.w	r3, r3, r0
 800badc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bade:	497c      	ldr	r1, [pc, #496]	; (800bcd0 <tcp_slowtmr+0x588>)
 800bae0:	fba1 1303 	umull	r1, r3, r1, r3
 800bae4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d911      	bls.n	800bb0e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800baea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baec:	f004 fad2 	bl	8010094 <tcp_keepalive>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800baf6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bb04:	3301      	adds	r3, #1
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d011      	beq.n	800bb3a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bb16:	4b6c      	ldr	r3, [pc, #432]	; (800bcc8 <tcp_slowtmr+0x580>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bb26:	4619      	mov	r1, r3
 800bb28:	460b      	mov	r3, r1
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	440b      	add	r3, r1
 800bb2e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d302      	bcc.n	800bb3a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bb34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb36:	f000 fdd9 	bl	800c6ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	7d1b      	ldrb	r3, [r3, #20]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d10b      	bne.n	800bb5a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb42:	4b61      	ldr	r3, [pc, #388]	; (800bcc8 <tcp_slowtmr+0x580>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	2b28      	cmp	r3, #40	; 0x28
 800bb4e:	d904      	bls.n	800bb5a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb54:	3301      	adds	r3, #1
 800bb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d10b      	bne.n	800bb7a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bb62:	4b59      	ldr	r3, [pc, #356]	; (800bcc8 <tcp_slowtmr+0x580>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2bf0      	cmp	r3, #240	; 0xf0
 800bb6e:	d904      	bls.n	800bb7a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb74:	3301      	adds	r3, #1
 800bb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bb7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d060      	beq.n	800bc44 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb88:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bb8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb8c:	f000 fbfa 	bl	800c384 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d010      	beq.n	800bbb8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bb96:	4b50      	ldr	r3, [pc, #320]	; (800bcd8 <tcp_slowtmr+0x590>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d106      	bne.n	800bbae <tcp_slowtmr+0x466>
 800bba0:	4b4e      	ldr	r3, [pc, #312]	; (800bcdc <tcp_slowtmr+0x594>)
 800bba2:	f240 526d 	movw	r2, #1389	; 0x56d
 800bba6:	494e      	ldr	r1, [pc, #312]	; (800bce0 <tcp_slowtmr+0x598>)
 800bba8:	484e      	ldr	r0, [pc, #312]	; (800bce4 <tcp_slowtmr+0x59c>)
 800bbaa:	f009 fc1f 	bl	80153ec <iprintf>
        prev->next = pcb->next;
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	60da      	str	r2, [r3, #12]
 800bbb6:	e00f      	b.n	800bbd8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bbb8:	4b47      	ldr	r3, [pc, #284]	; (800bcd8 <tcp_slowtmr+0x590>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d006      	beq.n	800bbd0 <tcp_slowtmr+0x488>
 800bbc2:	4b46      	ldr	r3, [pc, #280]	; (800bcdc <tcp_slowtmr+0x594>)
 800bbc4:	f240 5271 	movw	r2, #1393	; 0x571
 800bbc8:	4947      	ldr	r1, [pc, #284]	; (800bce8 <tcp_slowtmr+0x5a0>)
 800bbca:	4846      	ldr	r0, [pc, #280]	; (800bce4 <tcp_slowtmr+0x59c>)
 800bbcc:	f009 fc0e 	bl	80153ec <iprintf>
        tcp_active_pcbs = pcb->next;
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	4a40      	ldr	r2, [pc, #256]	; (800bcd8 <tcp_slowtmr+0x590>)
 800bbd6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bbd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d013      	beq.n	800bc08 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bbe8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	3304      	adds	r3, #4
 800bbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf0:	8ad2      	ldrh	r2, [r2, #22]
 800bbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf4:	8b09      	ldrh	r1, [r1, #24]
 800bbf6:	9102      	str	r1, [sp, #8]
 800bbf8:	9201      	str	r2, [sp, #4]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4601      	mov	r1, r0
 800bc02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc04:	f004 f992 	bl	800ff2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc16:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bc1e:	6838      	ldr	r0, [r7, #0]
 800bc20:	f7ff f9fc 	bl	800b01c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bc24:	4b31      	ldr	r3, [pc, #196]	; (800bcec <tcp_slowtmr+0x5a4>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <tcp_slowtmr+0x4f2>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f06f 010c 	mvn.w	r1, #12
 800bc36:	68b8      	ldr	r0, [r7, #8]
 800bc38:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bc3a:	4b2c      	ldr	r3, [pc, #176]	; (800bcec <tcp_slowtmr+0x5a4>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d037      	beq.n	800bcb2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bc42:	e592      	b.n	800b76a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	7f1b      	ldrb	r3, [r3, #28]
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc58:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	7f1a      	ldrb	r2, [r3, #28]
 800bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc60:	7f5b      	ldrb	r3, [r3, #29]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d325      	bcc.n	800bcb2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	2200      	movs	r2, #0
 800bc6a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <tcp_slowtmr+0x5a4>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <tcp_slowtmr+0x54c>
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc84:	6912      	ldr	r2, [r2, #16]
 800bc86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4798      	blx	r3
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bc92:	e002      	b.n	800bc9a <tcp_slowtmr+0x552>
 800bc94:	2300      	movs	r3, #0
 800bc96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <tcp_slowtmr+0x5a4>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d000      	beq.n	800bca4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800bca2:	e562      	b.n	800b76a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bca4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800bcac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcae:	f003 fb77 	bl	800f3a0 <tcp_output>
  while (pcb != NULL) {
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f47f ad5e 	bne.w	800b776 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bcbe:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <tcp_slowtmr+0x5a8>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bcc4:	e069      	b.n	800bd9a <tcp_slowtmr+0x652>
 800bcc6:	bf00      	nop
 800bcc8:	2000b8c4 	.word	0x2000b8c4
 800bccc:	000a4cb8 	.word	0x000a4cb8
 800bcd0:	10624dd3 	.word	0x10624dd3
 800bcd4:	000124f8 	.word	0x000124f8
 800bcd8:	2000b8c0 	.word	0x2000b8c0
 800bcdc:	08016e38 	.word	0x08016e38
 800bce0:	08017270 	.word	0x08017270
 800bce4:	08016e7c 	.word	0x08016e7c
 800bce8:	0801729c 	.word	0x0801729c
 800bcec:	2000b8bc 	.word	0x2000b8bc
 800bcf0:	2000b8d0 	.word	0x2000b8d0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf6:	7d1b      	ldrb	r3, [r3, #20]
 800bcf8:	2b0a      	cmp	r3, #10
 800bcfa:	d006      	beq.n	800bd0a <tcp_slowtmr+0x5c2>
 800bcfc:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <tcp_slowtmr+0x660>)
 800bcfe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bd02:	492a      	ldr	r1, [pc, #168]	; (800bdac <tcp_slowtmr+0x664>)
 800bd04:	482a      	ldr	r0, [pc, #168]	; (800bdb0 <tcp_slowtmr+0x668>)
 800bd06:	f009 fb71 	bl	80153ec <iprintf>
    pcb_remove = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bd10:	4b28      	ldr	r3, [pc, #160]	; (800bdb4 <tcp_slowtmr+0x66c>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2bf0      	cmp	r3, #240	; 0xf0
 800bd1c:	d904      	bls.n	800bd28 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bd1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd22:	3301      	adds	r3, #1
 800bd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02f      	beq.n	800bd90 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bd30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd32:	f000 fb27 	bl	800c384 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d010      	beq.n	800bd5e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bd3c:	4b1e      	ldr	r3, [pc, #120]	; (800bdb8 <tcp_slowtmr+0x670>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d106      	bne.n	800bd54 <tcp_slowtmr+0x60c>
 800bd46:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <tcp_slowtmr+0x660>)
 800bd48:	f240 52af 	movw	r2, #1455	; 0x5af
 800bd4c:	491b      	ldr	r1, [pc, #108]	; (800bdbc <tcp_slowtmr+0x674>)
 800bd4e:	4818      	ldr	r0, [pc, #96]	; (800bdb0 <tcp_slowtmr+0x668>)
 800bd50:	f009 fb4c 	bl	80153ec <iprintf>
        prev->next = pcb->next;
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	60da      	str	r2, [r3, #12]
 800bd5c:	e00f      	b.n	800bd7e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bd5e:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <tcp_slowtmr+0x670>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d006      	beq.n	800bd76 <tcp_slowtmr+0x62e>
 800bd68:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <tcp_slowtmr+0x660>)
 800bd6a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bd6e:	4914      	ldr	r1, [pc, #80]	; (800bdc0 <tcp_slowtmr+0x678>)
 800bd70:	480f      	ldr	r0, [pc, #60]	; (800bdb0 <tcp_slowtmr+0x668>)
 800bd72:	f009 fb3b 	bl	80153ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <tcp_slowtmr+0x670>)
 800bd7c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bd88:	69f8      	ldr	r0, [r7, #28]
 800bd8a:	f7ff f947 	bl	800b01c <tcp_free>
 800bd8e:	e004      	b.n	800bd9a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1a9      	bne.n	800bcf4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bda0:	bf00      	nop
 800bda2:	3730      	adds	r7, #48	; 0x30
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bdb0      	pop	{r4, r5, r7, pc}
 800bda8:	08016e38 	.word	0x08016e38
 800bdac:	080172c8 	.word	0x080172c8
 800bdb0:	08016e7c 	.word	0x08016e7c
 800bdb4:	2000b8c4 	.word	0x2000b8c4
 800bdb8:	2000b8d0 	.word	0x2000b8d0
 800bdbc:	080172f8 	.word	0x080172f8
 800bdc0:	08017320 	.word	0x08017320

0800bdc4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bdca:	4b2d      	ldr	r3, [pc, #180]	; (800be80 <tcp_fasttmr+0xbc>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	4b2b      	ldr	r3, [pc, #172]	; (800be80 <tcp_fasttmr+0xbc>)
 800bdd4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bdd6:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <tcp_fasttmr+0xc0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bddc:	e048      	b.n	800be70 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	7f9a      	ldrb	r2, [r3, #30]
 800bde2:	4b27      	ldr	r3, [pc, #156]	; (800be80 <tcp_fasttmr+0xbc>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d03f      	beq.n	800be6a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bdea:	4b25      	ldr	r3, [pc, #148]	; (800be80 <tcp_fasttmr+0xbc>)
 800bdec:	781a      	ldrb	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8b5b      	ldrh	r3, [r3, #26]
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d010      	beq.n	800be20 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	8b5b      	ldrh	r3, [r3, #26]
 800be02:	f043 0302 	orr.w	r3, r3, #2
 800be06:	b29a      	uxth	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f003 fac7 	bl	800f3a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	8b5b      	ldrh	r3, [r3, #26]
 800be16:	f023 0303 	bic.w	r3, r3, #3
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8b5b      	ldrh	r3, [r3, #26]
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d009      	beq.n	800be40 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	8b5b      	ldrh	r3, [r3, #26]
 800be30:	f023 0308 	bic.w	r3, r3, #8
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff fa7e 	bl	800b33c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800be4e:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <tcp_fasttmr+0xc4>)
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f819 	bl	800be8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <tcp_fasttmr+0xc4>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d000      	beq.n	800be64 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800be62:	e7b8      	b.n	800bdd6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	607b      	str	r3, [r7, #4]
 800be68:	e002      	b.n	800be70 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1b3      	bne.n	800bdde <tcp_fasttmr+0x1a>
    }
  }
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20004a02 	.word	0x20004a02
 800be84:	2000b8c0 	.word	0x2000b8c0
 800be88:	2000b8bc 	.word	0x2000b8bc

0800be8c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800be8c:	b590      	push	{r4, r7, lr}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <tcp_process_refused_data+0x22>
 800be9a:	4b37      	ldr	r3, [pc, #220]	; (800bf78 <tcp_process_refused_data+0xec>)
 800be9c:	f240 6209 	movw	r2, #1545	; 0x609
 800bea0:	4936      	ldr	r1, [pc, #216]	; (800bf7c <tcp_process_refused_data+0xf0>)
 800bea2:	4837      	ldr	r0, [pc, #220]	; (800bf80 <tcp_process_refused_data+0xf4>)
 800bea4:	f009 faa2 	bl	80153ec <iprintf>
 800bea8:	f06f 030f 	mvn.w	r3, #15
 800beac:	e060      	b.n	800bf70 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb2:	7b5b      	ldrb	r3, [r3, #13]
 800beb4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <tcp_process_refused_data+0x58>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6918      	ldr	r0, [r3, #16]
 800bed6:	2300      	movs	r3, #0
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	47a0      	blx	r4
 800bede:	4603      	mov	r3, r0
 800bee0:	73fb      	strb	r3, [r7, #15]
 800bee2:	e007      	b.n	800bef4 <tcp_process_refused_data+0x68>
 800bee4:	2300      	movs	r3, #0
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	6879      	ldr	r1, [r7, #4]
 800beea:	2000      	movs	r0, #0
 800beec:	f000 f8a2 	bl	800c034 <tcp_recv_null>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d12a      	bne.n	800bf52 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	f003 0320 	and.w	r3, r3, #32
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d033      	beq.n	800bf6e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf0e:	d005      	beq.n	800bf1c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf14:	3301      	adds	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00b      	beq.n	800bf3e <tcp_process_refused_data+0xb2>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6918      	ldr	r0, [r3, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	47a0      	blx	r4
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
 800bf3c:	e001      	b.n	800bf42 <tcp_process_refused_data+0xb6>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bf42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf46:	f113 0f0d 	cmn.w	r3, #13
 800bf4a:	d110      	bne.n	800bf6e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bf4c:	f06f 030c 	mvn.w	r3, #12
 800bf50:	e00e      	b.n	800bf70 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bf52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf56:	f113 0f0d 	cmn.w	r3, #13
 800bf5a:	d102      	bne.n	800bf62 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bf5c:	f06f 030c 	mvn.w	r3, #12
 800bf60:	e006      	b.n	800bf70 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bf68:	f06f 0304 	mvn.w	r3, #4
 800bf6c:	e000      	b.n	800bf70 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd90      	pop	{r4, r7, pc}
 800bf78:	08016e38 	.word	0x08016e38
 800bf7c:	08017348 	.word	0x08017348
 800bf80:	08016e7c 	.word	0x08016e7c

0800bf84 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bf8c:	e007      	b.n	800bf9e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f809 	bl	800bfac <tcp_seg_free>
    seg = next;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1f4      	bne.n	800bf8e <tcp_segs_free+0xa>
  }
}
 800bfa4:	bf00      	nop
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00c      	beq.n	800bfd4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fd6c 	bl	800aaa4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	2003      	movs	r0, #3
 800bfd0:	f7fd ff3a 	bl	8009e48 <memp_free>
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <tcp_seg_copy+0x1c>
 800bfea:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <tcp_seg_copy+0x4c>)
 800bfec:	f240 6282 	movw	r2, #1666	; 0x682
 800bff0:	490e      	ldr	r1, [pc, #56]	; (800c02c <tcp_seg_copy+0x50>)
 800bff2:	480f      	ldr	r0, [pc, #60]	; (800c030 <tcp_seg_copy+0x54>)
 800bff4:	f009 f9fa 	bl	80153ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bff8:	2003      	movs	r0, #3
 800bffa:	f7fd fed3 	bl	8009da4 <memp_malloc>
 800bffe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <tcp_seg_copy+0x2e>
    return NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	e00a      	b.n	800c020 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c00a:	2210      	movs	r2, #16
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f009 f9d9 	bl	80153c6 <memcpy>
  pbuf_ref(cseg->p);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fde9 	bl	800abf0 <pbuf_ref>
  return cseg;
 800c01e:	68fb      	ldr	r3, [r7, #12]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	08016e38 	.word	0x08016e38
 800c02c:	0801738c 	.word	0x0801738c
 800c030:	08016e7c 	.word	0x08016e7c

0800c034 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d109      	bne.n	800c05c <tcp_recv_null+0x28>
 800c048:	4b12      	ldr	r3, [pc, #72]	; (800c094 <tcp_recv_null+0x60>)
 800c04a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c04e:	4912      	ldr	r1, [pc, #72]	; (800c098 <tcp_recv_null+0x64>)
 800c050:	4812      	ldr	r0, [pc, #72]	; (800c09c <tcp_recv_null+0x68>)
 800c052:	f009 f9cb 	bl	80153ec <iprintf>
 800c056:	f06f 030f 	mvn.w	r3, #15
 800c05a:	e016      	b.n	800c08a <tcp_recv_null+0x56>

  if (p != NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d009      	beq.n	800c076 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	891b      	ldrh	r3, [r3, #8]
 800c066:	4619      	mov	r1, r3
 800c068:	68b8      	ldr	r0, [r7, #8]
 800c06a:	f7ff fb1d 	bl	800b6a8 <tcp_recved>
    pbuf_free(p);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7fe fd18 	bl	800aaa4 <pbuf_free>
 800c074:	e008      	b.n	800c088 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d104      	bne.n	800c088 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c07e:	68b8      	ldr	r0, [r7, #8]
 800c080:	f7ff f9c2 	bl	800b408 <tcp_close>
 800c084:	4603      	mov	r3, r0
 800c086:	e000      	b.n	800c08a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08016e38 	.word	0x08016e38
 800c098:	080173a8 	.word	0x080173a8
 800c09c:	08016e7c 	.word	0x08016e7c

0800c0a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	db01      	blt.n	800c0b6 <tcp_kill_prio+0x16>
 800c0b2:	79fb      	ldrb	r3, [r7, #7]
 800c0b4:	e000      	b.n	800c0b8 <tcp_kill_prio+0x18>
 800c0b6:	237f      	movs	r3, #127	; 0x7f
 800c0b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c0ba:	7afb      	ldrb	r3, [r7, #11]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d034      	beq.n	800c12a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0ce:	4b19      	ldr	r3, [pc, #100]	; (800c134 <tcp_kill_prio+0x94>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e01f      	b.n	800c116 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	7d5b      	ldrb	r3, [r3, #21]
 800c0da:	7afa      	ldrb	r2, [r7, #11]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d80c      	bhi.n	800c0fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c0e4:	7afa      	ldrb	r2, [r7, #11]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d112      	bne.n	800c110 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c0ea:	4b13      	ldr	r3, [pc, #76]	; (800c138 <tcp_kill_prio+0x98>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d80a      	bhi.n	800c110 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c0fa:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <tcp_kill_prio+0x98>)
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	7d5b      	ldrb	r3, [r3, #21]
 800c10e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1dc      	bne.n	800c0d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d004      	beq.n	800c12c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c122:	6938      	ldr	r0, [r7, #16]
 800c124:	f7ff fa5a 	bl	800b5dc <tcp_abort>
 800c128:	e000      	b.n	800c12c <tcp_kill_prio+0x8c>
    return;
 800c12a:	bf00      	nop
  }
}
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	2000b8c0 	.word	0x2000b8c0
 800c138:	2000b8c4 	.word	0x2000b8c4

0800c13c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c146:	79fb      	ldrb	r3, [r7, #7]
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d009      	beq.n	800c160 <tcp_kill_state+0x24>
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	2b09      	cmp	r3, #9
 800c150:	d006      	beq.n	800c160 <tcp_kill_state+0x24>
 800c152:	4b1a      	ldr	r3, [pc, #104]	; (800c1bc <tcp_kill_state+0x80>)
 800c154:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c158:	4919      	ldr	r1, [pc, #100]	; (800c1c0 <tcp_kill_state+0x84>)
 800c15a:	481a      	ldr	r0, [pc, #104]	; (800c1c4 <tcp_kill_state+0x88>)
 800c15c:	f009 f946 	bl	80153ec <iprintf>

  inactivity = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c168:	4b17      	ldr	r3, [pc, #92]	; (800c1c8 <tcp_kill_state+0x8c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	617b      	str	r3, [r7, #20]
 800c16e:	e017      	b.n	800c1a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	7d1b      	ldrb	r3, [r3, #20]
 800c174:	79fa      	ldrb	r2, [r7, #7]
 800c176:	429a      	cmp	r2, r3
 800c178:	d10f      	bne.n	800c19a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c17a:	4b14      	ldr	r3, [pc, #80]	; (800c1cc <tcp_kill_state+0x90>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	429a      	cmp	r2, r3
 800c188:	d807      	bhi.n	800c19a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c18a:	4b10      	ldr	r3, [pc, #64]	; (800c1cc <tcp_kill_state+0x90>)
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	617b      	str	r3, [r7, #20]
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1e4      	bne.n	800c170 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6938      	ldr	r0, [r7, #16]
 800c1b0:	f7ff f956 	bl	800b460 <tcp_abandon>
  }
}
 800c1b4:	bf00      	nop
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	08016e38 	.word	0x08016e38
 800c1c0:	080173c4 	.word	0x080173c4
 800c1c4:	08016e7c 	.word	0x08016e7c
 800c1c8:	2000b8c0 	.word	0x2000b8c0
 800c1cc:	2000b8c4 	.word	0x2000b8c4

0800c1d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1de:	4b12      	ldr	r3, [pc, #72]	; (800c228 <tcp_kill_timewait+0x58>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e012      	b.n	800c20c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c1e6:	4b11      	ldr	r3, [pc, #68]	; (800c22c <tcp_kill_timewait+0x5c>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d807      	bhi.n	800c206 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	; (800c22c <tcp_kill_timewait+0x5c>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e9      	bne.n	800c1e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c218:	68b8      	ldr	r0, [r7, #8]
 800c21a:	f7ff f9df 	bl	800b5dc <tcp_abort>
  }
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	2000b8d0 	.word	0x2000b8d0
 800c22c:	2000b8c4 	.word	0x2000b8c4

0800c230 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c236:	4b10      	ldr	r3, [pc, #64]	; (800c278 <tcp_handle_closepend+0x48>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c23c:	e014      	b.n	800c268 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8b5b      	ldrh	r3, [r3, #26]
 800c248:	f003 0308 	and.w	r3, r3, #8
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d009      	beq.n	800c264 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	8b5b      	ldrh	r3, [r3, #26]
 800c254:	f023 0308 	bic.w	r3, r3, #8
 800c258:	b29a      	uxth	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff f86c 	bl	800b33c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e7      	bne.n	800c23e <tcp_handle_closepend+0xe>
  }
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	2000b8c0 	.word	0x2000b8c0

0800c27c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c286:	2001      	movs	r0, #1
 800c288:	f7fd fd8c 	bl	8009da4 <memp_malloc>
 800c28c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d126      	bne.n	800c2e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c294:	f7ff ffcc 	bl	800c230 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c298:	f7ff ff9a 	bl	800c1d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c29c:	2001      	movs	r0, #1
 800c29e:	f7fd fd81 	bl	8009da4 <memp_malloc>
 800c2a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d11b      	bne.n	800c2e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c2aa:	2009      	movs	r0, #9
 800c2ac:	f7ff ff46 	bl	800c13c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	f7fd fd77 	bl	8009da4 <memp_malloc>
 800c2b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d111      	bne.n	800c2e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c2be:	2008      	movs	r0, #8
 800c2c0:	f7ff ff3c 	bl	800c13c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	f7fd fd6d 	bl	8009da4 <memp_malloc>
 800c2ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d107      	bne.n	800c2e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c2d2:	79fb      	ldrb	r3, [r7, #7]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fee3 	bl	800c0a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2da:	2001      	movs	r0, #1
 800c2dc:	f7fd fd62 	bl	8009da4 <memp_malloc>
 800c2e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d03f      	beq.n	800c368 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c2e8:	229c      	movs	r2, #156	; 0x9c
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f009 f875 	bl	80153dc <memset>
    pcb->prio = prio;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	79fa      	ldrb	r2, [r7, #7]
 800c2f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c2fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	22ff      	movs	r2, #255	; 0xff
 800c316:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c31e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2206      	movs	r2, #6
 800c324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2206      	movs	r2, #6
 800c32c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c334:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c33e:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <tcp_alloc+0xf8>)
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <tcp_alloc+0xfc>)
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c354:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4a08      	ldr	r2, [pc, #32]	; (800c37c <tcp_alloc+0x100>)
 800c35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4a07      	ldr	r2, [pc, #28]	; (800c380 <tcp_alloc+0x104>)
 800c364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c368:	68fb      	ldr	r3, [r7, #12]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	2000b8c4 	.word	0x2000b8c4
 800c378:	20004a02 	.word	0x20004a02
 800c37c:	0800c035 	.word	0x0800c035
 800c380:	006ddd00 	.word	0x006ddd00

0800c384 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d107      	bne.n	800c3a2 <tcp_pcb_purge+0x1e>
 800c392:	4b21      	ldr	r3, [pc, #132]	; (800c418 <tcp_pcb_purge+0x94>)
 800c394:	f640 0251 	movw	r2, #2129	; 0x851
 800c398:	4920      	ldr	r1, [pc, #128]	; (800c41c <tcp_pcb_purge+0x98>)
 800c39a:	4821      	ldr	r0, [pc, #132]	; (800c420 <tcp_pcb_purge+0x9c>)
 800c39c:	f009 f826 	bl	80153ec <iprintf>
 800c3a0:	e037      	b.n	800c412 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	7d1b      	ldrb	r3, [r3, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d033      	beq.n	800c412 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c3ae:	2b0a      	cmp	r3, #10
 800c3b0:	d02f      	beq.n	800c412 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d02b      	beq.n	800c412 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fb6c 	bl	800aaa4 <pbuf_free>
      pcb->refused_data = NULL;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f986 	bl	800c6ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3e6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fdc9 	bl	800bf84 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fdc4 	bl	800bf84 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	66da      	str	r2, [r3, #108]	; 0x6c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	08016e38 	.word	0x08016e38
 800c41c:	08017484 	.word	0x08017484
 800c420:	08016e7c 	.word	0x08016e7c

0800c424 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d106      	bne.n	800c442 <tcp_pcb_remove+0x1e>
 800c434:	4b3e      	ldr	r3, [pc, #248]	; (800c530 <tcp_pcb_remove+0x10c>)
 800c436:	f640 0283 	movw	r2, #2179	; 0x883
 800c43a:	493e      	ldr	r1, [pc, #248]	; (800c534 <tcp_pcb_remove+0x110>)
 800c43c:	483e      	ldr	r0, [pc, #248]	; (800c538 <tcp_pcb_remove+0x114>)
 800c43e:	f008 ffd5 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <tcp_pcb_remove+0x32>
 800c448:	4b39      	ldr	r3, [pc, #228]	; (800c530 <tcp_pcb_remove+0x10c>)
 800c44a:	f640 0284 	movw	r2, #2180	; 0x884
 800c44e:	493b      	ldr	r1, [pc, #236]	; (800c53c <tcp_pcb_remove+0x118>)
 800c450:	4839      	ldr	r0, [pc, #228]	; (800c538 <tcp_pcb_remove+0x114>)
 800c452:	f008 ffcb 	bl	80153ec <iprintf>

  TCP_RMV(pcblist, pcb);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d105      	bne.n	800c46c <tcp_pcb_remove+0x48>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e013      	b.n	800c494 <tcp_pcb_remove+0x70>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]
 800c472:	e00c      	b.n	800c48e <tcp_pcb_remove+0x6a>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d104      	bne.n	800c488 <tcp_pcb_remove+0x64>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	60da      	str	r2, [r3, #12]
 800c486:	e005      	b.n	800c494 <tcp_pcb_remove+0x70>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ef      	bne.n	800c474 <tcp_pcb_remove+0x50>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2200      	movs	r2, #0
 800c498:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c49a:	6838      	ldr	r0, [r7, #0]
 800c49c:	f7ff ff72 	bl	800c384 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	7d1b      	ldrb	r3, [r3, #20]
 800c4a4:	2b0a      	cmp	r3, #10
 800c4a6:	d013      	beq.n	800c4d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d00f      	beq.n	800c4d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	8b5b      	ldrh	r3, [r3, #26]
 800c4b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d009      	beq.n	800c4d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	8b5b      	ldrh	r3, [r3, #26]
 800c4c0:	f043 0302 	orr.w	r3, r3, #2
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c4ca:	6838      	ldr	r0, [r7, #0]
 800c4cc:	f002 ff68 	bl	800f3a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	7d1b      	ldrb	r3, [r3, #20]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d020      	beq.n	800c51a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <tcp_pcb_remove+0xca>
 800c4e0:	4b13      	ldr	r3, [pc, #76]	; (800c530 <tcp_pcb_remove+0x10c>)
 800c4e2:	f640 0293 	movw	r2, #2195	; 0x893
 800c4e6:	4916      	ldr	r1, [pc, #88]	; (800c540 <tcp_pcb_remove+0x11c>)
 800c4e8:	4813      	ldr	r0, [pc, #76]	; (800c538 <tcp_pcb_remove+0x114>)
 800c4ea:	f008 ff7f 	bl	80153ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d006      	beq.n	800c504 <tcp_pcb_remove+0xe0>
 800c4f6:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <tcp_pcb_remove+0x10c>)
 800c4f8:	f640 0294 	movw	r2, #2196	; 0x894
 800c4fc:	4911      	ldr	r1, [pc, #68]	; (800c544 <tcp_pcb_remove+0x120>)
 800c4fe:	480e      	ldr	r0, [pc, #56]	; (800c538 <tcp_pcb_remove+0x114>)
 800c500:	f008 ff74 	bl	80153ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <tcp_pcb_remove+0xf6>
 800c50c:	4b08      	ldr	r3, [pc, #32]	; (800c530 <tcp_pcb_remove+0x10c>)
 800c50e:	f640 0296 	movw	r2, #2198	; 0x896
 800c512:	490d      	ldr	r1, [pc, #52]	; (800c548 <tcp_pcb_remove+0x124>)
 800c514:	4808      	ldr	r0, [pc, #32]	; (800c538 <tcp_pcb_remove+0x114>)
 800c516:	f008 ff69 	bl	80153ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2200      	movs	r2, #0
 800c51e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2200      	movs	r2, #0
 800c524:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	08016e38 	.word	0x08016e38
 800c534:	080174a0 	.word	0x080174a0
 800c538:	08016e7c 	.word	0x08016e7c
 800c53c:	080174bc 	.word	0x080174bc
 800c540:	080174dc 	.word	0x080174dc
 800c544:	080174f4 	.word	0x080174f4
 800c548:	08017510 	.word	0x08017510

0800c54c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <tcp_next_iss+0x1c>
 800c55a:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <tcp_next_iss+0x38>)
 800c55c:	f640 02af 	movw	r2, #2223	; 0x8af
 800c560:	4909      	ldr	r1, [pc, #36]	; (800c588 <tcp_next_iss+0x3c>)
 800c562:	480a      	ldr	r0, [pc, #40]	; (800c58c <tcp_next_iss+0x40>)
 800c564:	f008 ff42 	bl	80153ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c568:	4b09      	ldr	r3, [pc, #36]	; (800c590 <tcp_next_iss+0x44>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <tcp_next_iss+0x48>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4413      	add	r3, r2
 800c572:	4a07      	ldr	r2, [pc, #28]	; (800c590 <tcp_next_iss+0x44>)
 800c574:	6013      	str	r3, [r2, #0]
  return iss;
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <tcp_next_iss+0x44>)
 800c578:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	08016e38 	.word	0x08016e38
 800c588:	08017528 	.word	0x08017528
 800c58c:	08016e7c 	.word	0x08016e7c
 800c590:	20000014 	.word	0x20000014
 800c594:	2000b8c4 	.word	0x2000b8c4

0800c598 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d106      	bne.n	800c5ba <tcp_eff_send_mss_netif+0x22>
 800c5ac:	4b14      	ldr	r3, [pc, #80]	; (800c600 <tcp_eff_send_mss_netif+0x68>)
 800c5ae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c5b2:	4914      	ldr	r1, [pc, #80]	; (800c604 <tcp_eff_send_mss_netif+0x6c>)
 800c5b4:	4814      	ldr	r0, [pc, #80]	; (800c608 <tcp_eff_send_mss_netif+0x70>)
 800c5b6:	f008 ff19 	bl	80153ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c5c0:	89fb      	ldrh	r3, [r7, #14]
 800c5c2:	e019      	b.n	800c5f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c5c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c5ca:	8afb      	ldrh	r3, [r7, #22]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d012      	beq.n	800c5f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c5d0:	2328      	movs	r3, #40	; 0x28
 800c5d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c5d4:	8afa      	ldrh	r2, [r7, #22]
 800c5d6:	8abb      	ldrh	r3, [r7, #20]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d904      	bls.n	800c5e6 <tcp_eff_send_mss_netif+0x4e>
 800c5dc:	8afa      	ldrh	r2, [r7, #22]
 800c5de:	8abb      	ldrh	r3, [r7, #20]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	e000      	b.n	800c5e8 <tcp_eff_send_mss_netif+0x50>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c5ea:	8a7a      	ldrh	r2, [r7, #18]
 800c5ec:	89fb      	ldrh	r3, [r7, #14]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	bf28      	it	cs
 800c5f2:	4613      	movcs	r3, r2
 800c5f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c5f6:	89fb      	ldrh	r3, [r7, #14]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08016e38 	.word	0x08016e38
 800c604:	08017544 	.word	0x08017544
 800c608:	08016e7c 	.word	0x08016e7c

0800c60c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d119      	bne.n	800c654 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c620:	4b10      	ldr	r3, [pc, #64]	; (800c664 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c622:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c626:	4910      	ldr	r1, [pc, #64]	; (800c668 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c628:	4810      	ldr	r0, [pc, #64]	; (800c66c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c62a:	f008 fedf 	bl	80153ec <iprintf>

  while (pcb != NULL) {
 800c62e:	e011      	b.n	800c654 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d108      	bne.n	800c64e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7fe ffca 	bl	800b5dc <tcp_abort>
      pcb = next;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e002      	b.n	800c654 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1ea      	bne.n	800c630 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c65a:	bf00      	nop
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	08016e38 	.word	0x08016e38
 800c668:	0801756c 	.word	0x0801756c
 800c66c:	08016e7c 	.word	0x08016e7c

0800c670 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d02a      	beq.n	800c6d6 <tcp_netif_ip_addr_changed+0x66>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d026      	beq.n	800c6d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c688:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <tcp_netif_ip_addr_changed+0x70>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff ffbc 	bl	800c60c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c694:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <tcp_netif_ip_addr_changed+0x74>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff ffb6 	bl	800c60c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d017      	beq.n	800c6d6 <tcp_netif_ip_addr_changed+0x66>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d013      	beq.n	800c6d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6ae:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <tcp_netif_ip_addr_changed+0x78>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	e00c      	b.n	800c6d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d103      	bne.n	800c6ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1ef      	bne.n	800c6b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c6d6:	bf00      	nop
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	2000b8c0 	.word	0x2000b8c0
 800c6e4:	2000b8cc 	.word	0x2000b8cc
 800c6e8:	2000b8c8 	.word	0x2000b8c8

0800c6ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d007      	beq.n	800c70c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff fc3f 	bl	800bf84 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c714:	b590      	push	{r4, r7, lr}
 800c716:	b08d      	sub	sp, #52	; 0x34
 800c718:	af04      	add	r7, sp, #16
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d105      	bne.n	800c730 <tcp_input+0x1c>
 800c724:	4b9b      	ldr	r3, [pc, #620]	; (800c994 <tcp_input+0x280>)
 800c726:	2283      	movs	r2, #131	; 0x83
 800c728:	499b      	ldr	r1, [pc, #620]	; (800c998 <tcp_input+0x284>)
 800c72a:	489c      	ldr	r0, [pc, #624]	; (800c99c <tcp_input+0x288>)
 800c72c:	f008 fe5e 	bl	80153ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4a9a      	ldr	r2, [pc, #616]	; (800c9a0 <tcp_input+0x28c>)
 800c736:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	895b      	ldrh	r3, [r3, #10]
 800c73c:	2b13      	cmp	r3, #19
 800c73e:	f240 83c4 	bls.w	800ceca <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c742:	4b98      	ldr	r3, [pc, #608]	; (800c9a4 <tcp_input+0x290>)
 800c744:	695a      	ldr	r2, [r3, #20]
 800c746:	4b97      	ldr	r3, [pc, #604]	; (800c9a4 <tcp_input+0x290>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f007 fdc9 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	f040 83ba 	bne.w	800cece <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c75a:	4b92      	ldr	r3, [pc, #584]	; (800c9a4 <tcp_input+0x290>)
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c762:	2be0      	cmp	r3, #224	; 0xe0
 800c764:	f000 83b3 	beq.w	800cece <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c768:	4b8d      	ldr	r3, [pc, #564]	; (800c9a0 <tcp_input+0x28c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	899b      	ldrh	r3, [r3, #12]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	4618      	mov	r0, r3
 800c772:	f7fc fe61 	bl	8009438 <lwip_htons>
 800c776:	4603      	mov	r3, r0
 800c778:	0b1b      	lsrs	r3, r3, #12
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c782:	7cbb      	ldrb	r3, [r7, #18]
 800c784:	2b13      	cmp	r3, #19
 800c786:	f240 83a2 	bls.w	800cece <tcp_input+0x7ba>
 800c78a:	7cbb      	ldrb	r3, [r7, #18]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	891b      	ldrh	r3, [r3, #8]
 800c792:	429a      	cmp	r2, r3
 800c794:	f200 839b 	bhi.w	800cece <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c798:	7cbb      	ldrb	r3, [r7, #18]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3b14      	subs	r3, #20
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	4b81      	ldr	r3, [pc, #516]	; (800c9a8 <tcp_input+0x294>)
 800c7a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c7a4:	4b81      	ldr	r3, [pc, #516]	; (800c9ac <tcp_input+0x298>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	895a      	ldrh	r2, [r3, #10]
 800c7ae:	7cbb      	ldrb	r3, [r7, #18]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d309      	bcc.n	800c7ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c7b6:	4b7c      	ldr	r3, [pc, #496]	; (800c9a8 <tcp_input+0x294>)
 800c7b8:	881a      	ldrh	r2, [r3, #0]
 800c7ba:	4b7d      	ldr	r3, [pc, #500]	; (800c9b0 <tcp_input+0x29c>)
 800c7bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c7be:	7cbb      	ldrb	r3, [r7, #18]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7fe f8e8 	bl	800a998 <pbuf_remove_header>
 800c7c8:	e04e      	b.n	800c868 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d105      	bne.n	800c7de <tcp_input+0xca>
 800c7d2:	4b70      	ldr	r3, [pc, #448]	; (800c994 <tcp_input+0x280>)
 800c7d4:	22c2      	movs	r2, #194	; 0xc2
 800c7d6:	4977      	ldr	r1, [pc, #476]	; (800c9b4 <tcp_input+0x2a0>)
 800c7d8:	4870      	ldr	r0, [pc, #448]	; (800c99c <tcp_input+0x288>)
 800c7da:	f008 fe07 	bl	80153ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c7de:	2114      	movs	r1, #20
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7fe f8d9 	bl	800a998 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	895a      	ldrh	r2, [r3, #10]
 800c7ea:	4b71      	ldr	r3, [pc, #452]	; (800c9b0 <tcp_input+0x29c>)
 800c7ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c7ee:	4b6e      	ldr	r3, [pc, #440]	; (800c9a8 <tcp_input+0x294>)
 800c7f0:	881a      	ldrh	r2, [r3, #0]
 800c7f2:	4b6f      	ldr	r3, [pc, #444]	; (800c9b0 <tcp_input+0x29c>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c7fa:	4b6d      	ldr	r3, [pc, #436]	; (800c9b0 <tcp_input+0x29c>)
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7fe f8c9 	bl	800a998 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	895b      	ldrh	r3, [r3, #10]
 800c80c:	8a3a      	ldrh	r2, [r7, #16]
 800c80e:	429a      	cmp	r2, r3
 800c810:	f200 835f 	bhi.w	800ced2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	4a64      	ldr	r2, [pc, #400]	; (800c9ac <tcp_input+0x298>)
 800c81c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	8a3a      	ldrh	r2, [r7, #16]
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe f8b6 	bl	800a998 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	891a      	ldrh	r2, [r3, #8]
 800c830:	8a3b      	ldrh	r3, [r7, #16]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	b29a      	uxth	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	895b      	ldrh	r3, [r3, #10]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d005      	beq.n	800c84e <tcp_input+0x13a>
 800c842:	4b54      	ldr	r3, [pc, #336]	; (800c994 <tcp_input+0x280>)
 800c844:	22df      	movs	r2, #223	; 0xdf
 800c846:	495c      	ldr	r1, [pc, #368]	; (800c9b8 <tcp_input+0x2a4>)
 800c848:	4854      	ldr	r0, [pc, #336]	; (800c99c <tcp_input+0x288>)
 800c84a:	f008 fdcf 	bl	80153ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	891a      	ldrh	r2, [r3, #8]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	891b      	ldrh	r3, [r3, #8]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d005      	beq.n	800c868 <tcp_input+0x154>
 800c85c:	4b4d      	ldr	r3, [pc, #308]	; (800c994 <tcp_input+0x280>)
 800c85e:	22e0      	movs	r2, #224	; 0xe0
 800c860:	4956      	ldr	r1, [pc, #344]	; (800c9bc <tcp_input+0x2a8>)
 800c862:	484e      	ldr	r0, [pc, #312]	; (800c99c <tcp_input+0x288>)
 800c864:	f008 fdc2 	bl	80153ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c868:	4b4d      	ldr	r3, [pc, #308]	; (800c9a0 <tcp_input+0x28c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	4b4b      	ldr	r3, [pc, #300]	; (800c9a0 <tcp_input+0x28c>)
 800c872:	681c      	ldr	r4, [r3, #0]
 800c874:	4610      	mov	r0, r2
 800c876:	f7fc fddf 	bl	8009438 <lwip_htons>
 800c87a:	4603      	mov	r3, r0
 800c87c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c87e:	4b48      	ldr	r3, [pc, #288]	; (800c9a0 <tcp_input+0x28c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	885b      	ldrh	r3, [r3, #2]
 800c884:	b29a      	uxth	r2, r3
 800c886:	4b46      	ldr	r3, [pc, #280]	; (800c9a0 <tcp_input+0x28c>)
 800c888:	681c      	ldr	r4, [r3, #0]
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fc fdd4 	bl	8009438 <lwip_htons>
 800c890:	4603      	mov	r3, r0
 800c892:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c894:	4b42      	ldr	r3, [pc, #264]	; (800c9a0 <tcp_input+0x28c>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	4b41      	ldr	r3, [pc, #260]	; (800c9a0 <tcp_input+0x28c>)
 800c89c:	681c      	ldr	r4, [r3, #0]
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fc fddf 	bl	8009462 <lwip_htonl>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	6863      	ldr	r3, [r4, #4]
 800c8aa:	4a45      	ldr	r2, [pc, #276]	; (800c9c0 <tcp_input+0x2ac>)
 800c8ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c8ae:	4b3c      	ldr	r3, [pc, #240]	; (800c9a0 <tcp_input+0x28c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	4b3a      	ldr	r3, [pc, #232]	; (800c9a0 <tcp_input+0x28c>)
 800c8b6:	681c      	ldr	r4, [r3, #0]
 800c8b8:	4610      	mov	r0, r2
 800c8ba:	f7fc fdd2 	bl	8009462 <lwip_htonl>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	60a3      	str	r3, [r4, #8]
 800c8c2:	68a3      	ldr	r3, [r4, #8]
 800c8c4:	4a3f      	ldr	r2, [pc, #252]	; (800c9c4 <tcp_input+0x2b0>)
 800c8c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c8c8:	4b35      	ldr	r3, [pc, #212]	; (800c9a0 <tcp_input+0x28c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	89db      	ldrh	r3, [r3, #14]
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	4b33      	ldr	r3, [pc, #204]	; (800c9a0 <tcp_input+0x28c>)
 800c8d2:	681c      	ldr	r4, [r3, #0]
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7fc fdaf 	bl	8009438 <lwip_htons>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c8de:	4b30      	ldr	r3, [pc, #192]	; (800c9a0 <tcp_input+0x28c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	899b      	ldrh	r3, [r3, #12]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fc fda6 	bl	8009438 <lwip_htons>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	4b34      	ldr	r3, [pc, #208]	; (800c9c8 <tcp_input+0x2b4>)
 800c8f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	891a      	ldrh	r2, [r3, #8]
 800c8fe:	4b33      	ldr	r3, [pc, #204]	; (800c9cc <tcp_input+0x2b8>)
 800c900:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c902:	4b31      	ldr	r3, [pc, #196]	; (800c9c8 <tcp_input+0x2b4>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	f003 0303 	and.w	r3, r3, #3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00c      	beq.n	800c928 <tcp_input+0x214>
    tcplen++;
 800c90e:	4b2f      	ldr	r3, [pc, #188]	; (800c9cc <tcp_input+0x2b8>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	3301      	adds	r3, #1
 800c914:	b29a      	uxth	r2, r3
 800c916:	4b2d      	ldr	r3, [pc, #180]	; (800c9cc <tcp_input+0x2b8>)
 800c918:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	891a      	ldrh	r2, [r3, #8]
 800c91e:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <tcp_input+0x2b8>)
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	429a      	cmp	r2, r3
 800c924:	f200 82d7 	bhi.w	800ced6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c928:	2300      	movs	r3, #0
 800c92a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c92c:	4b28      	ldr	r3, [pc, #160]	; (800c9d0 <tcp_input+0x2bc>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	61fb      	str	r3, [r7, #28]
 800c932:	e09d      	b.n	800ca70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	7d1b      	ldrb	r3, [r3, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d105      	bne.n	800c948 <tcp_input+0x234>
 800c93c:	4b15      	ldr	r3, [pc, #84]	; (800c994 <tcp_input+0x280>)
 800c93e:	22fb      	movs	r2, #251	; 0xfb
 800c940:	4924      	ldr	r1, [pc, #144]	; (800c9d4 <tcp_input+0x2c0>)
 800c942:	4816      	ldr	r0, [pc, #88]	; (800c99c <tcp_input+0x288>)
 800c944:	f008 fd52 	bl	80153ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
 800c94c:	2b0a      	cmp	r3, #10
 800c94e:	d105      	bne.n	800c95c <tcp_input+0x248>
 800c950:	4b10      	ldr	r3, [pc, #64]	; (800c994 <tcp_input+0x280>)
 800c952:	22fc      	movs	r2, #252	; 0xfc
 800c954:	4920      	ldr	r1, [pc, #128]	; (800c9d8 <tcp_input+0x2c4>)
 800c956:	4811      	ldr	r0, [pc, #68]	; (800c99c <tcp_input+0x288>)
 800c958:	f008 fd48 	bl	80153ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	7d1b      	ldrb	r3, [r3, #20]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d105      	bne.n	800c970 <tcp_input+0x25c>
 800c964:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <tcp_input+0x280>)
 800c966:	22fd      	movs	r2, #253	; 0xfd
 800c968:	491c      	ldr	r1, [pc, #112]	; (800c9dc <tcp_input+0x2c8>)
 800c96a:	480c      	ldr	r0, [pc, #48]	; (800c99c <tcp_input+0x288>)
 800c96c:	f008 fd3e 	bl	80153ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	7a1b      	ldrb	r3, [r3, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d033      	beq.n	800c9e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	7a1a      	ldrb	r2, [r3, #8]
 800c97c:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <tcp_input+0x290>)
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c984:	3301      	adds	r3, #1
 800c986:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c988:	429a      	cmp	r2, r3
 800c98a:	d029      	beq.n	800c9e0 <tcp_input+0x2cc>
      prev = pcb;
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	61bb      	str	r3, [r7, #24]
      continue;
 800c990:	e06b      	b.n	800ca6a <tcp_input+0x356>
 800c992:	bf00      	nop
 800c994:	080175a0 	.word	0x080175a0
 800c998:	080175d4 	.word	0x080175d4
 800c99c:	080175ec 	.word	0x080175ec
 800c9a0:	20004a14 	.word	0x20004a14
 800c9a4:	2000818c 	.word	0x2000818c
 800c9a8:	20004a18 	.word	0x20004a18
 800c9ac:	20004a1c 	.word	0x20004a1c
 800c9b0:	20004a1a 	.word	0x20004a1a
 800c9b4:	08017614 	.word	0x08017614
 800c9b8:	08017624 	.word	0x08017624
 800c9bc:	08017630 	.word	0x08017630
 800c9c0:	20004a24 	.word	0x20004a24
 800c9c4:	20004a28 	.word	0x20004a28
 800c9c8:	20004a30 	.word	0x20004a30
 800c9cc:	20004a2e 	.word	0x20004a2e
 800c9d0:	2000b8c0 	.word	0x2000b8c0
 800c9d4:	08017650 	.word	0x08017650
 800c9d8:	08017678 	.word	0x08017678
 800c9dc:	080176a4 	.word	0x080176a4
    }

    if (pcb->remote_port == tcphdr->src &&
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	8b1a      	ldrh	r2, [r3, #24]
 800c9e4:	4b94      	ldr	r3, [pc, #592]	; (800cc38 <tcp_input+0x524>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d13a      	bne.n	800ca66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	8ada      	ldrh	r2, [r3, #22]
 800c9f4:	4b90      	ldr	r3, [pc, #576]	; (800cc38 <tcp_input+0x524>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	885b      	ldrh	r3, [r3, #2]
 800c9fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d132      	bne.n	800ca66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	4b8d      	ldr	r3, [pc, #564]	; (800cc3c <tcp_input+0x528>)
 800ca06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d12c      	bne.n	800ca66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	4b8a      	ldr	r3, [pc, #552]	; (800cc3c <tcp_input+0x528>)
 800ca12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d126      	bne.n	800ca66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d106      	bne.n	800ca30 <tcp_input+0x31c>
 800ca22:	4b87      	ldr	r3, [pc, #540]	; (800cc40 <tcp_input+0x52c>)
 800ca24:	f240 120d 	movw	r2, #269	; 0x10d
 800ca28:	4986      	ldr	r1, [pc, #536]	; (800cc44 <tcp_input+0x530>)
 800ca2a:	4887      	ldr	r0, [pc, #540]	; (800cc48 <tcp_input+0x534>)
 800ca2c:	f008 fcde 	bl	80153ec <iprintf>
      if (prev != NULL) {
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00a      	beq.n	800ca4c <tcp_input+0x338>
        prev->next = pcb->next;
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	68da      	ldr	r2, [r3, #12]
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ca3e:	4b83      	ldr	r3, [pc, #524]	; (800cc4c <tcp_input+0x538>)
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ca46:	4a81      	ldr	r2, [pc, #516]	; (800cc4c <tcp_input+0x538>)
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	69fa      	ldr	r2, [r7, #28]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d111      	bne.n	800ca7a <tcp_input+0x366>
 800ca56:	4b7a      	ldr	r3, [pc, #488]	; (800cc40 <tcp_input+0x52c>)
 800ca58:	f240 1215 	movw	r2, #277	; 0x115
 800ca5c:	497c      	ldr	r1, [pc, #496]	; (800cc50 <tcp_input+0x53c>)
 800ca5e:	487a      	ldr	r0, [pc, #488]	; (800cc48 <tcp_input+0x534>)
 800ca60:	f008 fcc4 	bl	80153ec <iprintf>
      break;
 800ca64:	e009      	b.n	800ca7a <tcp_input+0x366>
    }
    prev = pcb;
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f47f af5e 	bne.w	800c934 <tcp_input+0x220>
 800ca78:	e000      	b.n	800ca7c <tcp_input+0x368>
      break;
 800ca7a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f040 8095 	bne.w	800cbae <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca84:	4b73      	ldr	r3, [pc, #460]	; (800cc54 <tcp_input+0x540>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	61fb      	str	r3, [r7, #28]
 800ca8a:	e03f      	b.n	800cb0c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	7d1b      	ldrb	r3, [r3, #20]
 800ca90:	2b0a      	cmp	r3, #10
 800ca92:	d006      	beq.n	800caa2 <tcp_input+0x38e>
 800ca94:	4b6a      	ldr	r3, [pc, #424]	; (800cc40 <tcp_input+0x52c>)
 800ca96:	f240 121f 	movw	r2, #287	; 0x11f
 800ca9a:	496f      	ldr	r1, [pc, #444]	; (800cc58 <tcp_input+0x544>)
 800ca9c:	486a      	ldr	r0, [pc, #424]	; (800cc48 <tcp_input+0x534>)
 800ca9e:	f008 fca5 	bl	80153ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	7a1b      	ldrb	r3, [r3, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d009      	beq.n	800cabe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	7a1a      	ldrb	r2, [r3, #8]
 800caae:	4b63      	ldr	r3, [pc, #396]	; (800cc3c <tcp_input+0x528>)
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cab6:	3301      	adds	r3, #1
 800cab8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800caba:	429a      	cmp	r2, r3
 800cabc:	d122      	bne.n	800cb04 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	8b1a      	ldrh	r2, [r3, #24]
 800cac2:	4b5d      	ldr	r3, [pc, #372]	; (800cc38 <tcp_input+0x524>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	429a      	cmp	r2, r3
 800cacc:	d11b      	bne.n	800cb06 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	8ada      	ldrh	r2, [r3, #22]
 800cad2:	4b59      	ldr	r3, [pc, #356]	; (800cc38 <tcp_input+0x524>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	885b      	ldrh	r3, [r3, #2]
 800cad8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cada:	429a      	cmp	r2, r3
 800cadc:	d113      	bne.n	800cb06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	4b56      	ldr	r3, [pc, #344]	; (800cc3c <tcp_input+0x528>)
 800cae4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d10d      	bne.n	800cb06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	4b53      	ldr	r3, [pc, #332]	; (800cc3c <tcp_input+0x528>)
 800caf0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d107      	bne.n	800cb06 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800caf6:	69f8      	ldr	r0, [r7, #28]
 800caf8:	f000 fb52 	bl	800d1a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7fd ffd1 	bl	800aaa4 <pbuf_free>
        return;
 800cb02:	e1ee      	b.n	800cee2 <tcp_input+0x7ce>
        continue;
 800cb04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1bc      	bne.n	800ca8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb16:	4b51      	ldr	r3, [pc, #324]	; (800cc5c <tcp_input+0x548>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	e02a      	b.n	800cb74 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	7a1b      	ldrb	r3, [r3, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00c      	beq.n	800cb40 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	7a1a      	ldrb	r2, [r3, #8]
 800cb2a:	4b44      	ldr	r3, [pc, #272]	; (800cc3c <tcp_input+0x528>)
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb32:	3301      	adds	r3, #1
 800cb34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d002      	beq.n	800cb40 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	61bb      	str	r3, [r7, #24]
        continue;
 800cb3e:	e016      	b.n	800cb6e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	8ada      	ldrh	r2, [r3, #22]
 800cb44:	4b3c      	ldr	r3, [pc, #240]	; (800cc38 <tcp_input+0x524>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	885b      	ldrh	r3, [r3, #2]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d10c      	bne.n	800cb6a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b39      	ldr	r3, [pc, #228]	; (800cc3c <tcp_input+0x528>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d00f      	beq.n	800cb7c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00d      	beq.n	800cb7e <tcp_input+0x46a>
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1d1      	bne.n	800cb1e <tcp_input+0x40a>
 800cb7a:	e000      	b.n	800cb7e <tcp_input+0x46a>
            break;
 800cb7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d014      	beq.n	800cbae <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cb92:	4b32      	ldr	r3, [pc, #200]	; (800cc5c <tcp_input+0x548>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cb9a:	4a30      	ldr	r2, [pc, #192]	; (800cc5c <tcp_input+0x548>)
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cba0:	6978      	ldr	r0, [r7, #20]
 800cba2:	f000 f9ff 	bl	800cfa4 <tcp_listen_input>
      }
      pbuf_free(p);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7fd ff7c 	bl	800aaa4 <pbuf_free>
      return;
 800cbac:	e199      	b.n	800cee2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 8160 	beq.w	800ce76 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cbb6:	4b2a      	ldr	r3, [pc, #168]	; (800cc60 <tcp_input+0x54c>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	891a      	ldrh	r2, [r3, #8]
 800cbc0:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <tcp_input+0x54c>)
 800cbc2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cbc4:	4a26      	ldr	r2, [pc, #152]	; (800cc60 <tcp_input+0x54c>)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cbca:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <tcp_input+0x524>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a24      	ldr	r2, [pc, #144]	; (800cc60 <tcp_input+0x54c>)
 800cbd0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cbd2:	4b24      	ldr	r3, [pc, #144]	; (800cc64 <tcp_input+0x550>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cbd8:	4b23      	ldr	r3, [pc, #140]	; (800cc68 <tcp_input+0x554>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cbde:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <tcp_input+0x558>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cbe4:	4b22      	ldr	r3, [pc, #136]	; (800cc70 <tcp_input+0x55c>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	f003 0308 	and.w	r3, r3, #8
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d006      	beq.n	800cbfe <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7b5b      	ldrb	r3, [r3, #13]
 800cbf4:	f043 0301 	orr.w	r3, r3, #1
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d038      	beq.n	800cc78 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cc06:	69f8      	ldr	r0, [r7, #28]
 800cc08:	f7ff f940 	bl	800be8c <tcp_process_refused_data>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	f113 0f0d 	cmn.w	r3, #13
 800cc12:	d007      	beq.n	800cc24 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d02d      	beq.n	800cc78 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cc1c:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <tcp_input+0x560>)
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d029      	beq.n	800cc78 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f040 8104 	bne.w	800ce36 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cc2e:	69f8      	ldr	r0, [r7, #28]
 800cc30:	f003 f9ce 	bl	800ffd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cc34:	e0ff      	b.n	800ce36 <tcp_input+0x722>
 800cc36:	bf00      	nop
 800cc38:	20004a14 	.word	0x20004a14
 800cc3c:	2000818c 	.word	0x2000818c
 800cc40:	080175a0 	.word	0x080175a0
 800cc44:	080176cc 	.word	0x080176cc
 800cc48:	080175ec 	.word	0x080175ec
 800cc4c:	2000b8c0 	.word	0x2000b8c0
 800cc50:	080176f8 	.word	0x080176f8
 800cc54:	2000b8d0 	.word	0x2000b8d0
 800cc58:	08017724 	.word	0x08017724
 800cc5c:	2000b8c8 	.word	0x2000b8c8
 800cc60:	20004a04 	.word	0x20004a04
 800cc64:	20004a34 	.word	0x20004a34
 800cc68:	20004a31 	.word	0x20004a31
 800cc6c:	20004a2c 	.word	0x20004a2c
 800cc70:	20004a30 	.word	0x20004a30
 800cc74:	20004a2e 	.word	0x20004a2e
      }
    }
    tcp_input_pcb = pcb;
 800cc78:	4a9b      	ldr	r2, [pc, #620]	; (800cee8 <tcp_input+0x7d4>)
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cc7e:	69f8      	ldr	r0, [r7, #28]
 800cc80:	f000 fb0a 	bl	800d298 <tcp_process>
 800cc84:	4603      	mov	r3, r0
 800cc86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cc88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc8c:	f113 0f0d 	cmn.w	r3, #13
 800cc90:	f000 80d3 	beq.w	800ce3a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800cc94:	4b95      	ldr	r3, [pc, #596]	; (800ceec <tcp_input+0x7d8>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	f003 0308 	and.w	r3, r3, #8
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d015      	beq.n	800cccc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d008      	beq.n	800ccbc <tcp_input+0x5a8>
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	6912      	ldr	r2, [r2, #16]
 800ccb4:	f06f 010d 	mvn.w	r1, #13
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ccbc:	69f9      	ldr	r1, [r7, #28]
 800ccbe:	488c      	ldr	r0, [pc, #560]	; (800cef0 <tcp_input+0x7dc>)
 800ccc0:	f7ff fbb0 	bl	800c424 <tcp_pcb_remove>
        tcp_free(pcb);
 800ccc4:	69f8      	ldr	r0, [r7, #28]
 800ccc6:	f7fe f9a9 	bl	800b01c <tcp_free>
 800ccca:	e0c1      	b.n	800ce50 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ccd0:	4b88      	ldr	r3, [pc, #544]	; (800cef4 <tcp_input+0x7e0>)
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01d      	beq.n	800cd14 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ccd8:	4b86      	ldr	r3, [pc, #536]	; (800cef4 <tcp_input+0x7e0>)
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00a      	beq.n	800ccfe <tcp_input+0x5ea>
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	6910      	ldr	r0, [r2, #16]
 800ccf2:	89fa      	ldrh	r2, [r7, #14]
 800ccf4:	69f9      	ldr	r1, [r7, #28]
 800ccf6:	4798      	blx	r3
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	74fb      	strb	r3, [r7, #19]
 800ccfc:	e001      	b.n	800cd02 <tcp_input+0x5ee>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cd02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd06:	f113 0f0d 	cmn.w	r3, #13
 800cd0a:	f000 8098 	beq.w	800ce3e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cd0e:	4b79      	ldr	r3, [pc, #484]	; (800cef4 <tcp_input+0x7e0>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cd14:	69f8      	ldr	r0, [r7, #28]
 800cd16:	f000 f905 	bl	800cf24 <tcp_input_delayed_close>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f040 8090 	bne.w	800ce42 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cd22:	4b75      	ldr	r3, [pc, #468]	; (800cef8 <tcp_input+0x7e4>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d041      	beq.n	800cdae <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <tcp_input+0x62c>
 800cd32:	4b72      	ldr	r3, [pc, #456]	; (800cefc <tcp_input+0x7e8>)
 800cd34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cd38:	4971      	ldr	r1, [pc, #452]	; (800cf00 <tcp_input+0x7ec>)
 800cd3a:	4872      	ldr	r0, [pc, #456]	; (800cf04 <tcp_input+0x7f0>)
 800cd3c:	f008 fb56 	bl	80153ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	8b5b      	ldrh	r3, [r3, #26]
 800cd44:	f003 0310 	and.w	r3, r3, #16
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d008      	beq.n	800cd5e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cd4c:	4b6a      	ldr	r3, [pc, #424]	; (800cef8 <tcp_input+0x7e4>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fd fea7 	bl	800aaa4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cd56:	69f8      	ldr	r0, [r7, #28]
 800cd58:	f7fe fc40 	bl	800b5dc <tcp_abort>
            goto aborted;
 800cd5c:	e078      	b.n	800ce50 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00c      	beq.n	800cd82 <tcp_input+0x66e>
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	6918      	ldr	r0, [r3, #16]
 800cd72:	4b61      	ldr	r3, [pc, #388]	; (800cef8 <tcp_input+0x7e4>)
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	2300      	movs	r3, #0
 800cd78:	69f9      	ldr	r1, [r7, #28]
 800cd7a:	47a0      	blx	r4
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	74fb      	strb	r3, [r7, #19]
 800cd80:	e008      	b.n	800cd94 <tcp_input+0x680>
 800cd82:	4b5d      	ldr	r3, [pc, #372]	; (800cef8 <tcp_input+0x7e4>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	2300      	movs	r3, #0
 800cd88:	69f9      	ldr	r1, [r7, #28]
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f7ff f952 	bl	800c034 <tcp_recv_null>
 800cd90:	4603      	mov	r3, r0
 800cd92:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cd94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd98:	f113 0f0d 	cmn.w	r3, #13
 800cd9c:	d053      	beq.n	800ce46 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cd9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d003      	beq.n	800cdae <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cda6:	4b54      	ldr	r3, [pc, #336]	; (800cef8 <tcp_input+0x7e4>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cdae:	4b4f      	ldr	r3, [pc, #316]	; (800ceec <tcp_input+0x7d8>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d030      	beq.n	800ce1c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d009      	beq.n	800cdd6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdc6:	7b5a      	ldrb	r2, [r3, #13]
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdcc:	f042 0220 	orr.w	r2, r2, #32
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	735a      	strb	r2, [r3, #13]
 800cdd4:	e022      	b.n	800ce1c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdde:	d005      	beq.n	800cdec <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cde4:	3301      	adds	r3, #1
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00b      	beq.n	800ce0e <tcp_input+0x6fa>
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	6918      	ldr	r0, [r3, #16]
 800ce00:	2300      	movs	r3, #0
 800ce02:	2200      	movs	r2, #0
 800ce04:	69f9      	ldr	r1, [r7, #28]
 800ce06:	47a0      	blx	r4
 800ce08:	4603      	mov	r3, r0
 800ce0a:	74fb      	strb	r3, [r7, #19]
 800ce0c:	e001      	b.n	800ce12 <tcp_input+0x6fe>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ce12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce16:	f113 0f0d 	cmn.w	r3, #13
 800ce1a:	d016      	beq.n	800ce4a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ce1c:	4b32      	ldr	r3, [pc, #200]	; (800cee8 <tcp_input+0x7d4>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ce22:	69f8      	ldr	r0, [r7, #28]
 800ce24:	f000 f87e 	bl	800cf24 <tcp_input_delayed_close>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10f      	bne.n	800ce4e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ce2e:	69f8      	ldr	r0, [r7, #28]
 800ce30:	f002 fab6 	bl	800f3a0 <tcp_output>
 800ce34:	e00c      	b.n	800ce50 <tcp_input+0x73c>
        goto aborted;
 800ce36:	bf00      	nop
 800ce38:	e00a      	b.n	800ce50 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ce3a:	bf00      	nop
 800ce3c:	e008      	b.n	800ce50 <tcp_input+0x73c>
              goto aborted;
 800ce3e:	bf00      	nop
 800ce40:	e006      	b.n	800ce50 <tcp_input+0x73c>
          goto aborted;
 800ce42:	bf00      	nop
 800ce44:	e004      	b.n	800ce50 <tcp_input+0x73c>
            goto aborted;
 800ce46:	bf00      	nop
 800ce48:	e002      	b.n	800ce50 <tcp_input+0x73c>
              goto aborted;
 800ce4a:	bf00      	nop
 800ce4c:	e000      	b.n	800ce50 <tcp_input+0x73c>
          goto aborted;
 800ce4e:	bf00      	nop
    tcp_input_pcb = NULL;
 800ce50:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <tcp_input+0x7d4>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ce56:	4b28      	ldr	r3, [pc, #160]	; (800cef8 <tcp_input+0x7e4>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ce5c:	4b2a      	ldr	r3, [pc, #168]	; (800cf08 <tcp_input+0x7f4>)
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d03d      	beq.n	800cee0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800ce64:	4b28      	ldr	r3, [pc, #160]	; (800cf08 <tcp_input+0x7f4>)
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fd fe1b 	bl	800aaa4 <pbuf_free>
      inseg.p = NULL;
 800ce6e:	4b26      	ldr	r3, [pc, #152]	; (800cf08 <tcp_input+0x7f4>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ce74:	e034      	b.n	800cee0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ce76:	4b25      	ldr	r3, [pc, #148]	; (800cf0c <tcp_input+0x7f8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	899b      	ldrh	r3, [r3, #12]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fc fada 	bl	8009438 <lwip_htons>
 800ce84:	4603      	mov	r3, r0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d118      	bne.n	800cec2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce90:	4b1f      	ldr	r3, [pc, #124]	; (800cf10 <tcp_input+0x7fc>)
 800ce92:	6819      	ldr	r1, [r3, #0]
 800ce94:	4b1f      	ldr	r3, [pc, #124]	; (800cf14 <tcp_input+0x800>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	4b1f      	ldr	r3, [pc, #124]	; (800cf18 <tcp_input+0x804>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cea0:	4b1a      	ldr	r3, [pc, #104]	; (800cf0c <tcp_input+0x7f8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cea4:	885b      	ldrh	r3, [r3, #2]
 800cea6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cea8:	4a18      	ldr	r2, [pc, #96]	; (800cf0c <tcp_input+0x7f8>)
 800ceaa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceac:	8812      	ldrh	r2, [r2, #0]
 800ceae:	b292      	uxth	r2, r2
 800ceb0:	9202      	str	r2, [sp, #8]
 800ceb2:	9301      	str	r3, [sp, #4]
 800ceb4:	4b19      	ldr	r3, [pc, #100]	; (800cf1c <tcp_input+0x808>)
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <tcp_input+0x80c>)
 800ceba:	4602      	mov	r2, r0
 800cebc:	2000      	movs	r0, #0
 800cebe:	f003 f835 	bl	800ff2c <tcp_rst>
    pbuf_free(p);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7fd fdee 	bl	800aaa4 <pbuf_free>
  return;
 800cec8:	e00a      	b.n	800cee0 <tcp_input+0x7cc>
    goto dropped;
 800ceca:	bf00      	nop
 800cecc:	e004      	b.n	800ced8 <tcp_input+0x7c4>
dropped:
 800cece:	bf00      	nop
 800ced0:	e002      	b.n	800ced8 <tcp_input+0x7c4>
      goto dropped;
 800ced2:	bf00      	nop
 800ced4:	e000      	b.n	800ced8 <tcp_input+0x7c4>
      goto dropped;
 800ced6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7fd fde3 	bl	800aaa4 <pbuf_free>
 800cede:	e000      	b.n	800cee2 <tcp_input+0x7ce>
  return;
 800cee0:	bf00      	nop
}
 800cee2:	3724      	adds	r7, #36	; 0x24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd90      	pop	{r4, r7, pc}
 800cee8:	2000b8d4 	.word	0x2000b8d4
 800ceec:	20004a31 	.word	0x20004a31
 800cef0:	2000b8c0 	.word	0x2000b8c0
 800cef4:	20004a2c 	.word	0x20004a2c
 800cef8:	20004a34 	.word	0x20004a34
 800cefc:	080175a0 	.word	0x080175a0
 800cf00:	08017754 	.word	0x08017754
 800cf04:	080175ec 	.word	0x080175ec
 800cf08:	20004a04 	.word	0x20004a04
 800cf0c:	20004a14 	.word	0x20004a14
 800cf10:	20004a28 	.word	0x20004a28
 800cf14:	20004a2e 	.word	0x20004a2e
 800cf18:	20004a24 	.word	0x20004a24
 800cf1c:	2000819c 	.word	0x2000819c
 800cf20:	200081a0 	.word	0x200081a0

0800cf24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <tcp_input_delayed_close+0x1c>
 800cf32:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <tcp_input_delayed_close+0x6c>)
 800cf34:	f240 225a 	movw	r2, #602	; 0x25a
 800cf38:	4916      	ldr	r1, [pc, #88]	; (800cf94 <tcp_input_delayed_close+0x70>)
 800cf3a:	4817      	ldr	r0, [pc, #92]	; (800cf98 <tcp_input_delayed_close+0x74>)
 800cf3c:	f008 fa56 	bl	80153ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cf40:	4b16      	ldr	r3, [pc, #88]	; (800cf9c <tcp_input_delayed_close+0x78>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 0310 	and.w	r3, r3, #16
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d01c      	beq.n	800cf86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	8b5b      	ldrh	r3, [r3, #26]
 800cf50:	f003 0310 	and.w	r3, r3, #16
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10d      	bne.n	800cf74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d008      	beq.n	800cf74 <tcp_input_delayed_close+0x50>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6912      	ldr	r2, [r2, #16]
 800cf6c:	f06f 010e 	mvn.w	r1, #14
 800cf70:	4610      	mov	r0, r2
 800cf72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	480a      	ldr	r0, [pc, #40]	; (800cfa0 <tcp_input_delayed_close+0x7c>)
 800cf78:	f7ff fa54 	bl	800c424 <tcp_pcb_remove>
    tcp_free(pcb);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7fe f84d 	bl	800b01c <tcp_free>
    return 1;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e000      	b.n	800cf88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	080175a0 	.word	0x080175a0
 800cf94:	08017770 	.word	0x08017770
 800cf98:	080175ec 	.word	0x080175ec
 800cf9c:	20004a31 	.word	0x20004a31
 800cfa0:	2000b8c0 	.word	0x2000b8c0

0800cfa4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cfa4:	b590      	push	{r4, r7, lr}
 800cfa6:	b08b      	sub	sp, #44	; 0x2c
 800cfa8:	af04      	add	r7, sp, #16
 800cfaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cfac:	4b6f      	ldr	r3, [pc, #444]	; (800d16c <tcp_listen_input+0x1c8>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f040 80d3 	bne.w	800d160 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <tcp_listen_input+0x2a>
 800cfc0:	4b6b      	ldr	r3, [pc, #428]	; (800d170 <tcp_listen_input+0x1cc>)
 800cfc2:	f240 2281 	movw	r2, #641	; 0x281
 800cfc6:	496b      	ldr	r1, [pc, #428]	; (800d174 <tcp_listen_input+0x1d0>)
 800cfc8:	486b      	ldr	r0, [pc, #428]	; (800d178 <tcp_listen_input+0x1d4>)
 800cfca:	f008 fa0f 	bl	80153ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cfce:	4b67      	ldr	r3, [pc, #412]	; (800d16c <tcp_listen_input+0x1c8>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	f003 0310 	and.w	r3, r3, #16
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d019      	beq.n	800d00e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfda:	4b68      	ldr	r3, [pc, #416]	; (800d17c <tcp_listen_input+0x1d8>)
 800cfdc:	6819      	ldr	r1, [r3, #0]
 800cfde:	4b68      	ldr	r3, [pc, #416]	; (800d180 <tcp_listen_input+0x1dc>)
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b67      	ldr	r3, [pc, #412]	; (800d184 <tcp_listen_input+0x1e0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfea:	4b67      	ldr	r3, [pc, #412]	; (800d188 <tcp_listen_input+0x1e4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfee:	885b      	ldrh	r3, [r3, #2]
 800cff0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cff2:	4a65      	ldr	r2, [pc, #404]	; (800d188 <tcp_listen_input+0x1e4>)
 800cff4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cff6:	8812      	ldrh	r2, [r2, #0]
 800cff8:	b292      	uxth	r2, r2
 800cffa:	9202      	str	r2, [sp, #8]
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	4b63      	ldr	r3, [pc, #396]	; (800d18c <tcp_listen_input+0x1e8>)
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	4b63      	ldr	r3, [pc, #396]	; (800d190 <tcp_listen_input+0x1ec>)
 800d004:	4602      	mov	r2, r0
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f002 ff90 	bl	800ff2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d00c:	e0aa      	b.n	800d164 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800d00e:	4b57      	ldr	r3, [pc, #348]	; (800d16c <tcp_listen_input+0x1c8>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	f003 0302 	and.w	r3, r3, #2
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 80a4 	beq.w	800d164 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7d5b      	ldrb	r3, [r3, #21]
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff f92b 	bl	800c27c <tcp_alloc>
 800d026:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d111      	bne.n	800d052 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <tcp_listen_input+0xa8>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	6910      	ldr	r0, [r2, #16]
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d042:	2100      	movs	r1, #0
 800d044:	4798      	blx	r3
 800d046:	4603      	mov	r3, r0
 800d048:	73bb      	strb	r3, [r7, #14]
      return;
 800d04a:	e08c      	b.n	800d166 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d04c:	23f0      	movs	r3, #240	; 0xf0
 800d04e:	73bb      	strb	r3, [r7, #14]
      return;
 800d050:	e089      	b.n	800d166 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d052:	4b50      	ldr	r3, [pc, #320]	; (800d194 <tcp_listen_input+0x1f0>)
 800d054:	695a      	ldr	r2, [r3, #20]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d05a:	4b4e      	ldr	r3, [pc, #312]	; (800d194 <tcp_listen_input+0x1f0>)
 800d05c:	691a      	ldr	r2, [r3, #16]
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8ada      	ldrh	r2, [r3, #22]
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d06a:	4b47      	ldr	r3, [pc, #284]	; (800d188 <tcp_listen_input+0x1e4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	b29a      	uxth	r2, r3
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2203      	movs	r2, #3
 800d07a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d07c:	4b41      	ldr	r3, [pc, #260]	; (800d184 <tcp_listen_input+0x1e0>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d08e:	6978      	ldr	r0, [r7, #20]
 800d090:	f7ff fa5c 	bl	800c54c <tcp_next_iss>
 800d094:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d0ae:	4b35      	ldr	r3, [pc, #212]	; (800d184 <tcp_listen_input+0x1e0>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	1e5a      	subs	r2, r3, #1
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	691a      	ldr	r2, [r3, #16]
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7a5b      	ldrb	r3, [r3, #9]
 800d0ca:	f003 030c 	and.w	r3, r3, #12
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7a1a      	ldrb	r2, [r3, #8]
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d0dc:	4b2e      	ldr	r3, [pc, #184]	; (800d198 <tcp_listen_input+0x1f4>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	60da      	str	r2, [r3, #12]
 800d0e4:	4a2c      	ldr	r2, [pc, #176]	; (800d198 <tcp_listen_input+0x1f4>)
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	6013      	str	r3, [r2, #0]
 800d0ea:	f003 f8e1 	bl	80102b0 <tcp_timer_needed>
 800d0ee:	4b2b      	ldr	r3, [pc, #172]	; (800d19c <tcp_listen_input+0x1f8>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d0f4:	6978      	ldr	r0, [r7, #20]
 800d0f6:	f001 fd8f 	bl	800ec18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d0fa:	4b23      	ldr	r3, [pc, #140]	; (800d188 <tcp_listen_input+0x1e4>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	89db      	ldrh	r3, [r3, #14]
 800d100:	b29a      	uxth	r2, r3
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	3304      	adds	r3, #4
 800d11c:	4618      	mov	r0, r3
 800d11e:	f006 fe2f 	bl	8013d80 <ip4_route>
 800d122:	4601      	mov	r1, r0
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	3304      	adds	r3, #4
 800d128:	461a      	mov	r2, r3
 800d12a:	4620      	mov	r0, r4
 800d12c:	f7ff fa34 	bl	800c598 <tcp_eff_send_mss_netif>
 800d130:	4603      	mov	r3, r0
 800d132:	461a      	mov	r2, r3
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d138:	2112      	movs	r1, #18
 800d13a:	6978      	ldr	r0, [r7, #20]
 800d13c:	f002 f842 	bl	800f1c4 <tcp_enqueue_flags>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d004      	beq.n	800d156 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d14c:	2100      	movs	r1, #0
 800d14e:	6978      	ldr	r0, [r7, #20]
 800d150:	f7fe f986 	bl	800b460 <tcp_abandon>
      return;
 800d154:	e007      	b.n	800d166 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800d156:	6978      	ldr	r0, [r7, #20]
 800d158:	f002 f922 	bl	800f3a0 <tcp_output>
  return;
 800d15c:	bf00      	nop
 800d15e:	e001      	b.n	800d164 <tcp_listen_input+0x1c0>
    return;
 800d160:	bf00      	nop
 800d162:	e000      	b.n	800d166 <tcp_listen_input+0x1c2>
  return;
 800d164:	bf00      	nop
}
 800d166:	371c      	adds	r7, #28
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd90      	pop	{r4, r7, pc}
 800d16c:	20004a30 	.word	0x20004a30
 800d170:	080175a0 	.word	0x080175a0
 800d174:	08017798 	.word	0x08017798
 800d178:	080175ec 	.word	0x080175ec
 800d17c:	20004a28 	.word	0x20004a28
 800d180:	20004a2e 	.word	0x20004a2e
 800d184:	20004a24 	.word	0x20004a24
 800d188:	20004a14 	.word	0x20004a14
 800d18c:	2000819c 	.word	0x2000819c
 800d190:	200081a0 	.word	0x200081a0
 800d194:	2000818c 	.word	0x2000818c
 800d198:	2000b8c0 	.word	0x2000b8c0
 800d19c:	2000b8bc 	.word	0x2000b8bc

0800d1a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b086      	sub	sp, #24
 800d1a4:	af04      	add	r7, sp, #16
 800d1a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d1a8:	4b30      	ldr	r3, [pc, #192]	; (800d26c <tcp_timewait_input+0xcc>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d154      	bne.n	800d25e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <tcp_timewait_input+0x28>
 800d1ba:	4b2d      	ldr	r3, [pc, #180]	; (800d270 <tcp_timewait_input+0xd0>)
 800d1bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d1c0:	492c      	ldr	r1, [pc, #176]	; (800d274 <tcp_timewait_input+0xd4>)
 800d1c2:	482d      	ldr	r0, [pc, #180]	; (800d278 <tcp_timewait_input+0xd8>)
 800d1c4:	f008 f912 	bl	80153ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d1c8:	4b28      	ldr	r3, [pc, #160]	; (800d26c <tcp_timewait_input+0xcc>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	f003 0302 	and.w	r3, r3, #2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02a      	beq.n	800d22a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d1d4:	4b29      	ldr	r3, [pc, #164]	; (800d27c <tcp_timewait_input+0xdc>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	db2d      	blt.n	800d23e <tcp_timewait_input+0x9e>
 800d1e2:	4b26      	ldr	r3, [pc, #152]	; (800d27c <tcp_timewait_input+0xdc>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1ee:	440b      	add	r3, r1
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	dc23      	bgt.n	800d23e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1f6:	4b22      	ldr	r3, [pc, #136]	; (800d280 <tcp_timewait_input+0xe0>)
 800d1f8:	6819      	ldr	r1, [r3, #0]
 800d1fa:	4b22      	ldr	r3, [pc, #136]	; (800d284 <tcp_timewait_input+0xe4>)
 800d1fc:	881b      	ldrh	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	4b1e      	ldr	r3, [pc, #120]	; (800d27c <tcp_timewait_input+0xdc>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d206:	4b20      	ldr	r3, [pc, #128]	; (800d288 <tcp_timewait_input+0xe8>)
 800d208:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d20a:	885b      	ldrh	r3, [r3, #2]
 800d20c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d20e:	4a1e      	ldr	r2, [pc, #120]	; (800d288 <tcp_timewait_input+0xe8>)
 800d210:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d212:	8812      	ldrh	r2, [r2, #0]
 800d214:	b292      	uxth	r2, r2
 800d216:	9202      	str	r2, [sp, #8]
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <tcp_timewait_input+0xec>)
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	4b1c      	ldr	r3, [pc, #112]	; (800d290 <tcp_timewait_input+0xf0>)
 800d220:	4602      	mov	r2, r0
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f002 fe82 	bl	800ff2c <tcp_rst>
      return;
 800d228:	e01c      	b.n	800d264 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800d22a:	4b10      	ldr	r3, [pc, #64]	; (800d26c <tcp_timewait_input+0xcc>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d236:	4b17      	ldr	r3, [pc, #92]	; (800d294 <tcp_timewait_input+0xf4>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d23e:	4b11      	ldr	r3, [pc, #68]	; (800d284 <tcp_timewait_input+0xe4>)
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00d      	beq.n	800d262 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	8b5b      	ldrh	r3, [r3, #26]
 800d24a:	f043 0302 	orr.w	r3, r3, #2
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f002 f8a3 	bl	800f3a0 <tcp_output>
  }
  return;
 800d25a:	bf00      	nop
 800d25c:	e001      	b.n	800d262 <tcp_timewait_input+0xc2>
    return;
 800d25e:	bf00      	nop
 800d260:	e000      	b.n	800d264 <tcp_timewait_input+0xc4>
  return;
 800d262:	bf00      	nop
}
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20004a30 	.word	0x20004a30
 800d270:	080175a0 	.word	0x080175a0
 800d274:	080177b8 	.word	0x080177b8
 800d278:	080175ec 	.word	0x080175ec
 800d27c:	20004a24 	.word	0x20004a24
 800d280:	20004a28 	.word	0x20004a28
 800d284:	20004a2e 	.word	0x20004a2e
 800d288:	20004a14 	.word	0x20004a14
 800d28c:	2000819c 	.word	0x2000819c
 800d290:	200081a0 	.word	0x200081a0
 800d294:	2000b8c4 	.word	0x2000b8c4

0800d298 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b08d      	sub	sp, #52	; 0x34
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <tcp_process+0x24>
 800d2ae:	4ba5      	ldr	r3, [pc, #660]	; (800d544 <tcp_process+0x2ac>)
 800d2b0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d2b4:	49a4      	ldr	r1, [pc, #656]	; (800d548 <tcp_process+0x2b0>)
 800d2b6:	48a5      	ldr	r0, [pc, #660]	; (800d54c <tcp_process+0x2b4>)
 800d2b8:	f008 f898 	bl	80153ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d2bc:	4ba4      	ldr	r3, [pc, #656]	; (800d550 <tcp_process+0x2b8>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d04e      	beq.n	800d366 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7d1b      	ldrb	r3, [r3, #20]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d108      	bne.n	800d2e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2d4:	4b9f      	ldr	r3, [pc, #636]	; (800d554 <tcp_process+0x2bc>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d123      	bne.n	800d324 <tcp_process+0x8c>
        acceptable = 1;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	76fb      	strb	r3, [r7, #27]
 800d2e0:	e020      	b.n	800d324 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2e6:	4b9c      	ldr	r3, [pc, #624]	; (800d558 <tcp_process+0x2c0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d102      	bne.n	800d2f4 <tcp_process+0x5c>
        acceptable = 1;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	76fb      	strb	r3, [r7, #27]
 800d2f2:	e017      	b.n	800d324 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d2f4:	4b98      	ldr	r3, [pc, #608]	; (800d558 <tcp_process+0x2c0>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	db10      	blt.n	800d324 <tcp_process+0x8c>
 800d302:	4b95      	ldr	r3, [pc, #596]	; (800d558 <tcp_process+0x2c0>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30a:	6879      	ldr	r1, [r7, #4]
 800d30c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d30e:	440b      	add	r3, r1
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	2b00      	cmp	r3, #0
 800d314:	dc06      	bgt.n	800d324 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	8b5b      	ldrh	r3, [r3, #26]
 800d31a:	f043 0302 	orr.w	r3, r3, #2
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d324:	7efb      	ldrb	r3, [r7, #27]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01b      	beq.n	800d362 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7d1b      	ldrb	r3, [r3, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <tcp_process+0xa8>
 800d332:	4b84      	ldr	r3, [pc, #528]	; (800d544 <tcp_process+0x2ac>)
 800d334:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d338:	4988      	ldr	r1, [pc, #544]	; (800d55c <tcp_process+0x2c4>)
 800d33a:	4884      	ldr	r0, [pc, #528]	; (800d54c <tcp_process+0x2b4>)
 800d33c:	f008 f856 	bl	80153ec <iprintf>
      recv_flags |= TF_RESET;
 800d340:	4b87      	ldr	r3, [pc, #540]	; (800d560 <tcp_process+0x2c8>)
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	f043 0308 	orr.w	r3, r3, #8
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	4b85      	ldr	r3, [pc, #532]	; (800d560 <tcp_process+0x2c8>)
 800d34c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8b5b      	ldrh	r3, [r3, #26]
 800d352:	f023 0301 	bic.w	r3, r3, #1
 800d356:	b29a      	uxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d35c:	f06f 030d 	mvn.w	r3, #13
 800d360:	e37a      	b.n	800da58 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	e378      	b.n	800da58 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d366:	4b7a      	ldr	r3, [pc, #488]	; (800d550 <tcp_process+0x2b8>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d010      	beq.n	800d394 <tcp_process+0xfc>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	7d1b      	ldrb	r3, [r3, #20]
 800d376:	2b02      	cmp	r3, #2
 800d378:	d00c      	beq.n	800d394 <tcp_process+0xfc>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	7d1b      	ldrb	r3, [r3, #20]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d008      	beq.n	800d394 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	8b5b      	ldrh	r3, [r3, #26]
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	e361      	b.n	800da58 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8b5b      	ldrh	r3, [r3, #26]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d103      	bne.n	800d3a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d3a0:	4b70      	ldr	r3, [pc, #448]	; (800d564 <tcp_process+0x2cc>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f001 fc2d 	bl	800ec18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	7d1b      	ldrb	r3, [r3, #20]
 800d3c2:	3b02      	subs	r3, #2
 800d3c4:	2b07      	cmp	r3, #7
 800d3c6:	f200 8337 	bhi.w	800da38 <tcp_process+0x7a0>
 800d3ca:	a201      	add	r2, pc, #4	; (adr r2, 800d3d0 <tcp_process+0x138>)
 800d3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d0:	0800d3f1 	.word	0x0800d3f1
 800d3d4:	0800d621 	.word	0x0800d621
 800d3d8:	0800d799 	.word	0x0800d799
 800d3dc:	0800d7c3 	.word	0x0800d7c3
 800d3e0:	0800d8e7 	.word	0x0800d8e7
 800d3e4:	0800d799 	.word	0x0800d799
 800d3e8:	0800d973 	.word	0x0800d973
 800d3ec:	0800da03 	.word	0x0800da03
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d3f0:	4b57      	ldr	r3, [pc, #348]	; (800d550 <tcp_process+0x2b8>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 0310 	and.w	r3, r3, #16
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 80e4 	beq.w	800d5c6 <tcp_process+0x32e>
 800d3fe:	4b54      	ldr	r3, [pc, #336]	; (800d550 <tcp_process+0x2b8>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 0302 	and.w	r3, r3, #2
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 80dd 	beq.w	800d5c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	4b50      	ldr	r3, [pc, #320]	; (800d554 <tcp_process+0x2bc>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	f040 80d5 	bne.w	800d5c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d41c:	4b4e      	ldr	r3, [pc, #312]	; (800d558 <tcp_process+0x2c0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d42e:	4b49      	ldr	r3, [pc, #292]	; (800d554 <tcp_process+0x2bc>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d436:	4b4c      	ldr	r3, [pc, #304]	; (800d568 <tcp_process+0x2d0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	89db      	ldrh	r3, [r3, #14]
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d450:	4b41      	ldr	r3, [pc, #260]	; (800d558 <tcp_process+0x2c0>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	1e5a      	subs	r2, r3, #1
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2204      	movs	r2, #4
 800d45e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3304      	adds	r3, #4
 800d468:	4618      	mov	r0, r3
 800d46a:	f006 fc89 	bl	8013d80 <ip4_route>
 800d46e:	4601      	mov	r1, r0
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3304      	adds	r3, #4
 800d474:	461a      	mov	r2, r3
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff f88e 	bl	800c598 <tcp_eff_send_mss_netif>
 800d47c:	4603      	mov	r3, r0
 800d47e:	461a      	mov	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d488:	009a      	lsls	r2, r3, #2
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	f241 111c 	movw	r1, #4380	; 0x111c
 800d494:	428b      	cmp	r3, r1
 800d496:	bf38      	it	cc
 800d498:	460b      	movcc	r3, r1
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d204      	bcs.n	800d4a8 <tcp_process+0x210>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	e00d      	b.n	800d4c4 <tcp_process+0x22c>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d904      	bls.n	800d4c0 <tcp_process+0x228>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	e001      	b.n	800d4c4 <tcp_process+0x22c>
 800d4c0:	f241 131c 	movw	r3, #4380	; 0x111c
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d106      	bne.n	800d4e2 <tcp_process+0x24a>
 800d4d4:	4b1b      	ldr	r3, [pc, #108]	; (800d544 <tcp_process+0x2ac>)
 800d4d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d4da:	4924      	ldr	r1, [pc, #144]	; (800d56c <tcp_process+0x2d4>)
 800d4dc:	481b      	ldr	r0, [pc, #108]	; (800d54c <tcp_process+0x2b4>)
 800d4de:	f007 ff85 	bl	80153ec <iprintf>
        --pcb->snd_queuelen;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d111      	bne.n	800d522 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d502:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <tcp_process+0x280>
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <tcp_process+0x2ac>)
 800d50c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d510:	4917      	ldr	r1, [pc, #92]	; (800d570 <tcp_process+0x2d8>)
 800d512:	480e      	ldr	r0, [pc, #56]	; (800d54c <tcp_process+0x2b4>)
 800d514:	f007 ff6a 	bl	80153ec <iprintf>
          pcb->unsent = rseg->next;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d520:	e003      	b.n	800d52a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d52a:	69f8      	ldr	r0, [r7, #28]
 800d52c:	f7fe fd3e 	bl	800bfac <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d534:	2b00      	cmp	r3, #0
 800d536:	d11d      	bne.n	800d574 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d53e:	861a      	strh	r2, [r3, #48]	; 0x30
 800d540:	e01f      	b.n	800d582 <tcp_process+0x2ea>
 800d542:	bf00      	nop
 800d544:	080175a0 	.word	0x080175a0
 800d548:	080177d8 	.word	0x080177d8
 800d54c:	080175ec 	.word	0x080175ec
 800d550:	20004a30 	.word	0x20004a30
 800d554:	20004a28 	.word	0x20004a28
 800d558:	20004a24 	.word	0x20004a24
 800d55c:	080177f4 	.word	0x080177f4
 800d560:	20004a31 	.word	0x20004a31
 800d564:	2000b8c4 	.word	0x2000b8c4
 800d568:	20004a14 	.word	0x20004a14
 800d56c:	08017814 	.word	0x08017814
 800d570:	0801782c 	.word	0x0801782c
        } else {
          pcb->rtime = 0;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <tcp_process+0x30a>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	6910      	ldr	r0, [r2, #16]
 800d596:	2200      	movs	r2, #0
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4798      	blx	r3
 800d59c:	4603      	mov	r3, r0
 800d59e:	76bb      	strb	r3, [r7, #26]
 800d5a0:	e001      	b.n	800d5a6 <tcp_process+0x30e>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d5a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d5aa:	f113 0f0d 	cmn.w	r3, #13
 800d5ae:	d102      	bne.n	800d5b6 <tcp_process+0x31e>
          return ERR_ABRT;
 800d5b0:	f06f 030c 	mvn.w	r3, #12
 800d5b4:	e250      	b.n	800da58 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	8b5b      	ldrh	r3, [r3, #26]
 800d5ba:	f043 0302 	orr.w	r3, r3, #2
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d5c4:	e23a      	b.n	800da3c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d5c6:	4b9d      	ldr	r3, [pc, #628]	; (800d83c <tcp_process+0x5a4>)
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	f003 0310 	and.w	r3, r3, #16
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f000 8234 	beq.w	800da3c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5d4:	4b9a      	ldr	r3, [pc, #616]	; (800d840 <tcp_process+0x5a8>)
 800d5d6:	6819      	ldr	r1, [r3, #0]
 800d5d8:	4b9a      	ldr	r3, [pc, #616]	; (800d844 <tcp_process+0x5ac>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	4b9a      	ldr	r3, [pc, #616]	; (800d848 <tcp_process+0x5b0>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5e4:	4b99      	ldr	r3, [pc, #612]	; (800d84c <tcp_process+0x5b4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5e8:	885b      	ldrh	r3, [r3, #2]
 800d5ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5ec:	4a97      	ldr	r2, [pc, #604]	; (800d84c <tcp_process+0x5b4>)
 800d5ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5f0:	8812      	ldrh	r2, [r2, #0]
 800d5f2:	b292      	uxth	r2, r2
 800d5f4:	9202      	str	r2, [sp, #8]
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	4b95      	ldr	r3, [pc, #596]	; (800d850 <tcp_process+0x5b8>)
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	4b95      	ldr	r3, [pc, #596]	; (800d854 <tcp_process+0x5bc>)
 800d5fe:	4602      	mov	r2, r0
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f002 fc93 	bl	800ff2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d60c:	2b05      	cmp	r3, #5
 800d60e:	f200 8215 	bhi.w	800da3c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f002 fa51 	bl	800fac0 <tcp_rexmit_rto>
      break;
 800d61e:	e20d      	b.n	800da3c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d620:	4b86      	ldr	r3, [pc, #536]	; (800d83c <tcp_process+0x5a4>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 0310 	and.w	r3, r3, #16
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 80a1 	beq.w	800d770 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d62e:	4b84      	ldr	r3, [pc, #528]	; (800d840 <tcp_process+0x5a8>)
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	db7e      	blt.n	800d73c <tcp_process+0x4a4>
 800d63e:	4b80      	ldr	r3, [pc, #512]	; (800d840 <tcp_process+0x5a8>)
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	dc77      	bgt.n	800d73c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2204      	movs	r2, #4
 800d650:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d656:	2b00      	cmp	r3, #0
 800d658:	d102      	bne.n	800d660 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d65a:	23fa      	movs	r3, #250	; 0xfa
 800d65c:	76bb      	strb	r3, [r7, #26]
 800d65e:	e01d      	b.n	800d69c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d106      	bne.n	800d678 <tcp_process+0x3e0>
 800d66a:	4b7b      	ldr	r3, [pc, #492]	; (800d858 <tcp_process+0x5c0>)
 800d66c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d670:	497a      	ldr	r1, [pc, #488]	; (800d85c <tcp_process+0x5c4>)
 800d672:	487b      	ldr	r0, [pc, #492]	; (800d860 <tcp_process+0x5c8>)
 800d674:	f007 feba 	bl	80153ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00a      	beq.n	800d698 <tcp_process+0x400>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	6910      	ldr	r0, [r2, #16]
 800d68c:	2200      	movs	r2, #0
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	4798      	blx	r3
 800d692:	4603      	mov	r3, r0
 800d694:	76bb      	strb	r3, [r7, #26]
 800d696:	e001      	b.n	800d69c <tcp_process+0x404>
 800d698:	23f0      	movs	r3, #240	; 0xf0
 800d69a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d69c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00a      	beq.n	800d6ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d6a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d6a8:	f113 0f0d 	cmn.w	r3, #13
 800d6ac:	d002      	beq.n	800d6b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7fd ff94 	bl	800b5dc <tcp_abort>
            }
            return ERR_ABRT;
 800d6b4:	f06f 030c 	mvn.w	r3, #12
 800d6b8:	e1ce      	b.n	800da58 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 fae0 	bl	800dc80 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d6c0:	4b68      	ldr	r3, [pc, #416]	; (800d864 <tcp_process+0x5cc>)
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d005      	beq.n	800d6d4 <tcp_process+0x43c>
            recv_acked--;
 800d6c8:	4b66      	ldr	r3, [pc, #408]	; (800d864 <tcp_process+0x5cc>)
 800d6ca:	881b      	ldrh	r3, [r3, #0]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	4b64      	ldr	r3, [pc, #400]	; (800d864 <tcp_process+0x5cc>)
 800d6d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6d8:	009a      	lsls	r2, r3, #2
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	f241 111c 	movw	r1, #4380	; 0x111c
 800d6e4:	428b      	cmp	r3, r1
 800d6e6:	bf38      	it	cc
 800d6e8:	460b      	movcc	r3, r1
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d204      	bcs.n	800d6f8 <tcp_process+0x460>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	e00d      	b.n	800d714 <tcp_process+0x47c>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	f241 121c 	movw	r2, #4380	; 0x111c
 800d702:	4293      	cmp	r3, r2
 800d704:	d904      	bls.n	800d710 <tcp_process+0x478>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	e001      	b.n	800d714 <tcp_process+0x47c>
 800d710:	f241 131c 	movw	r3, #4380	; 0x111c
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d71a:	4b53      	ldr	r3, [pc, #332]	; (800d868 <tcp_process+0x5d0>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b00      	cmp	r3, #0
 800d724:	d037      	beq.n	800d796 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	8b5b      	ldrh	r3, [r3, #26]
 800d72a:	f043 0302 	orr.w	r3, r3, #2
 800d72e:	b29a      	uxth	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2207      	movs	r2, #7
 800d738:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d73a:	e02c      	b.n	800d796 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d73c:	4b40      	ldr	r3, [pc, #256]	; (800d840 <tcp_process+0x5a8>)
 800d73e:	6819      	ldr	r1, [r3, #0]
 800d740:	4b40      	ldr	r3, [pc, #256]	; (800d844 <tcp_process+0x5ac>)
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	461a      	mov	r2, r3
 800d746:	4b40      	ldr	r3, [pc, #256]	; (800d848 <tcp_process+0x5b0>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d74c:	4b3f      	ldr	r3, [pc, #252]	; (800d84c <tcp_process+0x5b4>)
 800d74e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d750:	885b      	ldrh	r3, [r3, #2]
 800d752:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d754:	4a3d      	ldr	r2, [pc, #244]	; (800d84c <tcp_process+0x5b4>)
 800d756:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d758:	8812      	ldrh	r2, [r2, #0]
 800d75a:	b292      	uxth	r2, r2
 800d75c:	9202      	str	r2, [sp, #8]
 800d75e:	9301      	str	r3, [sp, #4]
 800d760:	4b3b      	ldr	r3, [pc, #236]	; (800d850 <tcp_process+0x5b8>)
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	4b3b      	ldr	r3, [pc, #236]	; (800d854 <tcp_process+0x5bc>)
 800d766:	4602      	mov	r2, r0
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f002 fbdf 	bl	800ff2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d76e:	e167      	b.n	800da40 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d770:	4b32      	ldr	r3, [pc, #200]	; (800d83c <tcp_process+0x5a4>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	f003 0302 	and.w	r3, r3, #2
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 8161 	beq.w	800da40 <tcp_process+0x7a8>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d782:	1e5a      	subs	r2, r3, #1
 800d784:	4b30      	ldr	r3, [pc, #192]	; (800d848 <tcp_process+0x5b0>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	429a      	cmp	r2, r3
 800d78a:	f040 8159 	bne.w	800da40 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f002 f9b8 	bl	800fb04 <tcp_rexmit>
      break;
 800d794:	e154      	b.n	800da40 <tcp_process+0x7a8>
 800d796:	e153      	b.n	800da40 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 fa71 	bl	800dc80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d79e:	4b32      	ldr	r3, [pc, #200]	; (800d868 <tcp_process+0x5d0>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 814c 	beq.w	800da44 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	8b5b      	ldrh	r3, [r3, #26]
 800d7b0:	f043 0302 	orr.w	r3, r3, #2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2207      	movs	r2, #7
 800d7be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7c0:	e140      	b.n	800da44 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fa5c 	bl	800dc80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d7c8:	4b27      	ldr	r3, [pc, #156]	; (800d868 <tcp_process+0x5d0>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f003 0320 	and.w	r3, r3, #32
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d071      	beq.n	800d8b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7d4:	4b19      	ldr	r3, [pc, #100]	; (800d83c <tcp_process+0x5a4>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 0310 	and.w	r3, r3, #16
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d060      	beq.n	800d8a2 <tcp_process+0x60a>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7e4:	4b16      	ldr	r3, [pc, #88]	; (800d840 <tcp_process+0x5a8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d15a      	bne.n	800d8a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d156      	bne.n	800d8a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8b5b      	ldrh	r3, [r3, #26]
 800d7f8:	f043 0302 	orr.w	r3, r3, #2
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7fe fdbe 	bl	800c384 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d808:	4b18      	ldr	r3, [pc, #96]	; (800d86c <tcp_process+0x5d4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d105      	bne.n	800d81e <tcp_process+0x586>
 800d812:	4b16      	ldr	r3, [pc, #88]	; (800d86c <tcp_process+0x5d4>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	4a14      	ldr	r2, [pc, #80]	; (800d86c <tcp_process+0x5d4>)
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	e02e      	b.n	800d87c <tcp_process+0x5e4>
 800d81e:	4b13      	ldr	r3, [pc, #76]	; (800d86c <tcp_process+0x5d4>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	e027      	b.n	800d876 <tcp_process+0x5de>
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d11f      	bne.n	800d870 <tcp_process+0x5d8>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	68da      	ldr	r2, [r3, #12]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	60da      	str	r2, [r3, #12]
 800d838:	e020      	b.n	800d87c <tcp_process+0x5e4>
 800d83a:	bf00      	nop
 800d83c:	20004a30 	.word	0x20004a30
 800d840:	20004a28 	.word	0x20004a28
 800d844:	20004a2e 	.word	0x20004a2e
 800d848:	20004a24 	.word	0x20004a24
 800d84c:	20004a14 	.word	0x20004a14
 800d850:	2000819c 	.word	0x2000819c
 800d854:	200081a0 	.word	0x200081a0
 800d858:	080175a0 	.word	0x080175a0
 800d85c:	08017840 	.word	0x08017840
 800d860:	080175ec 	.word	0x080175ec
 800d864:	20004a2c 	.word	0x20004a2c
 800d868:	20004a31 	.word	0x20004a31
 800d86c:	2000b8c0 	.word	0x2000b8c0
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	617b      	str	r3, [r7, #20]
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1d4      	bne.n	800d826 <tcp_process+0x58e>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	60da      	str	r2, [r3, #12]
 800d882:	4b77      	ldr	r3, [pc, #476]	; (800da60 <tcp_process+0x7c8>)
 800d884:	2201      	movs	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	220a      	movs	r2, #10
 800d88c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d88e:	4b75      	ldr	r3, [pc, #468]	; (800da64 <tcp_process+0x7cc>)
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	60da      	str	r2, [r3, #12]
 800d896:	4a73      	ldr	r2, [pc, #460]	; (800da64 <tcp_process+0x7cc>)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6013      	str	r3, [r2, #0]
 800d89c:	f002 fd08 	bl	80102b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d8a0:	e0d2      	b.n	800da48 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	8b5b      	ldrh	r3, [r3, #26]
 800d8a6:	f043 0302 	orr.w	r3, r3, #2
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2208      	movs	r2, #8
 800d8b4:	751a      	strb	r2, [r3, #20]
      break;
 800d8b6:	e0c7      	b.n	800da48 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8b8:	4b6b      	ldr	r3, [pc, #428]	; (800da68 <tcp_process+0x7d0>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80c1 	beq.w	800da48 <tcp_process+0x7b0>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8ca:	4b68      	ldr	r3, [pc, #416]	; (800da6c <tcp_process+0x7d4>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	f040 80ba 	bne.w	800da48 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 80b5 	bne.w	800da48 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2206      	movs	r2, #6
 800d8e2:	751a      	strb	r2, [r3, #20]
      break;
 800d8e4:	e0b0      	b.n	800da48 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f9ca 	bl	800dc80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d8ec:	4b60      	ldr	r3, [pc, #384]	; (800da70 <tcp_process+0x7d8>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	f003 0320 	and.w	r3, r3, #32
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80a9 	beq.w	800da4c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	8b5b      	ldrh	r3, [r3, #26]
 800d8fe:	f043 0302 	orr.w	r3, r3, #2
 800d902:	b29a      	uxth	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fe fd3b 	bl	800c384 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d90e:	4b59      	ldr	r3, [pc, #356]	; (800da74 <tcp_process+0x7dc>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d105      	bne.n	800d924 <tcp_process+0x68c>
 800d918:	4b56      	ldr	r3, [pc, #344]	; (800da74 <tcp_process+0x7dc>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	4a55      	ldr	r2, [pc, #340]	; (800da74 <tcp_process+0x7dc>)
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	e013      	b.n	800d94c <tcp_process+0x6b4>
 800d924:	4b53      	ldr	r3, [pc, #332]	; (800da74 <tcp_process+0x7dc>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	613b      	str	r3, [r7, #16]
 800d92a:	e00c      	b.n	800d946 <tcp_process+0x6ae>
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	d104      	bne.n	800d940 <tcp_process+0x6a8>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68da      	ldr	r2, [r3, #12]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	60da      	str	r2, [r3, #12]
 800d93e:	e005      	b.n	800d94c <tcp_process+0x6b4>
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	613b      	str	r3, [r7, #16]
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1ef      	bne.n	800d92c <tcp_process+0x694>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	60da      	str	r2, [r3, #12]
 800d952:	4b43      	ldr	r3, [pc, #268]	; (800da60 <tcp_process+0x7c8>)
 800d954:	2201      	movs	r2, #1
 800d956:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	220a      	movs	r2, #10
 800d95c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d95e:	4b41      	ldr	r3, [pc, #260]	; (800da64 <tcp_process+0x7cc>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	60da      	str	r2, [r3, #12]
 800d966:	4a3f      	ldr	r2, [pc, #252]	; (800da64 <tcp_process+0x7cc>)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	f002 fca0 	bl	80102b0 <tcp_timer_needed>
      }
      break;
 800d970:	e06c      	b.n	800da4c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 f984 	bl	800dc80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d978:	4b3b      	ldr	r3, [pc, #236]	; (800da68 <tcp_process+0x7d0>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	f003 0310 	and.w	r3, r3, #16
 800d980:	2b00      	cmp	r3, #0
 800d982:	d065      	beq.n	800da50 <tcp_process+0x7b8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d988:	4b38      	ldr	r3, [pc, #224]	; (800da6c <tcp_process+0x7d4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d15f      	bne.n	800da50 <tcp_process+0x7b8>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d15b      	bne.n	800da50 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7fe fcf3 	bl	800c384 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d99e:	4b35      	ldr	r3, [pc, #212]	; (800da74 <tcp_process+0x7dc>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d105      	bne.n	800d9b4 <tcp_process+0x71c>
 800d9a8:	4b32      	ldr	r3, [pc, #200]	; (800da74 <tcp_process+0x7dc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	4a31      	ldr	r2, [pc, #196]	; (800da74 <tcp_process+0x7dc>)
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	e013      	b.n	800d9dc <tcp_process+0x744>
 800d9b4:	4b2f      	ldr	r3, [pc, #188]	; (800da74 <tcp_process+0x7dc>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	e00c      	b.n	800d9d6 <tcp_process+0x73e>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d104      	bne.n	800d9d0 <tcp_process+0x738>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68da      	ldr	r2, [r3, #12]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	60da      	str	r2, [r3, #12]
 800d9ce:	e005      	b.n	800d9dc <tcp_process+0x744>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1ef      	bne.n	800d9bc <tcp_process+0x724>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	60da      	str	r2, [r3, #12]
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	; (800da60 <tcp_process+0x7c8>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	220a      	movs	r2, #10
 800d9ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d9ee:	4b1d      	ldr	r3, [pc, #116]	; (800da64 <tcp_process+0x7cc>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	60da      	str	r2, [r3, #12]
 800d9f6:	4a1b      	ldr	r2, [pc, #108]	; (800da64 <tcp_process+0x7cc>)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	f002 fc58 	bl	80102b0 <tcp_timer_needed>
      }
      break;
 800da00:	e026      	b.n	800da50 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f93c 	bl	800dc80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800da08:	4b17      	ldr	r3, [pc, #92]	; (800da68 <tcp_process+0x7d0>)
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	f003 0310 	and.w	r3, r3, #16
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01f      	beq.n	800da54 <tcp_process+0x7bc>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da18:	4b14      	ldr	r3, [pc, #80]	; (800da6c <tcp_process+0x7d4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d119      	bne.n	800da54 <tcp_process+0x7bc>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d115      	bne.n	800da54 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800da28:	4b11      	ldr	r3, [pc, #68]	; (800da70 <tcp_process+0x7d8>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f043 0310 	orr.w	r3, r3, #16
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <tcp_process+0x7d8>)
 800da34:	701a      	strb	r2, [r3, #0]
      }
      break;
 800da36:	e00d      	b.n	800da54 <tcp_process+0x7bc>
    default:
      break;
 800da38:	bf00      	nop
 800da3a:	e00c      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da3c:	bf00      	nop
 800da3e:	e00a      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da40:	bf00      	nop
 800da42:	e008      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da44:	bf00      	nop
 800da46:	e006      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da48:	bf00      	nop
 800da4a:	e004      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da4c:	bf00      	nop
 800da4e:	e002      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da50:	bf00      	nop
 800da52:	e000      	b.n	800da56 <tcp_process+0x7be>
      break;
 800da54:	bf00      	nop
  }
  return ERR_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3724      	adds	r7, #36	; 0x24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}
 800da60:	2000b8bc 	.word	0x2000b8bc
 800da64:	2000b8d0 	.word	0x2000b8d0
 800da68:	20004a30 	.word	0x20004a30
 800da6c:	20004a28 	.word	0x20004a28
 800da70:	20004a31 	.word	0x20004a31
 800da74:	2000b8c0 	.word	0x2000b8c0

0800da78 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_oos_insert_segment+0x1e>
 800da88:	4b3b      	ldr	r3, [pc, #236]	; (800db78 <tcp_oos_insert_segment+0x100>)
 800da8a:	f240 421f 	movw	r2, #1055	; 0x41f
 800da8e:	493b      	ldr	r1, [pc, #236]	; (800db7c <tcp_oos_insert_segment+0x104>)
 800da90:	483b      	ldr	r0, [pc, #236]	; (800db80 <tcp_oos_insert_segment+0x108>)
 800da92:	f007 fcab 	bl	80153ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	899b      	ldrh	r3, [r3, #12]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fb fcca 	bl	8009438 <lwip_htons>
 800daa4:	4603      	mov	r3, r0
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	f003 0301 	and.w	r3, r3, #1
 800daac:	2b00      	cmp	r3, #0
 800daae:	d028      	beq.n	800db02 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dab0:	6838      	ldr	r0, [r7, #0]
 800dab2:	f7fe fa67 	bl	800bf84 <tcp_segs_free>
    next = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	603b      	str	r3, [r7, #0]
 800daba:	e056      	b.n	800db6a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	899b      	ldrh	r3, [r3, #12]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fb fcb7 	bl	8009438 <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00d      	beq.n	800daf2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	899b      	ldrh	r3, [r3, #12]
 800dadc:	b29c      	uxth	r4, r3
 800dade:	2001      	movs	r0, #1
 800dae0:	f7fb fcaa 	bl	8009438 <lwip_htons>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	4322      	orrs	r2, r4
 800daee:	b292      	uxth	r2, r2
 800daf0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7fe fa55 	bl	800bfac <tcp_seg_free>
    while (next &&
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00e      	beq.n	800db26 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	891b      	ldrh	r3, [r3, #8]
 800db0c:	461a      	mov	r2, r3
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <tcp_oos_insert_segment+0x10c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	441a      	add	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	8909      	ldrh	r1, [r1, #8]
 800db1e:	440b      	add	r3, r1
 800db20:	1ad3      	subs	r3, r2, r3
    while (next &&
 800db22:	2b00      	cmp	r3, #0
 800db24:	daca      	bge.n	800dabc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01e      	beq.n	800db6a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	891b      	ldrh	r3, [r3, #8]
 800db30:	461a      	mov	r2, r3
 800db32:	4b14      	ldr	r3, [pc, #80]	; (800db84 <tcp_oos_insert_segment+0x10c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	441a      	add	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800db40:	2b00      	cmp	r3, #0
 800db42:	dd12      	ble.n	800db6a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	4b0d      	ldr	r3, [pc, #52]	; (800db84 <tcp_oos_insert_segment+0x10c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	b29b      	uxth	r3, r3
 800db52:	1ad3      	subs	r3, r2, r3
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	891b      	ldrh	r3, [r3, #8]
 800db62:	4619      	mov	r1, r3
 800db64:	4610      	mov	r0, r2
 800db66:	f7fc fe17 	bl	800a798 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	601a      	str	r2, [r3, #0]
}
 800db70:	bf00      	nop
 800db72:	3714      	adds	r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	bd90      	pop	{r4, r7, pc}
 800db78:	080175a0 	.word	0x080175a0
 800db7c:	08017860 	.word	0x08017860
 800db80:	080175ec 	.word	0x080175ec
 800db84:	20004a24 	.word	0x20004a24

0800db88 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800db88:	b5b0      	push	{r4, r5, r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800db96:	e03e      	b.n	800dc16 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fd f80a 	bl	800abc0 <pbuf_clen>
 800dbac:	4603      	mov	r3, r0
 800dbae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbb6:	8a7a      	ldrh	r2, [r7, #18]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d906      	bls.n	800dbca <tcp_free_acked_segments+0x42>
 800dbbc:	4b2a      	ldr	r3, [pc, #168]	; (800dc68 <tcp_free_acked_segments+0xe0>)
 800dbbe:	f240 4257 	movw	r2, #1111	; 0x457
 800dbc2:	492a      	ldr	r1, [pc, #168]	; (800dc6c <tcp_free_acked_segments+0xe4>)
 800dbc4:	482a      	ldr	r0, [pc, #168]	; (800dc70 <tcp_free_acked_segments+0xe8>)
 800dbc6:	f007 fc11 	bl	80153ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dbd0:	8a7b      	ldrh	r3, [r7, #18]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	891a      	ldrh	r2, [r3, #8]
 800dbe0:	4b24      	ldr	r3, [pc, #144]	; (800dc74 <tcp_free_acked_segments+0xec>)
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	4b22      	ldr	r3, [pc, #136]	; (800dc74 <tcp_free_acked_segments+0xec>)
 800dbea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dbec:	6978      	ldr	r0, [r7, #20]
 800dbee:	f7fe f9dd 	bl	800bfac <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00c      	beq.n	800dc16 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d109      	bne.n	800dc16 <tcp_free_acked_segments+0x8e>
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d106      	bne.n	800dc16 <tcp_free_acked_segments+0x8e>
 800dc08:	4b17      	ldr	r3, [pc, #92]	; (800dc68 <tcp_free_acked_segments+0xe0>)
 800dc0a:	f240 4262 	movw	r2, #1122	; 0x462
 800dc0e:	491a      	ldr	r1, [pc, #104]	; (800dc78 <tcp_free_acked_segments+0xf0>)
 800dc10:	4817      	ldr	r0, [pc, #92]	; (800dc70 <tcp_free_acked_segments+0xe8>)
 800dc12:	f007 fbeb 	bl	80153ec <iprintf>
  while (seg_list != NULL &&
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d020      	beq.n	800dc5e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fb fc1d 	bl	8009462 <lwip_htonl>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	891b      	ldrh	r3, [r3, #8]
 800dc2e:	461d      	mov	r5, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	899b      	ldrh	r3, [r3, #12]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fb fbfd 	bl	8009438 <lwip_htons>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	f003 0303 	and.w	r3, r3, #3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <tcp_free_acked_segments+0xc6>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <tcp_free_acked_segments+0xc8>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	442b      	add	r3, r5
 800dc52:	18e2      	adds	r2, r4, r3
 800dc54:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <tcp_free_acked_segments+0xf4>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dd9c      	ble.n	800db98 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bdb0      	pop	{r4, r5, r7, pc}
 800dc68:	080175a0 	.word	0x080175a0
 800dc6c:	08017888 	.word	0x08017888
 800dc70:	080175ec 	.word	0x080175ec
 800dc74:	20004a2c 	.word	0x20004a2c
 800dc78:	080178b0 	.word	0x080178b0
 800dc7c:	20004a28 	.word	0x20004a28

0800dc80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dc80:	b5b0      	push	{r4, r5, r7, lr}
 800dc82:	b094      	sub	sp, #80	; 0x50
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <tcp_receive+0x20>
 800dc92:	4ba6      	ldr	r3, [pc, #664]	; (800df2c <tcp_receive+0x2ac>)
 800dc94:	f240 427b 	movw	r2, #1147	; 0x47b
 800dc98:	49a5      	ldr	r1, [pc, #660]	; (800df30 <tcp_receive+0x2b0>)
 800dc9a:	48a6      	ldr	r0, [pc, #664]	; (800df34 <tcp_receive+0x2b4>)
 800dc9c:	f007 fba6 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	7d1b      	ldrb	r3, [r3, #20]
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	d806      	bhi.n	800dcb6 <tcp_receive+0x36>
 800dca8:	4ba0      	ldr	r3, [pc, #640]	; (800df2c <tcp_receive+0x2ac>)
 800dcaa:	f240 427c 	movw	r2, #1148	; 0x47c
 800dcae:	49a2      	ldr	r1, [pc, #648]	; (800df38 <tcp_receive+0x2b8>)
 800dcb0:	48a0      	ldr	r0, [pc, #640]	; (800df34 <tcp_receive+0x2b4>)
 800dcb2:	f007 fb9b 	bl	80153ec <iprintf>

  if (flags & TCP_ACK) {
 800dcb6:	4ba1      	ldr	r3, [pc, #644]	; (800df3c <tcp_receive+0x2bc>)
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 0310 	and.w	r3, r3, #16
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f000 8263 	beq.w	800e18a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dcca:	461a      	mov	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcd0:	4413      	add	r3, r2
 800dcd2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcd8:	4b99      	ldr	r3, [pc, #612]	; (800df40 <tcp_receive+0x2c0>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	db1b      	blt.n	800dd1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dce6:	4b96      	ldr	r3, [pc, #600]	; (800df40 <tcp_receive+0x2c0>)
 800dce8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d106      	bne.n	800dcfc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dcf2:	4b94      	ldr	r3, [pc, #592]	; (800df44 <tcp_receive+0x2c4>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	db0e      	blt.n	800dd1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd00:	4b90      	ldr	r3, [pc, #576]	; (800df44 <tcp_receive+0x2c4>)
 800dd02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d125      	bne.n	800dd54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dd08:	4b8f      	ldr	r3, [pc, #572]	; (800df48 <tcp_receive+0x2c8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	89db      	ldrh	r3, [r3, #14]
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d91c      	bls.n	800dd54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800dd1a:	4b8b      	ldr	r3, [pc, #556]	; (800df48 <tcp_receive+0x2c8>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	89db      	ldrh	r3, [r3, #14]
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d205      	bcs.n	800dd44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dd44:	4b7e      	ldr	r3, [pc, #504]	; (800df40 <tcp_receive+0x2c0>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dd4c:	4b7d      	ldr	r3, [pc, #500]	; (800df44 <tcp_receive+0x2c4>)
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dd54:	4b7b      	ldr	r3, [pc, #492]	; (800df44 <tcp_receive+0x2c4>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dc58      	bgt.n	800de14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dd62:	4b7a      	ldr	r3, [pc, #488]	; (800df4c <tcp_receive+0x2cc>)
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d14b      	bne.n	800de02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dd74:	4413      	add	r3, r2
 800dd76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d142      	bne.n	800de02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	db3d      	blt.n	800de02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd8a:	4b6e      	ldr	r3, [pc, #440]	; (800df44 <tcp_receive+0x2c4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d137      	bne.n	800de02 <tcp_receive+0x182>
              found_dupack = 1;
 800dd92:	2301      	movs	r3, #1
 800dd94:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd9c:	2bff      	cmp	r3, #255	; 0xff
 800dd9e:	d007      	beq.n	800ddb0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dda6:	3301      	adds	r3, #1
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d91b      	bls.n	800ddf2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddc4:	4413      	add	r3, r2
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d30a      	bcc.n	800dde8 <tcp_receive+0x168>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dddc:	4413      	add	r3, r2
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dde6:	e004      	b.n	800ddf2 <tcp_receive+0x172>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d902      	bls.n	800de02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f001 feed 	bl	800fbdc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800de02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de04:	2b00      	cmp	r3, #0
 800de06:	f040 8160 	bne.w	800e0ca <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de12:	e15a      	b.n	800e0ca <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de14:	4b4b      	ldr	r3, [pc, #300]	; (800df44 <tcp_receive+0x2c4>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	3b01      	subs	r3, #1
 800de20:	2b00      	cmp	r3, #0
 800de22:	f2c0 814d 	blt.w	800e0c0 <tcp_receive+0x440>
 800de26:	4b47      	ldr	r3, [pc, #284]	; (800df44 <tcp_receive+0x2c4>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	2b00      	cmp	r3, #0
 800de32:	f300 8145 	bgt.w	800e0c0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	8b5b      	ldrh	r3, [r3, #26]
 800de3a:	f003 0304 	and.w	r3, r3, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d010      	beq.n	800de64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8b5b      	ldrh	r3, [r3, #26]
 800de46:	f023 0304 	bic.w	r3, r3, #4
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de72:	10db      	asrs	r3, r3, #3
 800de74:	b21b      	sxth	r3, r3
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de7e:	b29b      	uxth	r3, r3
 800de80:	4413      	add	r3, r2
 800de82:	b29b      	uxth	r3, r3
 800de84:	b21a      	sxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800de8c:	4b2d      	ldr	r3, [pc, #180]	; (800df44 <tcp_receive+0x2c4>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	b29a      	uxth	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de96:	b29b      	uxth	r3, r3
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dea4:	4b27      	ldr	r3, [pc, #156]	; (800df44 <tcp_receive+0x2c4>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7d1b      	ldrb	r3, [r3, #20]
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	f240 8096 	bls.w	800dfe2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d244      	bcs.n	800df50 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	8b5b      	ldrh	r3, [r3, #26]
 800deca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <tcp_receive+0x256>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e000      	b.n	800ded8 <tcp_receive+0x258>
 800ded6:	2302      	movs	r3, #2
 800ded8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dedc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dee6:	fb12 f303 	smulbb	r3, r2, r3
 800deea:	b29b      	uxth	r3, r3
 800deec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800deee:	4293      	cmp	r3, r2
 800def0:	bf28      	it	cs
 800def2:	4613      	movcs	r3, r2
 800def4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800defc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800defe:	4413      	add	r3, r2
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df08:	429a      	cmp	r2, r3
 800df0a:	d309      	bcc.n	800df20 <tcp_receive+0x2a0>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df14:	4413      	add	r3, r2
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df1e:	e060      	b.n	800dfe2 <tcp_receive+0x362>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df2a:	e05a      	b.n	800dfe2 <tcp_receive+0x362>
 800df2c:	080175a0 	.word	0x080175a0
 800df30:	080178d0 	.word	0x080178d0
 800df34:	080175ec 	.word	0x080175ec
 800df38:	080178ec 	.word	0x080178ec
 800df3c:	20004a30 	.word	0x20004a30
 800df40:	20004a24 	.word	0x20004a24
 800df44:	20004a28 	.word	0x20004a28
 800df48:	20004a14 	.word	0x20004a14
 800df4c:	20004a2e 	.word	0x20004a2e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800df56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df58:	4413      	add	r3, r2
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df62:	429a      	cmp	r2, r3
 800df64:	d309      	bcc.n	800df7a <tcp_receive+0x2fa>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800df6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df6e:	4413      	add	r3, r2
 800df70:	b29a      	uxth	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df78:	e004      	b.n	800df84 <tcp_receive+0x304>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df90:	429a      	cmp	r2, r3
 800df92:	d326      	bcc.n	800dfe2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfb4:	4413      	add	r3, r2
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d30a      	bcc.n	800dfd8 <tcp_receive+0x358>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfcc:	4413      	add	r3, r2
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dfd6:	e004      	b.n	800dfe2 <tcp_receive+0x362>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfea:	4a98      	ldr	r2, [pc, #608]	; (800e24c <tcp_receive+0x5cc>)
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7ff fdcb 	bl	800db88 <tcp_free_acked_segments>
 800dff2:	4602      	mov	r2, r0
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e000:	4a93      	ldr	r2, [pc, #588]	; (800e250 <tcp_receive+0x5d0>)
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7ff fdc0 	bl	800db88 <tcp_free_acked_segments>
 800e008:	4602      	mov	r2, r0
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e01c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e01e:	e002      	b.n	800e026 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d103      	bne.n	800e03c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e042:	4b84      	ldr	r3, [pc, #528]	; (800e254 <tcp_receive+0x5d4>)
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	4413      	add	r3, r2
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	8b5b      	ldrh	r3, [r3, #26]
 800e054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d035      	beq.n	800e0c8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e060:	2b00      	cmp	r3, #0
 800e062:	d118      	bne.n	800e096 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00c      	beq.n	800e086 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fb f9f2 	bl	8009462 <lwip_htonl>
 800e07e:	4603      	mov	r3, r0
 800e080:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e082:	2b00      	cmp	r3, #0
 800e084:	dc20      	bgt.n	800e0c8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	8b5b      	ldrh	r3, [r3, #26]
 800e08a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e08e:	b29a      	uxth	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e094:	e018      	b.n	800e0c8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fb f9dd 	bl	8009462 <lwip_htonl>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	1ae3      	subs	r3, r4, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	dc0b      	bgt.n	800e0c8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	8b5b      	ldrh	r3, [r3, #26]
 800e0b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0be:	e003      	b.n	800e0c8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f001 ff85 	bl	800ffd0 <tcp_send_empty_ack>
 800e0c6:	e000      	b.n	800e0ca <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0c8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d05b      	beq.n	800e18a <tcp_receive+0x50a>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0d6:	4b60      	ldr	r3, [pc, #384]	; (800e258 <tcp_receive+0x5d8>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da54      	bge.n	800e18a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e0e0:	4b5e      	ldr	r3, [pc, #376]	; (800e25c <tcp_receive+0x5dc>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e0f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e0fe:	10db      	asrs	r3, r3, #3
 800e100:	b21b      	sxth	r3, r3
 800e102:	b29b      	uxth	r3, r3
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	b29b      	uxth	r3, r3
 800e108:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e112:	b29a      	uxth	r2, r3
 800e114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e118:	4413      	add	r3, r2
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	b21a      	sxth	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e122:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e126:	2b00      	cmp	r3, #0
 800e128:	da05      	bge.n	800e136 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e12a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e12e:	425b      	negs	r3, r3
 800e130:	b29b      	uxth	r3, r3
 800e132:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e136:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e140:	109b      	asrs	r3, r3, #2
 800e142:	b21b      	sxth	r3, r3
 800e144:	b29b      	uxth	r3, r3
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e154:	b29a      	uxth	r2, r3
 800e156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e15a:	4413      	add	r3, r2
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	b21a      	sxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e16a:	10db      	asrs	r3, r3, #3
 800e16c:	b21b      	sxth	r3, r3
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e176:	b29b      	uxth	r3, r3
 800e178:	4413      	add	r3, r2
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	b21a      	sxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e18a:	4b35      	ldr	r3, [pc, #212]	; (800e260 <tcp_receive+0x5e0>)
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f000 84e1 	beq.w	800eb56 <tcp_receive+0xed6>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7d1b      	ldrb	r3, [r3, #20]
 800e198:	2b06      	cmp	r3, #6
 800e19a:	f200 84dc 	bhi.w	800eb56 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1a2:	4b30      	ldr	r3, [pc, #192]	; (800e264 <tcp_receive+0x5e4>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f2c0 808e 	blt.w	800e2cc <tcp_receive+0x64c>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1b4:	4b2a      	ldr	r3, [pc, #168]	; (800e260 <tcp_receive+0x5e0>)
 800e1b6:	881b      	ldrh	r3, [r3, #0]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4b2a      	ldr	r3, [pc, #168]	; (800e264 <tcp_receive+0x5e4>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	440b      	add	r3, r1
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f300 8081 	bgt.w	800e2cc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e1ca:	4b27      	ldr	r3, [pc, #156]	; (800e268 <tcp_receive+0x5e8>)
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1d4:	4b23      	ldr	r3, [pc, #140]	; (800e264 <tcp_receive+0x5e4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e1dc:	4b22      	ldr	r3, [pc, #136]	; (800e268 <tcp_receive+0x5e8>)
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <tcp_receive+0x572>
 800e1e4:	4b21      	ldr	r3, [pc, #132]	; (800e26c <tcp_receive+0x5ec>)
 800e1e6:	f240 5294 	movw	r2, #1428	; 0x594
 800e1ea:	4921      	ldr	r1, [pc, #132]	; (800e270 <tcp_receive+0x5f0>)
 800e1ec:	4821      	ldr	r0, [pc, #132]	; (800e274 <tcp_receive+0x5f4>)
 800e1ee:	f007 f8fd 	bl	80153ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d906      	bls.n	800e20a <tcp_receive+0x58a>
 800e1fc:	4b1b      	ldr	r3, [pc, #108]	; (800e26c <tcp_receive+0x5ec>)
 800e1fe:	f240 5295 	movw	r2, #1429	; 0x595
 800e202:	491d      	ldr	r1, [pc, #116]	; (800e278 <tcp_receive+0x5f8>)
 800e204:	481b      	ldr	r0, [pc, #108]	; (800e274 <tcp_receive+0x5f4>)
 800e206:	f007 f8f1 	bl	80153ec <iprintf>
      off = (u16_t)off32;
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e210:	4b15      	ldr	r3, [pc, #84]	; (800e268 <tcp_receive+0x5e8>)
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	891b      	ldrh	r3, [r3, #8]
 800e216:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d906      	bls.n	800e22c <tcp_receive+0x5ac>
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <tcp_receive+0x5ec>)
 800e220:	f240 5297 	movw	r2, #1431	; 0x597
 800e224:	4915      	ldr	r1, [pc, #84]	; (800e27c <tcp_receive+0x5fc>)
 800e226:	4813      	ldr	r0, [pc, #76]	; (800e274 <tcp_receive+0x5f4>)
 800e228:	f007 f8e0 	bl	80153ec <iprintf>
      inseg.len -= off;
 800e22c:	4b0e      	ldr	r3, [pc, #56]	; (800e268 <tcp_receive+0x5e8>)
 800e22e:	891a      	ldrh	r2, [r3, #8]
 800e230:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	b29a      	uxth	r2, r3
 800e238:	4b0b      	ldr	r3, [pc, #44]	; (800e268 <tcp_receive+0x5e8>)
 800e23a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e23c:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <tcp_receive+0x5e8>)
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	891a      	ldrh	r2, [r3, #8]
 800e242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e24a:	e029      	b.n	800e2a0 <tcp_receive+0x620>
 800e24c:	08017908 	.word	0x08017908
 800e250:	08017910 	.word	0x08017910
 800e254:	20004a2c 	.word	0x20004a2c
 800e258:	20004a28 	.word	0x20004a28
 800e25c:	2000b8c4 	.word	0x2000b8c4
 800e260:	20004a2e 	.word	0x20004a2e
 800e264:	20004a24 	.word	0x20004a24
 800e268:	20004a04 	.word	0x20004a04
 800e26c:	080175a0 	.word	0x080175a0
 800e270:	08017918 	.word	0x08017918
 800e274:	080175ec 	.word	0x080175ec
 800e278:	08017928 	.word	0x08017928
 800e27c:	08017938 	.word	0x08017938
        off -= p->len;
 800e280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e282:	895b      	ldrh	r3, [r3, #10]
 800e284:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e290:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e292:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e296:	2200      	movs	r2, #0
 800e298:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2a2:	895b      	ldrh	r3, [r3, #10]
 800e2a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d8e9      	bhi.n	800e280 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e2ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e2b4:	f7fc fb70 	bl	800a998 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	4a91      	ldr	r2, [pc, #580]	; (800e504 <tcp_receive+0x884>)
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	4b91      	ldr	r3, [pc, #580]	; (800e508 <tcp_receive+0x888>)
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	4a8f      	ldr	r2, [pc, #572]	; (800e504 <tcp_receive+0x884>)
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e2ca:	e00d      	b.n	800e2e8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e2cc:	4b8d      	ldr	r3, [pc, #564]	; (800e504 <tcp_receive+0x884>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	da06      	bge.n	800e2e8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	8b5b      	ldrh	r3, [r3, #26]
 800e2de:	f043 0302 	orr.w	r3, r3, #2
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e2e8:	4b86      	ldr	r3, [pc, #536]	; (800e504 <tcp_receive+0x884>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f2c0 842a 	blt.w	800eb4c <tcp_receive+0xecc>
 800e2f8:	4b82      	ldr	r3, [pc, #520]	; (800e504 <tcp_receive+0x884>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e304:	440b      	add	r3, r1
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	3301      	adds	r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f300 841e 	bgt.w	800eb4c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e314:	4b7b      	ldr	r3, [pc, #492]	; (800e504 <tcp_receive+0x884>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	f040 829a 	bne.w	800e852 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e31e:	4b7a      	ldr	r3, [pc, #488]	; (800e508 <tcp_receive+0x888>)
 800e320:	891c      	ldrh	r4, [r3, #8]
 800e322:	4b79      	ldr	r3, [pc, #484]	; (800e508 <tcp_receive+0x888>)
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	899b      	ldrh	r3, [r3, #12]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fb f884 	bl	8009438 <lwip_htons>
 800e330:	4603      	mov	r3, r0
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 0303 	and.w	r3, r3, #3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <tcp_receive+0x6c0>
 800e33c:	2301      	movs	r3, #1
 800e33e:	e000      	b.n	800e342 <tcp_receive+0x6c2>
 800e340:	2300      	movs	r3, #0
 800e342:	4423      	add	r3, r4
 800e344:	b29a      	uxth	r2, r3
 800e346:	4b71      	ldr	r3, [pc, #452]	; (800e50c <tcp_receive+0x88c>)
 800e348:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e34e:	4b6f      	ldr	r3, [pc, #444]	; (800e50c <tcp_receive+0x88c>)
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	d275      	bcs.n	800e442 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e356:	4b6c      	ldr	r3, [pc, #432]	; (800e508 <tcp_receive+0x888>)
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	899b      	ldrh	r3, [r3, #12]
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fb f86a 	bl	8009438 <lwip_htons>
 800e364:	4603      	mov	r3, r0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01f      	beq.n	800e3b0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e370:	4b65      	ldr	r3, [pc, #404]	; (800e508 <tcp_receive+0x888>)
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	899b      	ldrh	r3, [r3, #12]
 800e376:	b29b      	uxth	r3, r3
 800e378:	b21b      	sxth	r3, r3
 800e37a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e37e:	b21c      	sxth	r4, r3
 800e380:	4b61      	ldr	r3, [pc, #388]	; (800e508 <tcp_receive+0x888>)
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	899b      	ldrh	r3, [r3, #12]
 800e386:	b29b      	uxth	r3, r3
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fb f855 	bl	8009438 <lwip_htons>
 800e38e:	4603      	mov	r3, r0
 800e390:	b2db      	uxtb	r3, r3
 800e392:	b29b      	uxth	r3, r3
 800e394:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e398:	b29b      	uxth	r3, r3
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fb f84c 	bl	8009438 <lwip_htons>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	b21b      	sxth	r3, r3
 800e3a4:	4323      	orrs	r3, r4
 800e3a6:	b21a      	sxth	r2, r3
 800e3a8:	4b57      	ldr	r3, [pc, #348]	; (800e508 <tcp_receive+0x888>)
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	b292      	uxth	r2, r2
 800e3ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3b4:	4b54      	ldr	r3, [pc, #336]	; (800e508 <tcp_receive+0x888>)
 800e3b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e3b8:	4b53      	ldr	r3, [pc, #332]	; (800e508 <tcp_receive+0x888>)
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	899b      	ldrh	r3, [r3, #12]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fb f839 	bl	8009438 <lwip_htons>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <tcp_receive+0x75e>
            inseg.len -= 1;
 800e3d2:	4b4d      	ldr	r3, [pc, #308]	; (800e508 <tcp_receive+0x888>)
 800e3d4:	891b      	ldrh	r3, [r3, #8]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	4b4b      	ldr	r3, [pc, #300]	; (800e508 <tcp_receive+0x888>)
 800e3dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e3de:	4b4a      	ldr	r3, [pc, #296]	; (800e508 <tcp_receive+0x888>)
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	4b49      	ldr	r3, [pc, #292]	; (800e508 <tcp_receive+0x888>)
 800e3e4:	891b      	ldrh	r3, [r3, #8]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	f7fc f9d5 	bl	800a798 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e3ee:	4b46      	ldr	r3, [pc, #280]	; (800e508 <tcp_receive+0x888>)
 800e3f0:	891c      	ldrh	r4, [r3, #8]
 800e3f2:	4b45      	ldr	r3, [pc, #276]	; (800e508 <tcp_receive+0x888>)
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	899b      	ldrh	r3, [r3, #12]
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fb f81c 	bl	8009438 <lwip_htons>
 800e400:	4603      	mov	r3, r0
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <tcp_receive+0x790>
 800e40c:	2301      	movs	r3, #1
 800e40e:	e000      	b.n	800e412 <tcp_receive+0x792>
 800e410:	2300      	movs	r3, #0
 800e412:	4423      	add	r3, r4
 800e414:	b29a      	uxth	r2, r3
 800e416:	4b3d      	ldr	r3, [pc, #244]	; (800e50c <tcp_receive+0x88c>)
 800e418:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e41a:	4b3c      	ldr	r3, [pc, #240]	; (800e50c <tcp_receive+0x88c>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	461a      	mov	r2, r3
 800e420:	4b38      	ldr	r3, [pc, #224]	; (800e504 <tcp_receive+0x884>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	441a      	add	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42a:	6879      	ldr	r1, [r7, #4]
 800e42c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e42e:	440b      	add	r3, r1
 800e430:	429a      	cmp	r2, r3
 800e432:	d006      	beq.n	800e442 <tcp_receive+0x7c2>
 800e434:	4b36      	ldr	r3, [pc, #216]	; (800e510 <tcp_receive+0x890>)
 800e436:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800e43a:	4936      	ldr	r1, [pc, #216]	; (800e514 <tcp_receive+0x894>)
 800e43c:	4836      	ldr	r0, [pc, #216]	; (800e518 <tcp_receive+0x898>)
 800e43e:	f006 ffd5 	bl	80153ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 80e7 	beq.w	800e61a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e44c:	4b2e      	ldr	r3, [pc, #184]	; (800e508 <tcp_receive+0x888>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	899b      	ldrh	r3, [r3, #12]
 800e452:	b29b      	uxth	r3, r3
 800e454:	4618      	mov	r0, r3
 800e456:	f7fa ffef 	bl	8009438 <lwip_htons>
 800e45a:	4603      	mov	r3, r0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	2b00      	cmp	r3, #0
 800e464:	d010      	beq.n	800e488 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e466:	e00a      	b.n	800e47e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e46c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7fd fd97 	bl	800bfac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f0      	bne.n	800e468 <tcp_receive+0x7e8>
 800e486:	e0c8      	b.n	800e61a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e48e:	e052      	b.n	800e536 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	899b      	ldrh	r3, [r3, #12]
 800e496:	b29b      	uxth	r3, r3
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fa ffcd 	bl	8009438 <lwip_htons>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d03d      	beq.n	800e526 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e4aa:	4b17      	ldr	r3, [pc, #92]	; (800e508 <tcp_receive+0x888>)
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	899b      	ldrh	r3, [r3, #12]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fa ffc0 	bl	8009438 <lwip_htons>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d130      	bne.n	800e526 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e4c4:	4b10      	ldr	r3, [pc, #64]	; (800e508 <tcp_receive+0x888>)
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	899b      	ldrh	r3, [r3, #12]
 800e4ca:	b29c      	uxth	r4, r3
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	f7fa ffb3 	bl	8009438 <lwip_htons>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <tcp_receive+0x888>)
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	4322      	orrs	r2, r4
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e4e0:	4b09      	ldr	r3, [pc, #36]	; (800e508 <tcp_receive+0x888>)
 800e4e2:	891c      	ldrh	r4, [r3, #8]
 800e4e4:	4b08      	ldr	r3, [pc, #32]	; (800e508 <tcp_receive+0x888>)
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	899b      	ldrh	r3, [r3, #12]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fa ffa3 	bl	8009438 <lwip_htons>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	f003 0303 	and.w	r3, r3, #3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00e      	beq.n	800e51c <tcp_receive+0x89c>
 800e4fe:	2301      	movs	r3, #1
 800e500:	e00d      	b.n	800e51e <tcp_receive+0x89e>
 800e502:	bf00      	nop
 800e504:	20004a24 	.word	0x20004a24
 800e508:	20004a04 	.word	0x20004a04
 800e50c:	20004a2e 	.word	0x20004a2e
 800e510:	080175a0 	.word	0x080175a0
 800e514:	08017948 	.word	0x08017948
 800e518:	080175ec 	.word	0x080175ec
 800e51c:	2300      	movs	r3, #0
 800e51e:	4423      	add	r3, r4
 800e520:	b29a      	uxth	r2, r3
 800e522:	4b98      	ldr	r3, [pc, #608]	; (800e784 <tcp_receive+0xb04>)
 800e524:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e528:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e530:	6938      	ldr	r0, [r7, #16]
 800e532:	f7fd fd3b 	bl	800bfac <tcp_seg_free>
            while (next &&
 800e536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00e      	beq.n	800e55a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e53c:	4b91      	ldr	r3, [pc, #580]	; (800e784 <tcp_receive+0xb04>)
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	4b91      	ldr	r3, [pc, #580]	; (800e788 <tcp_receive+0xb08>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	441a      	add	r2, r3
 800e548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e550:	8909      	ldrh	r1, [r1, #8]
 800e552:	440b      	add	r3, r1
 800e554:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e556:	2b00      	cmp	r3, #0
 800e558:	da9a      	bge.n	800e490 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d059      	beq.n	800e614 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e560:	4b88      	ldr	r3, [pc, #544]	; (800e784 <tcp_receive+0xb04>)
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	4b88      	ldr	r3, [pc, #544]	; (800e788 <tcp_receive+0xb08>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	441a      	add	r2, r3
 800e56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e574:	2b00      	cmp	r3, #0
 800e576:	dd4d      	ble.n	800e614 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	b29a      	uxth	r2, r3
 800e580:	4b81      	ldr	r3, [pc, #516]	; (800e788 <tcp_receive+0xb08>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	b29b      	uxth	r3, r3
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	b29a      	uxth	r2, r3
 800e58a:	4b80      	ldr	r3, [pc, #512]	; (800e78c <tcp_receive+0xb0c>)
 800e58c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e58e:	4b7f      	ldr	r3, [pc, #508]	; (800e78c <tcp_receive+0xb0c>)
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	899b      	ldrh	r3, [r3, #12]
 800e594:	b29b      	uxth	r3, r3
 800e596:	4618      	mov	r0, r3
 800e598:	f7fa ff4e 	bl	8009438 <lwip_htons>
 800e59c:	4603      	mov	r3, r0
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	f003 0302 	and.w	r3, r3, #2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <tcp_receive+0x934>
                inseg.len -= 1;
 800e5a8:	4b78      	ldr	r3, [pc, #480]	; (800e78c <tcp_receive+0xb0c>)
 800e5aa:	891b      	ldrh	r3, [r3, #8]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	4b76      	ldr	r3, [pc, #472]	; (800e78c <tcp_receive+0xb0c>)
 800e5b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e5b4:	4b75      	ldr	r3, [pc, #468]	; (800e78c <tcp_receive+0xb0c>)
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	4b74      	ldr	r3, [pc, #464]	; (800e78c <tcp_receive+0xb0c>)
 800e5ba:	891b      	ldrh	r3, [r3, #8]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f7fc f8ea 	bl	800a798 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e5c4:	4b71      	ldr	r3, [pc, #452]	; (800e78c <tcp_receive+0xb0c>)
 800e5c6:	891c      	ldrh	r4, [r3, #8]
 800e5c8:	4b70      	ldr	r3, [pc, #448]	; (800e78c <tcp_receive+0xb0c>)
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	899b      	ldrh	r3, [r3, #12]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fa ff31 	bl	8009438 <lwip_htons>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <tcp_receive+0x966>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <tcp_receive+0x968>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4423      	add	r3, r4
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	4b65      	ldr	r3, [pc, #404]	; (800e784 <tcp_receive+0xb04>)
 800e5ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e5f0:	4b64      	ldr	r3, [pc, #400]	; (800e784 <tcp_receive+0xb04>)
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	4b64      	ldr	r3, [pc, #400]	; (800e788 <tcp_receive+0xb08>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	441a      	add	r2, r3
 800e5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	429a      	cmp	r2, r3
 800e604:	d006      	beq.n	800e614 <tcp_receive+0x994>
 800e606:	4b62      	ldr	r3, [pc, #392]	; (800e790 <tcp_receive+0xb10>)
 800e608:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800e60c:	4961      	ldr	r1, [pc, #388]	; (800e794 <tcp_receive+0xb14>)
 800e60e:	4862      	ldr	r0, [pc, #392]	; (800e798 <tcp_receive+0xb18>)
 800e610:	f006 feec 	bl	80153ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e618:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e61a:	4b5a      	ldr	r3, [pc, #360]	; (800e784 <tcp_receive+0xb04>)
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	4b59      	ldr	r3, [pc, #356]	; (800e788 <tcp_receive+0xb08>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	441a      	add	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e62e:	4b55      	ldr	r3, [pc, #340]	; (800e784 <tcp_receive+0xb04>)
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d206      	bcs.n	800e644 <tcp_receive+0x9c4>
 800e636:	4b56      	ldr	r3, [pc, #344]	; (800e790 <tcp_receive+0xb10>)
 800e638:	f240 6207 	movw	r2, #1543	; 0x607
 800e63c:	4957      	ldr	r1, [pc, #348]	; (800e79c <tcp_receive+0xb1c>)
 800e63e:	4856      	ldr	r0, [pc, #344]	; (800e798 <tcp_receive+0xb18>)
 800e640:	f006 fed4 	bl	80153ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e648:	4b4e      	ldr	r3, [pc, #312]	; (800e784 <tcp_receive+0xb04>)
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7fc ffcd 	bl	800b5f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e65a:	4b4c      	ldr	r3, [pc, #304]	; (800e78c <tcp_receive+0xb0c>)
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	891b      	ldrh	r3, [r3, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e664:	4b49      	ldr	r3, [pc, #292]	; (800e78c <tcp_receive+0xb0c>)
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	4a4d      	ldr	r2, [pc, #308]	; (800e7a0 <tcp_receive+0xb20>)
 800e66a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e66c:	4b47      	ldr	r3, [pc, #284]	; (800e78c <tcp_receive+0xb0c>)
 800e66e:	2200      	movs	r2, #0
 800e670:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e672:	4b46      	ldr	r3, [pc, #280]	; (800e78c <tcp_receive+0xb0c>)
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	899b      	ldrh	r3, [r3, #12]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fa fedc 	bl	8009438 <lwip_htons>
 800e680:	4603      	mov	r3, r0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 80b8 	beq.w	800e7fe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e68e:	4b45      	ldr	r3, [pc, #276]	; (800e7a4 <tcp_receive+0xb24>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	f043 0320 	orr.w	r3, r3, #32
 800e696:	b2da      	uxtb	r2, r3
 800e698:	4b42      	ldr	r3, [pc, #264]	; (800e7a4 <tcp_receive+0xb24>)
 800e69a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e69c:	e0af      	b.n	800e7fe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	4a36      	ldr	r2, [pc, #216]	; (800e788 <tcp_receive+0xb08>)
 800e6ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	891b      	ldrh	r3, [r3, #8]
 800e6b4:	461c      	mov	r4, r3
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	899b      	ldrh	r3, [r3, #12]
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fa feba 	bl	8009438 <lwip_htons>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f003 0303 	and.w	r3, r3, #3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d001      	beq.n	800e6d4 <tcp_receive+0xa54>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e000      	b.n	800e6d6 <tcp_receive+0xa56>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	191a      	adds	r2, r3, r4
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6dc:	441a      	add	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6e6:	461c      	mov	r4, r3
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	891b      	ldrh	r3, [r3, #8]
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	899b      	ldrh	r3, [r3, #12]
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fa fe9e 	bl	8009438 <lwip_htons>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	f003 0303 	and.w	r3, r3, #3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <tcp_receive+0xa8c>
 800e708:	2301      	movs	r3, #1
 800e70a:	e000      	b.n	800e70e <tcp_receive+0xa8e>
 800e70c:	2300      	movs	r3, #0
 800e70e:	442b      	add	r3, r5
 800e710:	429c      	cmp	r4, r3
 800e712:	d206      	bcs.n	800e722 <tcp_receive+0xaa2>
 800e714:	4b1e      	ldr	r3, [pc, #120]	; (800e790 <tcp_receive+0xb10>)
 800e716:	f240 622c 	movw	r2, #1580	; 0x62c
 800e71a:	4923      	ldr	r1, [pc, #140]	; (800e7a8 <tcp_receive+0xb28>)
 800e71c:	481e      	ldr	r0, [pc, #120]	; (800e798 <tcp_receive+0xb18>)
 800e71e:	f006 fe65 	bl	80153ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	891b      	ldrh	r3, [r3, #8]
 800e726:	461c      	mov	r4, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	899b      	ldrh	r3, [r3, #12]
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4618      	mov	r0, r3
 800e732:	f7fa fe81 	bl	8009438 <lwip_htons>
 800e736:	4603      	mov	r3, r0
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	f003 0303 	and.w	r3, r3, #3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <tcp_receive+0xac6>
 800e742:	2301      	movs	r3, #1
 800e744:	e000      	b.n	800e748 <tcp_receive+0xac8>
 800e746:	2300      	movs	r3, #0
 800e748:	1919      	adds	r1, r3, r4
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e74e:	b28b      	uxth	r3, r1
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	b29a      	uxth	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7fc ff4b 	bl	800b5f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	891b      	ldrh	r3, [r3, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d028      	beq.n	800e7ba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e768:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <tcp_receive+0xb20>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01d      	beq.n	800e7ac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e770:	4b0b      	ldr	r3, [pc, #44]	; (800e7a0 <tcp_receive+0xb20>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4619      	mov	r1, r3
 800e77a:	4610      	mov	r0, r2
 800e77c:	f7fc fa60 	bl	800ac40 <pbuf_cat>
 800e780:	e018      	b.n	800e7b4 <tcp_receive+0xb34>
 800e782:	bf00      	nop
 800e784:	20004a2e 	.word	0x20004a2e
 800e788:	20004a24 	.word	0x20004a24
 800e78c:	20004a04 	.word	0x20004a04
 800e790:	080175a0 	.word	0x080175a0
 800e794:	08017980 	.word	0x08017980
 800e798:	080175ec 	.word	0x080175ec
 800e79c:	080179bc 	.word	0x080179bc
 800e7a0:	20004a34 	.word	0x20004a34
 800e7a4:	20004a31 	.word	0x20004a31
 800e7a8:	080179dc 	.word	0x080179dc
            } else {
              recv_data = cseg->p;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	4a70      	ldr	r2, [pc, #448]	; (800e974 <tcp_receive+0xcf4>)
 800e7b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	899b      	ldrh	r3, [r3, #12]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fa fe38 	bl	8009438 <lwip_htons>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00d      	beq.n	800e7f0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e7d4:	4b68      	ldr	r3, [pc, #416]	; (800e978 <tcp_receive+0xcf8>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f043 0320 	orr.w	r3, r3, #32
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	4b66      	ldr	r3, [pc, #408]	; (800e978 <tcp_receive+0xcf8>)
 800e7e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7d1b      	ldrb	r3, [r3, #20]
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	d102      	bne.n	800e7f0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2207      	movs	r2, #7
 800e7ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e7f8:	68b8      	ldr	r0, [r7, #8]
 800e7fa:	f7fd fbd7 	bl	800bfac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e802:	2b00      	cmp	r3, #0
 800e804:	d008      	beq.n	800e818 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e812:	429a      	cmp	r2, r3
 800e814:	f43f af43 	beq.w	800e69e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	8b5b      	ldrh	r3, [r3, #26]
 800e81c:	f003 0301 	and.w	r3, r3, #1
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00e      	beq.n	800e842 <tcp_receive+0xbc2>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	8b5b      	ldrh	r3, [r3, #26]
 800e828:	f023 0301 	bic.w	r3, r3, #1
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	835a      	strh	r2, [r3, #26]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	8b5b      	ldrh	r3, [r3, #26]
 800e836:	f043 0302 	orr.w	r3, r3, #2
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e840:	e188      	b.n	800eb54 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8b5b      	ldrh	r3, [r3, #26]
 800e846:	f043 0301 	orr.w	r3, r3, #1
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e850:	e180      	b.n	800eb54 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e85a:	4848      	ldr	r0, [pc, #288]	; (800e97c <tcp_receive+0xcfc>)
 800e85c:	f7fd fbbe 	bl	800bfdc <tcp_seg_copy>
 800e860:	4602      	mov	r2, r0
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	675a      	str	r2, [r3, #116]	; 0x74
 800e866:	e16d      	b.n	800eb44 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e868:	2300      	movs	r3, #0
 800e86a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e870:	63bb      	str	r3, [r7, #56]	; 0x38
 800e872:	e157      	b.n	800eb24 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	4b41      	ldr	r3, [pc, #260]	; (800e980 <tcp_receive+0xd00>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d11d      	bne.n	800e8be <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e882:	4b3e      	ldr	r3, [pc, #248]	; (800e97c <tcp_receive+0xcfc>)
 800e884:	891a      	ldrh	r2, [r3, #8]
 800e886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e888:	891b      	ldrh	r3, [r3, #8]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	f240 814f 	bls.w	800eb2e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e890:	483a      	ldr	r0, [pc, #232]	; (800e97c <tcp_receive+0xcfc>)
 800e892:	f7fd fba3 	bl	800bfdc <tcp_seg_copy>
 800e896:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f000 8149 	beq.w	800eb32 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d003      	beq.n	800e8ae <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a8:	697a      	ldr	r2, [r7, #20]
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	e002      	b.n	800e8b4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e8b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8b6:	6978      	ldr	r0, [r7, #20]
 800e8b8:	f7ff f8de 	bl	800da78 <tcp_oos_insert_segment>
                }
                break;
 800e8bc:	e139      	b.n	800eb32 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d117      	bne.n	800e8f4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e8c4:	4b2e      	ldr	r3, [pc, #184]	; (800e980 <tcp_receive+0xd00>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	da57      	bge.n	800e984 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e8d4:	4829      	ldr	r0, [pc, #164]	; (800e97c <tcp_receive+0xcfc>)
 800e8d6:	f7fd fb81 	bl	800bfdc <tcp_seg_copy>
 800e8da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 8129 	beq.w	800eb36 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e8ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8ec:	69b8      	ldr	r0, [r7, #24]
 800e8ee:	f7ff f8c3 	bl	800da78 <tcp_oos_insert_segment>
                  }
                  break;
 800e8f2:	e120      	b.n	800eb36 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e8f4:	4b22      	ldr	r3, [pc, #136]	; (800e980 <tcp_receive+0xd00>)
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	3b01      	subs	r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	db3e      	blt.n	800e984 <tcp_receive+0xd04>
 800e906:	4b1e      	ldr	r3, [pc, #120]	; (800e980 <tcp_receive+0xd00>)
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	3301      	adds	r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	dc35      	bgt.n	800e984 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e918:	4818      	ldr	r0, [pc, #96]	; (800e97c <tcp_receive+0xcfc>)
 800e91a:	f7fd fb5f 	bl	800bfdc <tcp_seg_copy>
 800e91e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 8109 	beq.w	800eb3a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e930:	8912      	ldrh	r2, [r2, #8]
 800e932:	441a      	add	r2, r3
 800e934:	4b12      	ldr	r3, [pc, #72]	; (800e980 <tcp_receive+0xd00>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dd12      	ble.n	800e964 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e93e:	4b10      	ldr	r3, [pc, #64]	; (800e980 <tcp_receive+0xd00>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	b29a      	uxth	r2, r3
 800e944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	b29a      	uxth	r2, r3
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e95a:	891b      	ldrh	r3, [r3, #8]
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	f7fb ff1a 	bl	800a798 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e966:	69fa      	ldr	r2, [r7, #28]
 800e968:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e96a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e96c:	69f8      	ldr	r0, [r7, #28]
 800e96e:	f7ff f883 	bl	800da78 <tcp_oos_insert_segment>
                  }
                  break;
 800e972:	e0e2      	b.n	800eb3a <tcp_receive+0xeba>
 800e974:	20004a34 	.word	0x20004a34
 800e978:	20004a31 	.word	0x20004a31
 800e97c:	20004a04 	.word	0x20004a04
 800e980:	20004a24 	.word	0x20004a24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e986:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 80c6 	bne.w	800eb1e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e992:	4b80      	ldr	r3, [pc, #512]	; (800eb94 <tcp_receive+0xf14>)
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f340 80bd 	ble.w	800eb1e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	899b      	ldrh	r3, [r3, #12]
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fa fd43 	bl	8009438 <lwip_htons>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f040 80bf 	bne.w	800eb3e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e9c0:	4875      	ldr	r0, [pc, #468]	; (800eb98 <tcp_receive+0xf18>)
 800e9c2:	f7fd fb0b 	bl	800bfdc <tcp_seg_copy>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 80b6 	beq.w	800eb42 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9de:	8912      	ldrh	r2, [r2, #8]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	4b6c      	ldr	r3, [pc, #432]	; (800eb94 <tcp_receive+0xf14>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	1ad3      	subs	r3, r2, r3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dd12      	ble.n	800ea12 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e9ec:	4b69      	ldr	r3, [pc, #420]	; (800eb94 <tcp_receive+0xf14>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	685a      	ldr	r2, [r3, #4]
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	891b      	ldrh	r3, [r3, #8]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	f7fb fec3 	bl	800a798 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ea12:	4b62      	ldr	r3, [pc, #392]	; (800eb9c <tcp_receive+0xf1c>)
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	4b5e      	ldr	r3, [pc, #376]	; (800eb94 <tcp_receive+0xf14>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	441a      	add	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea22:	6879      	ldr	r1, [r7, #4]
 800ea24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea26:	440b      	add	r3, r1
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f340 8089 	ble.w	800eb42 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ea30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	899b      	ldrh	r3, [r3, #12]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fa fcfc 	bl	8009438 <lwip_htons>
 800ea40:	4603      	mov	r3, r0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d022      	beq.n	800ea92 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ea4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	899b      	ldrh	r3, [r3, #12]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	b21b      	sxth	r3, r3
 800ea58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea5c:	b21c      	sxth	r4, r3
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	899b      	ldrh	r3, [r3, #12]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fa fce5 	bl	8009438 <lwip_htons>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fa fcdc 	bl	8009438 <lwip_htons>
 800ea80:	4603      	mov	r3, r0
 800ea82:	b21b      	sxth	r3, r3
 800ea84:	4323      	orrs	r3, r4
 800ea86:	b21a      	sxth	r2, r3
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	b292      	uxth	r2, r2
 800ea90:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea9c:	4413      	add	r3, r2
 800ea9e:	b299      	uxth	r1, r3
 800eaa0:	4b3c      	ldr	r3, [pc, #240]	; (800eb94 <tcp_receive+0xf14>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	1a8a      	subs	r2, r1, r2
 800eaac:	b292      	uxth	r2, r2
 800eaae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	891b      	ldrh	r3, [r3, #8]
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	f7fb fe6a 	bl	800a798 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	891c      	ldrh	r4, [r3, #8]
 800eaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	899b      	ldrh	r3, [r3, #12]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fa fcaf 	bl	8009438 <lwip_htons>
 800eada:	4603      	mov	r3, r0
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	f003 0303 	and.w	r3, r3, #3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <tcp_receive+0xe6a>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e000      	b.n	800eaec <tcp_receive+0xe6c>
 800eaea:	2300      	movs	r3, #0
 800eaec:	4423      	add	r3, r4
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	4b2a      	ldr	r3, [pc, #168]	; (800eb9c <tcp_receive+0xf1c>)
 800eaf2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eaf4:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <tcp_receive+0xf1c>)
 800eaf6:	881b      	ldrh	r3, [r3, #0]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4b26      	ldr	r3, [pc, #152]	; (800eb94 <tcp_receive+0xf14>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	441a      	add	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb08:	440b      	add	r3, r1
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d019      	beq.n	800eb42 <tcp_receive+0xec2>
 800eb0e:	4b24      	ldr	r3, [pc, #144]	; (800eba0 <tcp_receive+0xf20>)
 800eb10:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800eb14:	4923      	ldr	r1, [pc, #140]	; (800eba4 <tcp_receive+0xf24>)
 800eb16:	4824      	ldr	r0, [pc, #144]	; (800eba8 <tcp_receive+0xf28>)
 800eb18:	f006 fc68 	bl	80153ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800eb1c:	e011      	b.n	800eb42 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f47f aea4 	bne.w	800e874 <tcp_receive+0xbf4>
 800eb2c:	e00a      	b.n	800eb44 <tcp_receive+0xec4>
                break;
 800eb2e:	bf00      	nop
 800eb30:	e008      	b.n	800eb44 <tcp_receive+0xec4>
                break;
 800eb32:	bf00      	nop
 800eb34:	e006      	b.n	800eb44 <tcp_receive+0xec4>
                  break;
 800eb36:	bf00      	nop
 800eb38:	e004      	b.n	800eb44 <tcp_receive+0xec4>
                  break;
 800eb3a:	bf00      	nop
 800eb3c:	e002      	b.n	800eb44 <tcp_receive+0xec4>
                  break;
 800eb3e:	bf00      	nop
 800eb40:	e000      	b.n	800eb44 <tcp_receive+0xec4>
                break;
 800eb42:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f001 fa43 	bl	800ffd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800eb4a:	e003      	b.n	800eb54 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f001 fa3f 	bl	800ffd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb52:	e01a      	b.n	800eb8a <tcp_receive+0xf0a>
 800eb54:	e019      	b.n	800eb8a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800eb56:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <tcp_receive+0xf14>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	db0a      	blt.n	800eb7a <tcp_receive+0xefa>
 800eb64:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <tcp_receive+0xf14>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb70:	440b      	add	r3, r1
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	3301      	adds	r3, #1
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	dd07      	ble.n	800eb8a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8b5b      	ldrh	r3, [r3, #26]
 800eb7e:	f043 0302 	orr.w	r3, r3, #2
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800eb88:	e7ff      	b.n	800eb8a <tcp_receive+0xf0a>
 800eb8a:	bf00      	nop
 800eb8c:	3750      	adds	r7, #80	; 0x50
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bdb0      	pop	{r4, r5, r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20004a24 	.word	0x20004a24
 800eb98:	20004a04 	.word	0x20004a04
 800eb9c:	20004a2e 	.word	0x20004a2e
 800eba0:	080175a0 	.word	0x080175a0
 800eba4:	08017948 	.word	0x08017948
 800eba8:	080175ec 	.word	0x080175ec

0800ebac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ebb2:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <tcp_get_next_optbyte+0x5c>)
 800ebb4:	881b      	ldrh	r3, [r3, #0]
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	b291      	uxth	r1, r2
 800ebba:	4a13      	ldr	r2, [pc, #76]	; (800ec08 <tcp_get_next_optbyte+0x5c>)
 800ebbc:	8011      	strh	r1, [r2, #0]
 800ebbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ebc0:	4b12      	ldr	r3, [pc, #72]	; (800ec0c <tcp_get_next_optbyte+0x60>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d004      	beq.n	800ebd2 <tcp_get_next_optbyte+0x26>
 800ebc8:	4b11      	ldr	r3, [pc, #68]	; (800ec10 <tcp_get_next_optbyte+0x64>)
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	88fa      	ldrh	r2, [r7, #6]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d208      	bcs.n	800ebe4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ebd2:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <tcp_get_next_optbyte+0x68>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	3314      	adds	r3, #20
 800ebd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ebda:	88fb      	ldrh	r3, [r7, #6]
 800ebdc:	683a      	ldr	r2, [r7, #0]
 800ebde:	4413      	add	r3, r2
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	e00b      	b.n	800ebfc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ebe4:	88fb      	ldrh	r3, [r7, #6]
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	4b09      	ldr	r3, [pc, #36]	; (800ec10 <tcp_get_next_optbyte+0x64>)
 800ebea:	881b      	ldrh	r3, [r3, #0]
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ebf2:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <tcp_get_next_optbyte+0x60>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	797b      	ldrb	r3, [r7, #5]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	20004a20 	.word	0x20004a20
 800ec0c:	20004a1c 	.word	0x20004a1c
 800ec10:	20004a1a 	.word	0x20004a1a
 800ec14:	20004a14 	.word	0x20004a14

0800ec18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d106      	bne.n	800ec34 <tcp_parseopt+0x1c>
 800ec26:	4b31      	ldr	r3, [pc, #196]	; (800ecec <tcp_parseopt+0xd4>)
 800ec28:	f240 727d 	movw	r2, #1917	; 0x77d
 800ec2c:	4930      	ldr	r1, [pc, #192]	; (800ecf0 <tcp_parseopt+0xd8>)
 800ec2e:	4831      	ldr	r0, [pc, #196]	; (800ecf4 <tcp_parseopt+0xdc>)
 800ec30:	f006 fbdc 	bl	80153ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ec34:	4b30      	ldr	r3, [pc, #192]	; (800ecf8 <tcp_parseopt+0xe0>)
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d053      	beq.n	800ece4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec3c:	4b2f      	ldr	r3, [pc, #188]	; (800ecfc <tcp_parseopt+0xe4>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	801a      	strh	r2, [r3, #0]
 800ec42:	e043      	b.n	800eccc <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800ec44:	f7ff ffb2 	bl	800ebac <tcp_get_next_optbyte>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d03c      	beq.n	800eccc <tcp_parseopt+0xb4>
 800ec52:	2b02      	cmp	r3, #2
 800ec54:	d002      	beq.n	800ec5c <tcp_parseopt+0x44>
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d03f      	beq.n	800ecda <tcp_parseopt+0xc2>
 800ec5a:	e026      	b.n	800ecaa <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ec5c:	f7ff ffa6 	bl	800ebac <tcp_get_next_optbyte>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	d13b      	bne.n	800ecde <tcp_parseopt+0xc6>
 800ec66:	4b25      	ldr	r3, [pc, #148]	; (800ecfc <tcp_parseopt+0xe4>)
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	3302      	adds	r3, #2
 800ec6c:	4a22      	ldr	r2, [pc, #136]	; (800ecf8 <tcp_parseopt+0xe0>)
 800ec6e:	8812      	ldrh	r2, [r2, #0]
 800ec70:	4293      	cmp	r3, r2
 800ec72:	dc34      	bgt.n	800ecde <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ec74:	f7ff ff9a 	bl	800ebac <tcp_get_next_optbyte>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	021b      	lsls	r3, r3, #8
 800ec7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ec80:	f7ff ff94 	bl	800ebac <tcp_get_next_optbyte>
 800ec84:	4603      	mov	r3, r0
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	89bb      	ldrh	r3, [r7, #12]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ec8e:	89bb      	ldrh	r3, [r7, #12]
 800ec90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ec94:	d804      	bhi.n	800eca0 <tcp_parseopt+0x88>
 800ec96:	89bb      	ldrh	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <tcp_parseopt+0x88>
 800ec9c:	89ba      	ldrh	r2, [r7, #12]
 800ec9e:	e001      	b.n	800eca4 <tcp_parseopt+0x8c>
 800eca0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800eca8:	e010      	b.n	800eccc <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ecaa:	f7ff ff7f 	bl	800ebac <tcp_get_next_optbyte>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ecb2:	7afb      	ldrb	r3, [r7, #11]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d914      	bls.n	800ece2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ecb8:	7afb      	ldrb	r3, [r7, #11]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <tcp_parseopt+0xe4>)
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	3b02      	subs	r3, #2
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <tcp_parseopt+0xe4>)
 800ecca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eccc:	4b0b      	ldr	r3, [pc, #44]	; (800ecfc <tcp_parseopt+0xe4>)
 800ecce:	881a      	ldrh	r2, [r3, #0]
 800ecd0:	4b09      	ldr	r3, [pc, #36]	; (800ecf8 <tcp_parseopt+0xe0>)
 800ecd2:	881b      	ldrh	r3, [r3, #0]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d3b5      	bcc.n	800ec44 <tcp_parseopt+0x2c>
 800ecd8:	e004      	b.n	800ece4 <tcp_parseopt+0xcc>
          return;
 800ecda:	bf00      	nop
 800ecdc:	e002      	b.n	800ece4 <tcp_parseopt+0xcc>
            return;
 800ecde:	bf00      	nop
 800ece0:	e000      	b.n	800ece4 <tcp_parseopt+0xcc>
            return;
 800ece2:	bf00      	nop
      }
    }
  }
}
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	080175a0 	.word	0x080175a0
 800ecf0:	08017a04 	.word	0x08017a04
 800ecf4:	080175ec 	.word	0x080175ec
 800ecf8:	20004a18 	.word	0x20004a18
 800ecfc:	20004a20 	.word	0x20004a20

0800ed00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ed00:	b480      	push	{r7}
 800ed02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ed04:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <tcp_trigger_input_pcb_close+0x1c>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	f043 0310 	orr.w	r3, r3, #16
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	4b03      	ldr	r3, [pc, #12]	; (800ed1c <tcp_trigger_input_pcb_close+0x1c>)
 800ed10:	701a      	strb	r2, [r3, #0]
}
 800ed12:	bf00      	nop
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	20004a31 	.word	0x20004a31

0800ed20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00a      	beq.n	800ed48 <tcp_route+0x28>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	7a1b      	ldrb	r3, [r3, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d006      	beq.n	800ed48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	7a1b      	ldrb	r3, [r3, #8]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fb fb26 	bl	800a390 <netif_get_by_index>
 800ed44:	4603      	mov	r3, r0
 800ed46:	e003      	b.n	800ed50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f005 f819 	bl	8013d80 <ip4_route>
 800ed4e:	4603      	mov	r3, r0
  }
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ed58:	b590      	push	{r4, r7, lr}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	603b      	str	r3, [r7, #0]
 800ed64:	4613      	mov	r3, r2
 800ed66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d105      	bne.n	800ed7a <tcp_create_segment+0x22>
 800ed6e:	4b44      	ldr	r3, [pc, #272]	; (800ee80 <tcp_create_segment+0x128>)
 800ed70:	22a3      	movs	r2, #163	; 0xa3
 800ed72:	4944      	ldr	r1, [pc, #272]	; (800ee84 <tcp_create_segment+0x12c>)
 800ed74:	4844      	ldr	r0, [pc, #272]	; (800ee88 <tcp_create_segment+0x130>)
 800ed76:	f006 fb39 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d105      	bne.n	800ed8c <tcp_create_segment+0x34>
 800ed80:	4b3f      	ldr	r3, [pc, #252]	; (800ee80 <tcp_create_segment+0x128>)
 800ed82:	22a4      	movs	r2, #164	; 0xa4
 800ed84:	4941      	ldr	r1, [pc, #260]	; (800ee8c <tcp_create_segment+0x134>)
 800ed86:	4840      	ldr	r0, [pc, #256]	; (800ee88 <tcp_create_segment+0x130>)
 800ed88:	f006 fb30 	bl	80153ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ed8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0304 	and.w	r3, r3, #4
 800ed98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ed9a:	2003      	movs	r0, #3
 800ed9c:	f7fb f802 	bl	8009da4 <memp_malloc>
 800eda0:	6138      	str	r0, [r7, #16]
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d104      	bne.n	800edb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eda8:	68b8      	ldr	r0, [r7, #8]
 800edaa:	f7fb fe7b 	bl	800aaa4 <pbuf_free>
    return NULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	e061      	b.n	800ee76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800edb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	891a      	ldrh	r2, [r3, #8]
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	b29b      	uxth	r3, r3
 800edce:	429a      	cmp	r2, r3
 800edd0:	d205      	bcs.n	800edde <tcp_create_segment+0x86>
 800edd2:	4b2b      	ldr	r3, [pc, #172]	; (800ee80 <tcp_create_segment+0x128>)
 800edd4:	22b0      	movs	r2, #176	; 0xb0
 800edd6:	492e      	ldr	r1, [pc, #184]	; (800ee90 <tcp_create_segment+0x138>)
 800edd8:	482b      	ldr	r0, [pc, #172]	; (800ee88 <tcp_create_segment+0x130>)
 800edda:	f006 fb07 	bl	80153ec <iprintf>
  seg->len = p->tot_len - optlen;
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	891a      	ldrh	r2, [r3, #8]
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29a      	uxth	r2, r3
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800edee:	2114      	movs	r1, #20
 800edf0:	68b8      	ldr	r0, [r7, #8]
 800edf2:	f7fb fdc1 	bl	800a978 <pbuf_add_header>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d004      	beq.n	800ee06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800edfc:	6938      	ldr	r0, [r7, #16]
 800edfe:	f7fd f8d5 	bl	800bfac <tcp_seg_free>
    return NULL;
 800ee02:	2300      	movs	r3, #0
 800ee04:	e037      	b.n	800ee76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	685a      	ldr	r2, [r3, #4]
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	8ada      	ldrh	r2, [r3, #22]
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	68dc      	ldr	r4, [r3, #12]
 800ee18:	4610      	mov	r0, r2
 800ee1a:	f7fa fb0d 	bl	8009438 <lwip_htons>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	8b1a      	ldrh	r2, [r3, #24]
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	68dc      	ldr	r4, [r3, #12]
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	f7fa fb04 	bl	8009438 <lwip_htons>
 800ee30:	4603      	mov	r3, r0
 800ee32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	68dc      	ldr	r4, [r3, #12]
 800ee38:	6838      	ldr	r0, [r7, #0]
 800ee3a:	f7fa fb12 	bl	8009462 <lwip_htonl>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ee42:	7dfb      	ldrb	r3, [r7, #23]
 800ee44:	089b      	lsrs	r3, r3, #2
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	3305      	adds	r3, #5
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	031b      	lsls	r3, r3, #12
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	4313      	orrs	r3, r2
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	68dc      	ldr	r4, [r3, #12]
 800ee5e:	4610      	mov	r0, r2
 800ee60:	f7fa faea 	bl	8009438 <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	749a      	strb	r2, [r3, #18]
 800ee70:	2200      	movs	r2, #0
 800ee72:	74da      	strb	r2, [r3, #19]
  return seg;
 800ee74:	693b      	ldr	r3, [r7, #16]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	371c      	adds	r7, #28
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd90      	pop	{r4, r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	08017a20 	.word	0x08017a20
 800ee84:	08017a54 	.word	0x08017a54
 800ee88:	08017a74 	.word	0x08017a74
 800ee8c:	08017a9c 	.word	0x08017a9c
 800ee90:	08017ac0 	.word	0x08017ac0

0800ee94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b08b      	sub	sp, #44	; 0x2c
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eea0:	2300      	movs	r3, #0
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	2300      	movs	r3, #0
 800eea6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <tcp_split_unsent_seg+0x2c>
 800eeb2:	4b95      	ldr	r3, [pc, #596]	; (800f108 <tcp_split_unsent_seg+0x274>)
 800eeb4:	f240 324b 	movw	r2, #843	; 0x34b
 800eeb8:	4994      	ldr	r1, [pc, #592]	; (800f10c <tcp_split_unsent_seg+0x278>)
 800eeba:	4895      	ldr	r0, [pc, #596]	; (800f110 <tcp_split_unsent_seg+0x27c>)
 800eebc:	f006 fa96 	bl	80153ec <iprintf>

  useg = pcb->unsent;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d102      	bne.n	800eed2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800eecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eed0:	e116      	b.n	800f100 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800eed2:	887b      	ldrh	r3, [r7, #2]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d109      	bne.n	800eeec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800eed8:	4b8b      	ldr	r3, [pc, #556]	; (800f108 <tcp_split_unsent_seg+0x274>)
 800eeda:	f240 3253 	movw	r2, #851	; 0x353
 800eede:	498d      	ldr	r1, [pc, #564]	; (800f114 <tcp_split_unsent_seg+0x280>)
 800eee0:	488b      	ldr	r0, [pc, #556]	; (800f110 <tcp_split_unsent_seg+0x27c>)
 800eee2:	f006 fa83 	bl	80153ec <iprintf>
    return ERR_VAL;
 800eee6:	f06f 0305 	mvn.w	r3, #5
 800eeea:	e109      	b.n	800f100 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	891b      	ldrh	r3, [r3, #8]
 800eef0:	887a      	ldrh	r2, [r7, #2]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d301      	bcc.n	800eefa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	e102      	b.n	800f100 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eefe:	887a      	ldrh	r2, [r7, #2]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d906      	bls.n	800ef12 <tcp_split_unsent_seg+0x7e>
 800ef04:	4b80      	ldr	r3, [pc, #512]	; (800f108 <tcp_split_unsent_seg+0x274>)
 800ef06:	f240 325b 	movw	r2, #859	; 0x35b
 800ef0a:	4983      	ldr	r1, [pc, #524]	; (800f118 <tcp_split_unsent_seg+0x284>)
 800ef0c:	4880      	ldr	r0, [pc, #512]	; (800f110 <tcp_split_unsent_seg+0x27c>)
 800ef0e:	f006 fa6d 	bl	80153ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	891b      	ldrh	r3, [r3, #8]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d106      	bne.n	800ef28 <tcp_split_unsent_seg+0x94>
 800ef1a:	4b7b      	ldr	r3, [pc, #492]	; (800f108 <tcp_split_unsent_seg+0x274>)
 800ef1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ef20:	497e      	ldr	r1, [pc, #504]	; (800f11c <tcp_split_unsent_seg+0x288>)
 800ef22:	487b      	ldr	r0, [pc, #492]	; (800f110 <tcp_split_unsent_seg+0x27c>)
 800ef24:	f006 fa62 	bl	80153ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	7a9b      	ldrb	r3, [r3, #10]
 800ef2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f003 0304 	and.w	r3, r3, #4
 800ef38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	891a      	ldrh	r2, [r3, #8]
 800ef3e:	887b      	ldrh	r3, [r7, #2]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	89bb      	ldrh	r3, [r7, #12]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef52:	4619      	mov	r1, r3
 800ef54:	2036      	movs	r0, #54	; 0x36
 800ef56:	f7fb fac5 	bl	800a4e4 <pbuf_alloc>
 800ef5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f000 80b7 	beq.w	800f0d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	891a      	ldrh	r2, [r3, #8]
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	891b      	ldrh	r3, [r3, #8]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	887b      	ldrh	r3, [r7, #2]
 800ef74:	4413      	add	r3, r2
 800ef76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	6858      	ldr	r0, [r3, #4]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	7bbb      	ldrb	r3, [r7, #14]
 800ef82:	18d1      	adds	r1, r2, r3
 800ef84:	897b      	ldrh	r3, [r7, #10]
 800ef86:	89ba      	ldrh	r2, [r7, #12]
 800ef88:	f7fb ff92 	bl	800aeb0 <pbuf_copy_partial>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461a      	mov	r2, r3
 800ef90:	89bb      	ldrh	r3, [r7, #12]
 800ef92:	4293      	cmp	r3, r2
 800ef94:	f040 809f 	bne.w	800f0d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	899b      	ldrh	r3, [r3, #12]
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fa fa49 	bl	8009438 <lwip_htons>
 800efa6:	4603      	mov	r3, r0
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800efb0:	2300      	movs	r3, #0
 800efb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800efb4:	7efb      	ldrb	r3, [r7, #27]
 800efb6:	f003 0308 	and.w	r3, r3, #8
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d007      	beq.n	800efce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800efbe:	7efb      	ldrb	r3, [r7, #27]
 800efc0:	f023 0308 	bic.w	r3, r3, #8
 800efc4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800efc6:	7ebb      	ldrb	r3, [r7, #26]
 800efc8:	f043 0308 	orr.w	r3, r3, #8
 800efcc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800efce:	7efb      	ldrb	r3, [r7, #27]
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800efd8:	7efb      	ldrb	r3, [r7, #27]
 800efda:	f023 0301 	bic.w	r3, r3, #1
 800efde:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800efe0:	7ebb      	ldrb	r3, [r7, #26]
 800efe2:	f043 0301 	orr.w	r3, r3, #1
 800efe6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fa fa37 	bl	8009462 <lwip_htonl>
 800eff4:	4602      	mov	r2, r0
 800eff6:	887b      	ldrh	r3, [r7, #2]
 800eff8:	18d1      	adds	r1, r2, r3
 800effa:	7eba      	ldrb	r2, [r7, #26]
 800effc:	7bfb      	ldrb	r3, [r7, #15]
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	460b      	mov	r3, r1
 800f002:	6939      	ldr	r1, [r7, #16]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff fea7 	bl	800ed58 <tcp_create_segment>
 800f00a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d063      	beq.n	800f0da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	4618      	mov	r0, r3
 800f018:	f7fb fdd2 	bl	800abc0 <pbuf_clen>
 800f01c:	4603      	mov	r3, r0
 800f01e:	461a      	mov	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f026:	1a9b      	subs	r3, r3, r2
 800f028:	b29a      	uxth	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	6858      	ldr	r0, [r3, #4]
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	891a      	ldrh	r2, [r3, #8]
 800f03a:	89bb      	ldrh	r3, [r7, #12]
 800f03c:	1ad3      	subs	r3, r2, r3
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4619      	mov	r1, r3
 800f042:	f7fb fba9 	bl	800a798 <pbuf_realloc>
  useg->len -= remainder;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	891a      	ldrh	r2, [r3, #8]
 800f04a:	89bb      	ldrh	r3, [r7, #12]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	b29a      	uxth	r2, r3
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	899b      	ldrh	r3, [r3, #12]
 800f05a:	b29c      	uxth	r4, r3
 800f05c:	7efb      	ldrb	r3, [r7, #27]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	4618      	mov	r0, r3
 800f062:	f7fa f9e9 	bl	8009438 <lwip_htons>
 800f066:	4603      	mov	r3, r0
 800f068:	461a      	mov	r2, r3
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	4322      	orrs	r2, r4
 800f070:	b292      	uxth	r2, r2
 800f072:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fb fda1 	bl	800abc0 <pbuf_clen>
 800f07e:	4603      	mov	r3, r0
 800f080:	461a      	mov	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f088:	4413      	add	r3, r2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	4618      	mov	r0, r3
 800f098:	f7fb fd92 	bl	800abc0 <pbuf_clen>
 800f09c:	4603      	mov	r3, r0
 800f09e:	461a      	mov	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0a6:	4413      	add	r3, r2
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	69fa      	ldr	r2, [r7, #28]
 800f0bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d103      	bne.n	800f0ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e016      	b.n	800f100 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f0d2:	bf00      	nop
 800f0d4:	e002      	b.n	800f0dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f0d6:	bf00      	nop
 800f0d8:	e000      	b.n	800f0dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f0da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d006      	beq.n	800f0f0 <tcp_split_unsent_seg+0x25c>
 800f0e2:	4b09      	ldr	r3, [pc, #36]	; (800f108 <tcp_split_unsent_seg+0x274>)
 800f0e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f0e8:	490d      	ldr	r1, [pc, #52]	; (800f120 <tcp_split_unsent_seg+0x28c>)
 800f0ea:	4809      	ldr	r0, [pc, #36]	; (800f110 <tcp_split_unsent_seg+0x27c>)
 800f0ec:	f006 f97e 	bl	80153ec <iprintf>
  if (p != NULL) {
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f0f6:	6938      	ldr	r0, [r7, #16]
 800f0f8:	f7fb fcd4 	bl	800aaa4 <pbuf_free>
  }

  return ERR_MEM;
 800f0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f100:	4618      	mov	r0, r3
 800f102:	3724      	adds	r7, #36	; 0x24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd90      	pop	{r4, r7, pc}
 800f108:	08017a20 	.word	0x08017a20
 800f10c:	08017db4 	.word	0x08017db4
 800f110:	08017a74 	.word	0x08017a74
 800f114:	08017dd8 	.word	0x08017dd8
 800f118:	08017dfc 	.word	0x08017dfc
 800f11c:	08017e0c 	.word	0x08017e0c
 800f120:	08017e1c 	.word	0x08017e1c

0800f124 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f124:	b590      	push	{r4, r7, lr}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <tcp_send_fin+0x1c>
 800f132:	4b21      	ldr	r3, [pc, #132]	; (800f1b8 <tcp_send_fin+0x94>)
 800f134:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f138:	4920      	ldr	r1, [pc, #128]	; (800f1bc <tcp_send_fin+0x98>)
 800f13a:	4821      	ldr	r0, [pc, #132]	; (800f1c0 <tcp_send_fin+0x9c>)
 800f13c:	f006 f956 	bl	80153ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f144:	2b00      	cmp	r3, #0
 800f146:	d02e      	beq.n	800f1a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f14c:	60fb      	str	r3, [r7, #12]
 800f14e:	e002      	b.n	800f156 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1f8      	bne.n	800f150 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	899b      	ldrh	r3, [r3, #12]
 800f164:	b29b      	uxth	r3, r3
 800f166:	4618      	mov	r0, r3
 800f168:	f7fa f966 	bl	8009438 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	f003 0307 	and.w	r3, r3, #7
 800f174:	2b00      	cmp	r3, #0
 800f176:	d116      	bne.n	800f1a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	899b      	ldrh	r3, [r3, #12]
 800f17e:	b29c      	uxth	r4, r3
 800f180:	2001      	movs	r0, #1
 800f182:	f7fa f959 	bl	8009438 <lwip_htons>
 800f186:	4603      	mov	r3, r0
 800f188:	461a      	mov	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	4322      	orrs	r2, r4
 800f190:	b292      	uxth	r2, r2
 800f192:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f043 0320 	orr.w	r3, r3, #32
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e004      	b.n	800f1b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f1a6:	2101      	movs	r1, #1
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f80b 	bl	800f1c4 <tcp_enqueue_flags>
 800f1ae:	4603      	mov	r3, r0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd90      	pop	{r4, r7, pc}
 800f1b8:	08017a20 	.word	0x08017a20
 800f1bc:	08017e28 	.word	0x08017e28
 800f1c0:	08017a74 	.word	0x08017a74

0800f1c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08a      	sub	sp, #40	; 0x28
 800f1c8:	af02      	add	r7, sp, #8
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f1d8:	78fb      	ldrb	r3, [r7, #3]
 800f1da:	f003 0303 	and.w	r3, r3, #3
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <tcp_enqueue_flags+0x2c>
 800f1e2:	4b67      	ldr	r3, [pc, #412]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f1e4:	f240 4212 	movw	r2, #1042	; 0x412
 800f1e8:	4966      	ldr	r1, [pc, #408]	; (800f384 <tcp_enqueue_flags+0x1c0>)
 800f1ea:	4867      	ldr	r0, [pc, #412]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f1ec:	f006 f8fe 	bl	80153ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d106      	bne.n	800f204 <tcp_enqueue_flags+0x40>
 800f1f6:	4b62      	ldr	r3, [pc, #392]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f1f8:	f240 4213 	movw	r2, #1043	; 0x413
 800f1fc:	4963      	ldr	r1, [pc, #396]	; (800f38c <tcp_enqueue_flags+0x1c8>)
 800f1fe:	4862      	ldr	r0, [pc, #392]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f200:	f006 f8f4 	bl	80153ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f20e:	2301      	movs	r3, #1
 800f210:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f212:	7ffb      	ldrb	r3, [r7, #31]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	b2db      	uxtb	r3, r3
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
 800f220:	b29b      	uxth	r3, r3
 800f222:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f226:	4619      	mov	r1, r3
 800f228:	2036      	movs	r0, #54	; 0x36
 800f22a:	f7fb f95b 	bl	800a4e4 <pbuf_alloc>
 800f22e:	6138      	str	r0, [r7, #16]
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d109      	bne.n	800f24a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	8b5b      	ldrh	r3, [r3, #26]
 800f23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23e:	b29a      	uxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f248:	e095      	b.n	800f376 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	895a      	ldrh	r2, [r3, #10]
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	b29b      	uxth	r3, r3
 800f252:	429a      	cmp	r2, r3
 800f254:	d206      	bcs.n	800f264 <tcp_enqueue_flags+0xa0>
 800f256:	4b4a      	ldr	r3, [pc, #296]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f258:	f240 423a 	movw	r2, #1082	; 0x43a
 800f25c:	494c      	ldr	r1, [pc, #304]	; (800f390 <tcp_enqueue_flags+0x1cc>)
 800f25e:	484a      	ldr	r0, [pc, #296]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f260:	f006 f8c4 	bl	80153ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f268:	78fa      	ldrb	r2, [r7, #3]
 800f26a:	7ffb      	ldrb	r3, [r7, #31]
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	460b      	mov	r3, r1
 800f270:	6939      	ldr	r1, [r7, #16]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff fd70 	bl	800ed58 <tcp_create_segment>
 800f278:	60f8      	str	r0, [r7, #12]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d109      	bne.n	800f294 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	8b5b      	ldrh	r3, [r3, #26]
 800f284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f292:	e070      	b.n	800f376 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d006      	beq.n	800f2ae <tcp_enqueue_flags+0xea>
 800f2a0:	4b37      	ldr	r3, [pc, #220]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f2a2:	f240 4242 	movw	r2, #1090	; 0x442
 800f2a6:	493b      	ldr	r1, [pc, #236]	; (800f394 <tcp_enqueue_flags+0x1d0>)
 800f2a8:	4837      	ldr	r0, [pc, #220]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f2aa:	f006 f89f 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	891b      	ldrh	r3, [r3, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d006      	beq.n	800f2c4 <tcp_enqueue_flags+0x100>
 800f2b6:	4b32      	ldr	r3, [pc, #200]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f2b8:	f240 4243 	movw	r2, #1091	; 0x443
 800f2bc:	4936      	ldr	r1, [pc, #216]	; (800f398 <tcp_enqueue_flags+0x1d4>)
 800f2be:	4832      	ldr	r0, [pc, #200]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f2c0:	f006 f894 	bl	80153ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d103      	bne.n	800f2d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800f2d2:	e00d      	b.n	800f2f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d8:	61bb      	str	r3, [r7, #24]
 800f2da:	e002      	b.n	800f2e2 <tcp_enqueue_flags+0x11e>
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	61bb      	str	r3, [r7, #24]
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1f8      	bne.n	800f2dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	f003 0302 	and.w	r3, r3, #2
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d104      	bne.n	800f30c <tcp_enqueue_flags+0x148>
 800f302:	78fb      	ldrb	r3, [r7, #3]
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f310:	1c5a      	adds	r2, r3, #1
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f316:	78fb      	ldrb	r3, [r7, #3]
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d006      	beq.n	800f32e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8b5b      	ldrh	r3, [r3, #26]
 800f324:	f043 0320 	orr.w	r3, r3, #32
 800f328:	b29a      	uxth	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	4618      	mov	r0, r3
 800f334:	f7fb fc44 	bl	800abc0 <pbuf_clen>
 800f338:	4603      	mov	r3, r0
 800f33a:	461a      	mov	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f342:	4413      	add	r3, r2
 800f344:	b29a      	uxth	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00e      	beq.n	800f374 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10a      	bne.n	800f374 <tcp_enqueue_flags+0x1b0>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <tcp_enqueue_flags+0x1b0>
 800f366:	4b06      	ldr	r3, [pc, #24]	; (800f380 <tcp_enqueue_flags+0x1bc>)
 800f368:	f240 4266 	movw	r2, #1126	; 0x466
 800f36c:	490b      	ldr	r1, [pc, #44]	; (800f39c <tcp_enqueue_flags+0x1d8>)
 800f36e:	4806      	ldr	r0, [pc, #24]	; (800f388 <tcp_enqueue_flags+0x1c4>)
 800f370:	f006 f83c 	bl	80153ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	08017a20 	.word	0x08017a20
 800f384:	08017e44 	.word	0x08017e44
 800f388:	08017a74 	.word	0x08017a74
 800f38c:	08017e9c 	.word	0x08017e9c
 800f390:	08017ebc 	.word	0x08017ebc
 800f394:	08017ef8 	.word	0x08017ef8
 800f398:	08017f10 	.word	0x08017f10
 800f39c:	08017f3c 	.word	0x08017f3c

0800f3a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f3a0:	b5b0      	push	{r4, r5, r7, lr}
 800f3a2:	b08a      	sub	sp, #40	; 0x28
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d106      	bne.n	800f3bc <tcp_output+0x1c>
 800f3ae:	4ba0      	ldr	r3, [pc, #640]	; (800f630 <tcp_output+0x290>)
 800f3b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f3b4:	499f      	ldr	r1, [pc, #636]	; (800f634 <tcp_output+0x294>)
 800f3b6:	48a0      	ldr	r0, [pc, #640]	; (800f638 <tcp_output+0x298>)
 800f3b8:	f006 f818 	bl	80153ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d106      	bne.n	800f3d2 <tcp_output+0x32>
 800f3c4:	4b9a      	ldr	r3, [pc, #616]	; (800f630 <tcp_output+0x290>)
 800f3c6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800f3ca:	499c      	ldr	r1, [pc, #624]	; (800f63c <tcp_output+0x29c>)
 800f3cc:	489a      	ldr	r0, [pc, #616]	; (800f638 <tcp_output+0x298>)
 800f3ce:	f006 f80d 	bl	80153ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f3d2:	4b9b      	ldr	r3, [pc, #620]	; (800f640 <tcp_output+0x2a0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d101      	bne.n	800f3e0 <tcp_output+0x40>
    return ERR_OK;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e1d2      	b.n	800f786 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d203      	bcs.n	800f3f8 <tcp_output+0x58>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f6:	e002      	b.n	800f3fe <tcp_output+0x5e>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3fe:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f404:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10b      	bne.n	800f424 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	8b5b      	ldrh	r3, [r3, #26]
 800f410:	f003 0302 	and.w	r3, r3, #2
 800f414:	2b00      	cmp	r3, #0
 800f416:	f000 81a9 	beq.w	800f76c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fdd8 	bl	800ffd0 <tcp_send_empty_ack>
 800f420:	4603      	mov	r3, r0
 800f422:	e1b0      	b.n	800f786 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3304      	adds	r3, #4
 800f42a:	461a      	mov	r2, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff fc77 	bl	800ed20 <tcp_route>
 800f432:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d102      	bne.n	800f440 <tcp_output+0xa0>
    return ERR_RTE;
 800f43a:	f06f 0303 	mvn.w	r3, #3
 800f43e:	e1a2      	b.n	800f786 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d003      	beq.n	800f44e <tcp_output+0xae>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d111      	bne.n	800f472 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <tcp_output+0xba>
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	3304      	adds	r3, #4
 800f458:	e000      	b.n	800f45c <tcp_output+0xbc>
 800f45a:	2300      	movs	r3, #0
 800f45c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <tcp_output+0xca>
      return ERR_RTE;
 800f464:	f06f 0303 	mvn.w	r3, #3
 800f468:	e18d      	b.n	800f786 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f9 fff2 	bl	8009462 <lwip_htonl>
 800f47e:	4602      	mov	r2, r0
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f488:	8912      	ldrh	r2, [r2, #8]
 800f48a:	4413      	add	r3, r2
 800f48c:	69ba      	ldr	r2, [r7, #24]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d227      	bcs.n	800f4e2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f498:	461a      	mov	r2, r3
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d114      	bne.n	800f4ca <tcp_output+0x12a>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d110      	bne.n	800f4ca <tcp_output+0x12a>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10b      	bne.n	800f4ca <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	8b5b      	ldrh	r3, [r3, #26]
 800f4ce:	f003 0302 	and.w	r3, r3, #2
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 814c 	beq.w	800f770 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fd79 	bl	800ffd0 <tcp_send_empty_ack>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	e151      	b.n	800f786 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ee:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f4f0:	6a3b      	ldr	r3, [r7, #32]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 811b 	beq.w	800f72e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800f4f8:	e002      	b.n	800f500 <tcp_output+0x160>
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	623b      	str	r3, [r7, #32]
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1f8      	bne.n	800f4fa <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f508:	e111      	b.n	800f72e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	b29b      	uxth	r3, r3
 800f512:	4618      	mov	r0, r3
 800f514:	f7f9 ff90 	bl	8009438 <lwip_htons>
 800f518:	4603      	mov	r3, r0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d006      	beq.n	800f532 <tcp_output+0x192>
 800f524:	4b42      	ldr	r3, [pc, #264]	; (800f630 <tcp_output+0x290>)
 800f526:	f240 5237 	movw	r2, #1335	; 0x537
 800f52a:	4946      	ldr	r1, [pc, #280]	; (800f644 <tcp_output+0x2a4>)
 800f52c:	4842      	ldr	r0, [pc, #264]	; (800f638 <tcp_output+0x298>)
 800f52e:	f005 ff5d 	bl	80153ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f536:	2b00      	cmp	r3, #0
 800f538:	d01f      	beq.n	800f57a <tcp_output+0x1da>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8b5b      	ldrh	r3, [r3, #26]
 800f53e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f542:	2b00      	cmp	r3, #0
 800f544:	d119      	bne.n	800f57a <tcp_output+0x1da>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00b      	beq.n	800f566 <tcp_output+0x1c6>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d110      	bne.n	800f57a <tcp_output+0x1da>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f55c:	891a      	ldrh	r2, [r3, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f562:	429a      	cmp	r2, r3
 800f564:	d209      	bcs.n	800f57a <tcp_output+0x1da>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d004      	beq.n	800f57a <tcp_output+0x1da>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f576:	2b08      	cmp	r3, #8
 800f578:	d901      	bls.n	800f57e <tcp_output+0x1de>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e000      	b.n	800f580 <tcp_output+0x1e0>
 800f57e:	2300      	movs	r3, #0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d106      	bne.n	800f592 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	8b5b      	ldrh	r3, [r3, #26]
 800f588:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f000 80e3 	beq.w	800f758 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	7d1b      	ldrb	r3, [r3, #20]
 800f596:	2b02      	cmp	r3, #2
 800f598:	d00d      	beq.n	800f5b6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29c      	uxth	r4, r3
 800f5a2:	2010      	movs	r0, #16
 800f5a4:	f7f9 ff48 	bl	8009438 <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	4322      	orrs	r2, r4
 800f5b2:	b292      	uxth	r2, r2
 800f5b4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5bc:	f000 f908 	bl	800f7d0 <tcp_output_segment>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d009      	beq.n	800f5e0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	8b5b      	ldrh	r3, [r3, #26]
 800f5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	835a      	strh	r2, [r3, #26]
      return err;
 800f5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5de:	e0d2      	b.n	800f786 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d006      	beq.n	800f5fe <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8b5b      	ldrh	r3, [r3, #26]
 800f5f4:	f023 0303 	bic.w	r3, r3, #3
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	f7f9 ff2c 	bl	8009462 <lwip_htonl>
 800f60a:	4604      	mov	r4, r0
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	461d      	mov	r5, r3
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	899b      	ldrh	r3, [r3, #12]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7f9 ff0c 	bl	8009438 <lwip_htons>
 800f620:	4603      	mov	r3, r0
 800f622:	b2db      	uxtb	r3, r3
 800f624:	f003 0303 	and.w	r3, r3, #3
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00d      	beq.n	800f648 <tcp_output+0x2a8>
 800f62c:	2301      	movs	r3, #1
 800f62e:	e00c      	b.n	800f64a <tcp_output+0x2aa>
 800f630:	08017a20 	.word	0x08017a20
 800f634:	08017f64 	.word	0x08017f64
 800f638:	08017a74 	.word	0x08017a74
 800f63c:	08017f7c 	.word	0x08017f7c
 800f640:	2000b8d4 	.word	0x2000b8d4
 800f644:	08017fa4 	.word	0x08017fa4
 800f648:	2300      	movs	r3, #0
 800f64a:	442b      	add	r3, r5
 800f64c:	4423      	add	r3, r4
 800f64e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	1ad3      	subs	r3, r2, r3
 800f658:	2b00      	cmp	r3, #0
 800f65a:	da02      	bge.n	800f662 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	891b      	ldrh	r3, [r3, #8]
 800f666:	461c      	mov	r4, r3
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	899b      	ldrh	r3, [r3, #12]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	4618      	mov	r0, r3
 800f672:	f7f9 fee1 	bl	8009438 <lwip_htons>
 800f676:	4603      	mov	r3, r0
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	f003 0303 	and.w	r3, r3, #3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <tcp_output+0x2e6>
 800f682:	2301      	movs	r3, #1
 800f684:	e000      	b.n	800f688 <tcp_output+0x2e8>
 800f686:	2300      	movs	r3, #0
 800f688:	4423      	add	r3, r4
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d049      	beq.n	800f722 <tcp_output+0x382>
      seg->next = NULL;
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	2200      	movs	r2, #0
 800f692:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d105      	bne.n	800f6a8 <tcp_output+0x308>
        pcb->unacked = seg;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a4:	623b      	str	r3, [r7, #32]
 800f6a6:	e03f      	b.n	800f728 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7f9 fed7 	bl	8009462 <lwip_htonl>
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	6a3b      	ldr	r3, [r7, #32]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7f9 fed0 	bl	8009462 <lwip_htonl>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	1ae3      	subs	r3, r4, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	da24      	bge.n	800f714 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	3370      	adds	r3, #112	; 0x70
 800f6ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f6d0:	e002      	b.n	800f6d8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d011      	beq.n	800f704 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7f9 feba 	bl	8009462 <lwip_htonl>
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f9 feb3 	bl	8009462 <lwip_htonl>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f700:	2b00      	cmp	r3, #0
 800f702:	dbe6      	blt.n	800f6d2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	e009      	b.n	800f728 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f718:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f71a:	6a3b      	ldr	r3, [r7, #32]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	623b      	str	r3, [r7, #32]
 800f720:	e002      	b.n	800f728 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f724:	f7fc fc42 	bl	800bfac <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	2b00      	cmp	r3, #0
 800f732:	d012      	beq.n	800f75a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7f9 fe91 	bl	8009462 <lwip_htonl>
 800f740:	4602      	mov	r2, r0
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f74a:	8912      	ldrh	r2, [r2, #8]
 800f74c:	4413      	add	r3, r2
  while (seg != NULL &&
 800f74e:	69ba      	ldr	r2, [r7, #24]
 800f750:	429a      	cmp	r2, r3
 800f752:	f4bf aeda 	bcs.w	800f50a <tcp_output+0x16a>
 800f756:	e000      	b.n	800f75a <tcp_output+0x3ba>
      break;
 800f758:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d108      	bne.n	800f774 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f76a:	e004      	b.n	800f776 <tcp_output+0x3d6>
    goto output_done;
 800f76c:	bf00      	nop
 800f76e:	e002      	b.n	800f776 <tcp_output+0x3d6>
    goto output_done;
 800f770:	bf00      	nop
 800f772:	e000      	b.n	800f776 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f774:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	8b5b      	ldrh	r3, [r3, #26]
 800f77a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3728      	adds	r7, #40	; 0x28
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bdb0      	pop	{r4, r5, r7, pc}
 800f78e:	bf00      	nop

0800f790 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <tcp_output_segment_busy+0x1c>
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <tcp_output_segment_busy+0x34>)
 800f7a0:	f240 529a 	movw	r2, #1434	; 0x59a
 800f7a4:	4908      	ldr	r1, [pc, #32]	; (800f7c8 <tcp_output_segment_busy+0x38>)
 800f7a6:	4809      	ldr	r0, [pc, #36]	; (800f7cc <tcp_output_segment_busy+0x3c>)
 800f7a8:	f005 fe20 	bl	80153ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	7b9b      	ldrb	r3, [r3, #14]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d001      	beq.n	800f7ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	08017a20 	.word	0x08017a20
 800f7c8:	08017fbc 	.word	0x08017fbc
 800f7cc:	08017a74 	.word	0x08017a74

0800f7d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f7d0:	b5b0      	push	{r4, r5, r7, lr}
 800f7d2:	b08c      	sub	sp, #48	; 0x30
 800f7d4:	af04      	add	r7, sp, #16
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d106      	bne.n	800f7f0 <tcp_output_segment+0x20>
 800f7e2:	4b64      	ldr	r3, [pc, #400]	; (800f974 <tcp_output_segment+0x1a4>)
 800f7e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f7e8:	4963      	ldr	r1, [pc, #396]	; (800f978 <tcp_output_segment+0x1a8>)
 800f7ea:	4864      	ldr	r0, [pc, #400]	; (800f97c <tcp_output_segment+0x1ac>)
 800f7ec:	f005 fdfe 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d106      	bne.n	800f804 <tcp_output_segment+0x34>
 800f7f6:	4b5f      	ldr	r3, [pc, #380]	; (800f974 <tcp_output_segment+0x1a4>)
 800f7f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f7fc:	4960      	ldr	r1, [pc, #384]	; (800f980 <tcp_output_segment+0x1b0>)
 800f7fe:	485f      	ldr	r0, [pc, #380]	; (800f97c <tcp_output_segment+0x1ac>)
 800f800:	f005 fdf4 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <tcp_output_segment+0x48>
 800f80a:	4b5a      	ldr	r3, [pc, #360]	; (800f974 <tcp_output_segment+0x1a4>)
 800f80c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f810:	495c      	ldr	r1, [pc, #368]	; (800f984 <tcp_output_segment+0x1b4>)
 800f812:	485a      	ldr	r0, [pc, #360]	; (800f97c <tcp_output_segment+0x1ac>)
 800f814:	f005 fdea 	bl	80153ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f7ff ffb9 	bl	800f790 <tcp_output_segment_busy>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f824:	2300      	movs	r3, #0
 800f826:	e0a0      	b.n	800f96a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	68dc      	ldr	r4, [r3, #12]
 800f830:	4610      	mov	r0, r2
 800f832:	f7f9 fe16 	bl	8009462 <lwip_htonl>
 800f836:	4603      	mov	r3, r0
 800f838:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	68dc      	ldr	r4, [r3, #12]
 800f842:	4610      	mov	r0, r2
 800f844:	f7f9 fdf8 	bl	8009438 <lwip_htons>
 800f848:	4603      	mov	r3, r0
 800f84a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f854:	441a      	add	r2, r3
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	3314      	adds	r3, #20
 800f860:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	7a9b      	ldrb	r3, [r3, #10]
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d015      	beq.n	800f89a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	3304      	adds	r3, #4
 800f872:	461a      	mov	r2, r3
 800f874:	6879      	ldr	r1, [r7, #4]
 800f876:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f87a:	f7fc fe8d 	bl	800c598 <tcp_eff_send_mss_netif>
 800f87e:	4603      	mov	r3, r0
 800f880:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f882:	8b7b      	ldrh	r3, [r7, #26]
 800f884:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f9 fdea 	bl	8009462 <lwip_htonl>
 800f88e:	4602      	mov	r2, r0
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	3304      	adds	r3, #4
 800f898:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	da02      	bge.n	800f8aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10c      	bne.n	800f8cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f8b2:	4b35      	ldr	r3, [pc, #212]	; (800f988 <tcp_output_segment+0x1b8>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7f9 fdce 	bl	8009462 <lwip_htonl>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	8959      	ldrh	r1, [r3, #10]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	8b3a      	ldrh	r2, [r7, #24]
 800f8e8:	1a8a      	subs	r2, r1, r2
 800f8ea:	b292      	uxth	r2, r2
 800f8ec:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	8919      	ldrh	r1, [r3, #8]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	8b3a      	ldrh	r2, [r7, #24]
 800f8fa:	1a8a      	subs	r2, r1, r2
 800f8fc:	b292      	uxth	r2, r2
 800f8fe:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	68d2      	ldr	r2, [r2, #12]
 800f908:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	741a      	strb	r2, [r3, #16]
 800f912:	2200      	movs	r2, #0
 800f914:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	f103 0214 	add.w	r2, r3, #20
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	7a9b      	ldrb	r3, [r3, #10]
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	4413      	add	r3, r2
 800f92a:	69fa      	ldr	r2, [r7, #28]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d006      	beq.n	800f93e <tcp_output_segment+0x16e>
 800f930:	4b10      	ldr	r3, [pc, #64]	; (800f974 <tcp_output_segment+0x1a4>)
 800f932:	f240 621c 	movw	r2, #1564	; 0x61c
 800f936:	4915      	ldr	r1, [pc, #84]	; (800f98c <tcp_output_segment+0x1bc>)
 800f938:	4810      	ldr	r0, [pc, #64]	; (800f97c <tcp_output_segment+0x1ac>)
 800f93a:	f005 fd57 	bl	80153ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	6858      	ldr	r0, [r3, #4]
 800f942:	68b9      	ldr	r1, [r7, #8]
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	1d1c      	adds	r4, r3, #4
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	7add      	ldrb	r5, [r3, #11]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	7a9b      	ldrb	r3, [r3, #10]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	9202      	str	r2, [sp, #8]
 800f954:	2206      	movs	r2, #6
 800f956:	9201      	str	r2, [sp, #4]
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	462b      	mov	r3, r5
 800f95c:	4622      	mov	r2, r4
 800f95e:	f004 fbe9 	bl	8014134 <ip4_output_if>
 800f962:	4603      	mov	r3, r0
 800f964:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3720      	adds	r7, #32
 800f96e:	46bd      	mov	sp, r7
 800f970:	bdb0      	pop	{r4, r5, r7, pc}
 800f972:	bf00      	nop
 800f974:	08017a20 	.word	0x08017a20
 800f978:	08017fe4 	.word	0x08017fe4
 800f97c:	08017a74 	.word	0x08017a74
 800f980:	08018004 	.word	0x08018004
 800f984:	08018024 	.word	0x08018024
 800f988:	2000b8c4 	.word	0x2000b8c4
 800f98c:	08018048 	.word	0x08018048

0800f990 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f990:	b5b0      	push	{r4, r5, r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d106      	bne.n	800f9ac <tcp_rexmit_rto_prepare+0x1c>
 800f99e:	4b31      	ldr	r3, [pc, #196]	; (800fa64 <tcp_rexmit_rto_prepare+0xd4>)
 800f9a0:	f240 6263 	movw	r2, #1635	; 0x663
 800f9a4:	4930      	ldr	r1, [pc, #192]	; (800fa68 <tcp_rexmit_rto_prepare+0xd8>)
 800f9a6:	4831      	ldr	r0, [pc, #196]	; (800fa6c <tcp_rexmit_rto_prepare+0xdc>)
 800f9a8:	f005 fd20 	bl	80153ec <iprintf>

  if (pcb->unacked == NULL) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f9b4:	f06f 0305 	mvn.w	r3, #5
 800f9b8:	e050      	b.n	800fa5c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9be:	60fb      	str	r3, [r7, #12]
 800f9c0:	e00b      	b.n	800f9da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f7ff fee4 	bl	800f790 <tcp_output_segment_busy>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f9ce:	f06f 0305 	mvn.w	r3, #5
 800f9d2:	e043      	b.n	800fa5c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1ef      	bne.n	800f9c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f7ff fed4 	bl	800f790 <tcp_output_segment_busy>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f9ee:	f06f 0305 	mvn.w	r3, #5
 800f9f2:	e033      	b.n	800fa5c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	8b5b      	ldrh	r3, [r3, #26]
 800fa0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f9 fd1f 	bl	8009462 <lwip_htonl>
 800fa24:	4604      	mov	r4, r0
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	891b      	ldrh	r3, [r3, #8]
 800fa2a:	461d      	mov	r5, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7f9 fcff 	bl	8009438 <lwip_htons>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	f003 0303 	and.w	r3, r3, #3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <tcp_rexmit_rto_prepare+0xba>
 800fa46:	2301      	movs	r3, #1
 800fa48:	e000      	b.n	800fa4c <tcp_rexmit_rto_prepare+0xbc>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	442b      	add	r3, r5
 800fa4e:	18e2      	adds	r2, r4, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bdb0      	pop	{r4, r5, r7, pc}
 800fa64:	08017a20 	.word	0x08017a20
 800fa68:	0801805c 	.word	0x0801805c
 800fa6c:	08017a74 	.word	0x08017a74

0800fa70 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <tcp_rexmit_rto_commit+0x1c>
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	; (800fab4 <tcp_rexmit_rto_commit+0x44>)
 800fa80:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fa84:	490c      	ldr	r1, [pc, #48]	; (800fab8 <tcp_rexmit_rto_commit+0x48>)
 800fa86:	480d      	ldr	r0, [pc, #52]	; (800fabc <tcp_rexmit_rto_commit+0x4c>)
 800fa88:	f005 fcb0 	bl	80153ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa92:	2bff      	cmp	r3, #255	; 0xff
 800fa94:	d007      	beq.n	800faa6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff fc7a 	bl	800f3a0 <tcp_output>
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	08017a20 	.word	0x08017a20
 800fab8:	08018080 	.word	0x08018080
 800fabc:	08017a74 	.word	0x08017a74

0800fac0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d106      	bne.n	800fadc <tcp_rexmit_rto+0x1c>
 800face:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <tcp_rexmit_rto+0x38>)
 800fad0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fad4:	4909      	ldr	r1, [pc, #36]	; (800fafc <tcp_rexmit_rto+0x3c>)
 800fad6:	480a      	ldr	r0, [pc, #40]	; (800fb00 <tcp_rexmit_rto+0x40>)
 800fad8:	f005 fc88 	bl	80153ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff ff57 	bl	800f990 <tcp_rexmit_rto_prepare>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d102      	bne.n	800faee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff ffc1 	bl	800fa70 <tcp_rexmit_rto_commit>
  }
}
 800faee:	bf00      	nop
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	08017a20 	.word	0x08017a20
 800fafc:	080180a4 	.word	0x080180a4
 800fb00:	08017a74 	.word	0x08017a74

0800fb04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fb04:	b590      	push	{r4, r7, lr}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <tcp_rexmit+0x1c>
 800fb12:	4b2f      	ldr	r3, [pc, #188]	; (800fbd0 <tcp_rexmit+0xcc>)
 800fb14:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fb18:	492e      	ldr	r1, [pc, #184]	; (800fbd4 <tcp_rexmit+0xd0>)
 800fb1a:	482f      	ldr	r0, [pc, #188]	; (800fbd8 <tcp_rexmit+0xd4>)
 800fb1c:	f005 fc66 	bl	80153ec <iprintf>

  if (pcb->unacked == NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d102      	bne.n	800fb2e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fb28:	f06f 0305 	mvn.w	r3, #5
 800fb2c:	e04c      	b.n	800fbc8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb32:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fb34:	68b8      	ldr	r0, [r7, #8]
 800fb36:	f7ff fe2b 	bl	800f790 <tcp_output_segment_busy>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fb40:	f06f 0305 	mvn.w	r3, #5
 800fb44:	e040      	b.n	800fbc8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	336c      	adds	r3, #108	; 0x6c
 800fb52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fb54:	e002      	b.n	800fb5c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d011      	beq.n	800fb88 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7f9 fc78 	bl	8009462 <lwip_htonl>
 800fb72:	4604      	mov	r4, r0
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7f9 fc71 	bl	8009462 <lwip_htonl>
 800fb80:	4603      	mov	r3, r0
 800fb82:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dbe6      	blt.n	800fb56 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d103      	bne.n	800fba6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbac:	2bff      	cmp	r3, #255	; 0xff
 800fbae:	d007      	beq.n	800fbc0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3714      	adds	r7, #20
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd90      	pop	{r4, r7, pc}
 800fbd0:	08017a20 	.word	0x08017a20
 800fbd4:	080180c0 	.word	0x080180c0
 800fbd8:	08017a74 	.word	0x08017a74

0800fbdc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d106      	bne.n	800fbf8 <tcp_rexmit_fast+0x1c>
 800fbea:	4b2f      	ldr	r3, [pc, #188]	; (800fca8 <tcp_rexmit_fast+0xcc>)
 800fbec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fbf0:	492e      	ldr	r1, [pc, #184]	; (800fcac <tcp_rexmit_fast+0xd0>)
 800fbf2:	482f      	ldr	r0, [pc, #188]	; (800fcb0 <tcp_rexmit_fast+0xd4>)
 800fbf4:	f005 fbfa 	bl	80153ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d04f      	beq.n	800fca0 <tcp_rexmit_fast+0xc4>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	8b5b      	ldrh	r3, [r3, #26]
 800fc04:	f003 0304 	and.w	r3, r3, #4
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d149      	bne.n	800fca0 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff ff79 	bl	800fb04 <tcp_rexmit>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d143      	bne.n	800fca0 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d208      	bcs.n	800fc3a <tcp_rexmit_fast+0x5e>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	da00      	bge.n	800fc34 <tcp_rexmit_fast+0x58>
 800fc32:	3301      	adds	r3, #1
 800fc34:	105b      	asrs	r3, r3, #1
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	e007      	b.n	800fc4a <tcp_rexmit_fast+0x6e>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	da00      	bge.n	800fc46 <tcp_rexmit_fast+0x6a>
 800fc44:	3301      	adds	r3, #1
 800fc46:	105b      	asrs	r3, r3, #1
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fc56:	461a      	mov	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d206      	bcs.n	800fc70 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc66:	005b      	lsls	r3, r3, #1
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	0049      	lsls	r1, r1, #1
 800fc7e:	440b      	add	r3, r1
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	4413      	add	r3, r2
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	8b5b      	ldrh	r3, [r3, #26]
 800fc90:	f043 0304 	orr.w	r3, r3, #4
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	08017a20 	.word	0x08017a20
 800fcac:	080180d8 	.word	0x080180d8
 800fcb0:	08017a74 	.word	0x08017a74

0800fcb4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b086      	sub	sp, #24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	607b      	str	r3, [r7, #4]
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	817b      	strh	r3, [r7, #10]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fcc6:	897a      	ldrh	r2, [r7, #10]
 800fcc8:	893b      	ldrh	r3, [r7, #8]
 800fcca:	4413      	add	r3, r2
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	3314      	adds	r3, #20
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	2022      	movs	r0, #34	; 0x22
 800fcda:	f7fa fc03 	bl	800a4e4 <pbuf_alloc>
 800fcde:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d04e      	beq.n	800fd84 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	895b      	ldrh	r3, [r3, #10]
 800fcea:	461a      	mov	r2, r3
 800fcec:	897b      	ldrh	r3, [r7, #10]
 800fcee:	3314      	adds	r3, #20
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	da06      	bge.n	800fd02 <tcp_output_alloc_header_common+0x4e>
 800fcf4:	4b26      	ldr	r3, [pc, #152]	; (800fd90 <tcp_output_alloc_header_common+0xdc>)
 800fcf6:	f240 7224 	movw	r2, #1828	; 0x724
 800fcfa:	4926      	ldr	r1, [pc, #152]	; (800fd94 <tcp_output_alloc_header_common+0xe0>)
 800fcfc:	4826      	ldr	r0, [pc, #152]	; (800fd98 <tcp_output_alloc_header_common+0xe4>)
 800fcfe:	f005 fb75 	bl	80153ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fd08:	8c3b      	ldrh	r3, [r7, #32]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f9 fb94 	bl	8009438 <lwip_htons>
 800fd10:	4603      	mov	r3, r0
 800fd12:	461a      	mov	r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fd18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7f9 fb8c 	bl	8009438 <lwip_htons>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f7f9 fb97 	bl	8009462 <lwip_htonl>
 800fd34:	4602      	mov	r2, r0
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fd3a:	897b      	ldrh	r3, [r7, #10]
 800fd3c:	089b      	lsrs	r3, r3, #2
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	3305      	adds	r3, #5
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	031b      	lsls	r3, r3, #12
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7f9 fb70 	bl	8009438 <lwip_htons>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fd60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7f9 fb68 	bl	8009438 <lwip_htons>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	2200      	movs	r2, #0
 800fd74:	741a      	strb	r2, [r3, #16]
 800fd76:	2200      	movs	r2, #0
 800fd78:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	749a      	strb	r2, [r3, #18]
 800fd80:	2200      	movs	r2, #0
 800fd82:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fd84:	697b      	ldr	r3, [r7, #20]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3718      	adds	r7, #24
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	08017a20 	.word	0x08017a20
 800fd94:	080180f8 	.word	0x080180f8
 800fd98:	08017a74 	.word	0x08017a74

0800fd9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fd9c:	b5b0      	push	{r4, r5, r7, lr}
 800fd9e:	b08a      	sub	sp, #40	; 0x28
 800fda0:	af04      	add	r7, sp, #16
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	607b      	str	r3, [r7, #4]
 800fda6:	460b      	mov	r3, r1
 800fda8:	817b      	strh	r3, [r7, #10]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d106      	bne.n	800fdc2 <tcp_output_alloc_header+0x26>
 800fdb4:	4b15      	ldr	r3, [pc, #84]	; (800fe0c <tcp_output_alloc_header+0x70>)
 800fdb6:	f240 7242 	movw	r2, #1858	; 0x742
 800fdba:	4915      	ldr	r1, [pc, #84]	; (800fe10 <tcp_output_alloc_header+0x74>)
 800fdbc:	4815      	ldr	r0, [pc, #84]	; (800fe14 <tcp_output_alloc_header+0x78>)
 800fdbe:	f005 fb15 	bl	80153ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	8adb      	ldrh	r3, [r3, #22]
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	8b12      	ldrh	r2, [r2, #24]
 800fdce:	68f9      	ldr	r1, [r7, #12]
 800fdd0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fdd2:	893d      	ldrh	r5, [r7, #8]
 800fdd4:	897c      	ldrh	r4, [r7, #10]
 800fdd6:	9103      	str	r1, [sp, #12]
 800fdd8:	2110      	movs	r1, #16
 800fdda:	9102      	str	r1, [sp, #8]
 800fddc:	9201      	str	r2, [sp, #4]
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	462a      	mov	r2, r5
 800fde4:	4621      	mov	r1, r4
 800fde6:	f7ff ff65 	bl	800fcb4 <tcp_output_alloc_header_common>
 800fdea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d006      	beq.n	800fe00 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fdfa:	441a      	add	r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fe00:	697b      	ldr	r3, [r7, #20]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bdb0      	pop	{r4, r5, r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	08017a20 	.word	0x08017a20
 800fe10:	08018128 	.word	0x08018128
 800fe14:	08017a74 	.word	0x08017a74

0800fe18 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b088      	sub	sp, #32
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	4611      	mov	r1, r2
 800fe24:	461a      	mov	r2, r3
 800fe26:	460b      	mov	r3, r1
 800fe28:	71fb      	strb	r3, [r7, #7]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d106      	bne.n	800fe46 <tcp_output_fill_options+0x2e>
 800fe38:	4b13      	ldr	r3, [pc, #76]	; (800fe88 <tcp_output_fill_options+0x70>)
 800fe3a:	f240 7256 	movw	r2, #1878	; 0x756
 800fe3e:	4913      	ldr	r1, [pc, #76]	; (800fe8c <tcp_output_fill_options+0x74>)
 800fe40:	4813      	ldr	r0, [pc, #76]	; (800fe90 <tcp_output_fill_options+0x78>)
 800fe42:	f005 fad3 	bl	80153ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	3314      	adds	r3, #20
 800fe50:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	f103 0214 	add.w	r2, r3, #20
 800fe58:	8bfb      	ldrh	r3, [r7, #30]
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	f003 0304 	and.w	r3, r3, #4
 800fe66:	440b      	add	r3, r1
 800fe68:	4413      	add	r3, r2
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d006      	beq.n	800fe7e <tcp_output_fill_options+0x66>
 800fe70:	4b05      	ldr	r3, [pc, #20]	; (800fe88 <tcp_output_fill_options+0x70>)
 800fe72:	f240 7275 	movw	r2, #1909	; 0x775
 800fe76:	4907      	ldr	r1, [pc, #28]	; (800fe94 <tcp_output_fill_options+0x7c>)
 800fe78:	4805      	ldr	r0, [pc, #20]	; (800fe90 <tcp_output_fill_options+0x78>)
 800fe7a:	f005 fab7 	bl	80153ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fe7e:	bf00      	nop
 800fe80:	3720      	adds	r7, #32
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	08017a20 	.word	0x08017a20
 800fe8c:	08018150 	.word	0x08018150
 800fe90:	08017a74 	.word	0x08017a74
 800fe94:	08018048 	.word	0x08018048

0800fe98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b08a      	sub	sp, #40	; 0x28
 800fe9c:	af04      	add	r7, sp, #16
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <tcp_output_control_segment+0x22>
 800feac:	4b1c      	ldr	r3, [pc, #112]	; (800ff20 <tcp_output_control_segment+0x88>)
 800feae:	f240 7287 	movw	r2, #1927	; 0x787
 800feb2:	491c      	ldr	r1, [pc, #112]	; (800ff24 <tcp_output_control_segment+0x8c>)
 800feb4:	481c      	ldr	r0, [pc, #112]	; (800ff28 <tcp_output_control_segment+0x90>)
 800feb6:	f005 fa99 	bl	80153ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f7fe ff2e 	bl	800ed20 <tcp_route>
 800fec4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d102      	bne.n	800fed2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fecc:	23fc      	movs	r3, #252	; 0xfc
 800fece:	75fb      	strb	r3, [r7, #23]
 800fed0:	e01c      	b.n	800ff0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d006      	beq.n	800fee6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	7adb      	ldrb	r3, [r3, #11]
 800fedc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	7a9b      	ldrb	r3, [r3, #10]
 800fee2:	757b      	strb	r3, [r7, #21]
 800fee4:	e003      	b.n	800feee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fee6:	23ff      	movs	r3, #255	; 0xff
 800fee8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800feea:	2300      	movs	r3, #0
 800feec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800feee:	7dba      	ldrb	r2, [r7, #22]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	9302      	str	r3, [sp, #8]
 800fef4:	2306      	movs	r3, #6
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	7d7b      	ldrb	r3, [r7, #21]
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	4613      	mov	r3, r2
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	68b8      	ldr	r0, [r7, #8]
 800ff04:	f004 f916 	bl	8014134 <ip4_output_if>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ff0c:	68b8      	ldr	r0, [r7, #8]
 800ff0e:	f7fa fdc9 	bl	800aaa4 <pbuf_free>
  return err;
 800ff12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	08017a20 	.word	0x08017a20
 800ff24:	08018178 	.word	0x08018178
 800ff28:	08017a74 	.word	0x08017a74

0800ff2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ff2c:	b590      	push	{r4, r7, lr}
 800ff2e:	b08b      	sub	sp, #44	; 0x2c
 800ff30:	af04      	add	r7, sp, #16
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
 800ff38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <tcp_rst+0x22>
 800ff40:	4b1f      	ldr	r3, [pc, #124]	; (800ffc0 <tcp_rst+0x94>)
 800ff42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ff46:	491f      	ldr	r1, [pc, #124]	; (800ffc4 <tcp_rst+0x98>)
 800ff48:	481f      	ldr	r0, [pc, #124]	; (800ffc8 <tcp_rst+0x9c>)
 800ff4a:	f005 fa4f 	bl	80153ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d106      	bne.n	800ff62 <tcp_rst+0x36>
 800ff54:	4b1a      	ldr	r3, [pc, #104]	; (800ffc0 <tcp_rst+0x94>)
 800ff56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ff5a:	491c      	ldr	r1, [pc, #112]	; (800ffcc <tcp_rst+0xa0>)
 800ff5c:	481a      	ldr	r0, [pc, #104]	; (800ffc8 <tcp_rst+0x9c>)
 800ff5e:	f005 fa45 	bl	80153ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff62:	2300      	movs	r3, #0
 800ff64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ff66:	f246 0308 	movw	r3, #24584	; 0x6008
 800ff6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ff6c:	7dfb      	ldrb	r3, [r7, #23]
 800ff6e:	b29c      	uxth	r4, r3
 800ff70:	68b8      	ldr	r0, [r7, #8]
 800ff72:	f7f9 fa76 	bl	8009462 <lwip_htonl>
 800ff76:	4602      	mov	r2, r0
 800ff78:	8abb      	ldrh	r3, [r7, #20]
 800ff7a:	9303      	str	r3, [sp, #12]
 800ff7c:	2314      	movs	r3, #20
 800ff7e:	9302      	str	r3, [sp, #8]
 800ff80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff82:	9301      	str	r3, [sp, #4]
 800ff84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff fe90 	bl	800fcb4 <tcp_output_alloc_header_common>
 800ff94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00c      	beq.n	800ffb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	6939      	ldr	r1, [r7, #16]
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f7ff ff38 	bl	800fe18 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ffa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	6939      	ldr	r1, [r7, #16]
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f7ff ff72 	bl	800fe98 <tcp_output_control_segment>
 800ffb4:	e000      	b.n	800ffb8 <tcp_rst+0x8c>
    return;
 800ffb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ffb8:	371c      	adds	r7, #28
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd90      	pop	{r4, r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	08017a20 	.word	0x08017a20
 800ffc4:	080181a4 	.word	0x080181a4
 800ffc8:	08017a74 	.word	0x08017a74
 800ffcc:	080181c0 	.word	0x080181c0

0800ffd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ffd0:	b590      	push	{r4, r7, lr}
 800ffd2:	b087      	sub	sp, #28
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <tcp_send_empty_ack+0x24>
 800ffe6:	4b28      	ldr	r3, [pc, #160]	; (8010088 <tcp_send_empty_ack+0xb8>)
 800ffe8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ffec:	4927      	ldr	r1, [pc, #156]	; (801008c <tcp_send_empty_ack+0xbc>)
 800ffee:	4828      	ldr	r0, [pc, #160]	; (8010090 <tcp_send_empty_ack+0xc0>)
 800fff0:	f005 f9fc 	bl	80153ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	f003 0304 	and.w	r3, r3, #4
 800fffe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010000:	7d7b      	ldrb	r3, [r7, #21]
 8010002:	b29c      	uxth	r4, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010008:	4618      	mov	r0, r3
 801000a:	f7f9 fa2a 	bl	8009462 <lwip_htonl>
 801000e:	4603      	mov	r3, r0
 8010010:	2200      	movs	r2, #0
 8010012:	4621      	mov	r1, r4
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7ff fec1 	bl	800fd9c <tcp_output_alloc_header>
 801001a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d109      	bne.n	8010036 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	8b5b      	ldrh	r3, [r3, #26]
 8010026:	f043 0303 	orr.w	r3, r3, #3
 801002a:	b29a      	uxth	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010030:	f06f 0301 	mvn.w	r3, #1
 8010034:	e023      	b.n	801007e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010036:	7dbb      	ldrb	r3, [r7, #22]
 8010038:	7dfa      	ldrb	r2, [r7, #23]
 801003a:	6939      	ldr	r1, [r7, #16]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7ff feeb 	bl	800fe18 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	3304      	adds	r3, #4
 8010048:	6939      	ldr	r1, [r7, #16]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7ff ff24 	bl	800fe98 <tcp_output_control_segment>
 8010050:	4603      	mov	r3, r0
 8010052:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d007      	beq.n	801006c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	8b5b      	ldrh	r3, [r3, #26]
 8010060:	f043 0303 	orr.w	r3, r3, #3
 8010064:	b29a      	uxth	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	835a      	strh	r2, [r3, #26]
 801006a:	e006      	b.n	801007a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	8b5b      	ldrh	r3, [r3, #26]
 8010070:	f023 0303 	bic.w	r3, r3, #3
 8010074:	b29a      	uxth	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801007a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801007e:	4618      	mov	r0, r3
 8010080:	371c      	adds	r7, #28
 8010082:	46bd      	mov	sp, r7
 8010084:	bd90      	pop	{r4, r7, pc}
 8010086:	bf00      	nop
 8010088:	08017a20 	.word	0x08017a20
 801008c:	080181dc 	.word	0x080181dc
 8010090:	08017a74 	.word	0x08017a74

08010094 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010094:	b590      	push	{r4, r7, lr}
 8010096:	b087      	sub	sp, #28
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801009c:	2300      	movs	r3, #0
 801009e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d106      	bne.n	80100b4 <tcp_keepalive+0x20>
 80100a6:	4b18      	ldr	r3, [pc, #96]	; (8010108 <tcp_keepalive+0x74>)
 80100a8:	f640 0224 	movw	r2, #2084	; 0x824
 80100ac:	4917      	ldr	r1, [pc, #92]	; (801010c <tcp_keepalive+0x78>)
 80100ae:	4818      	ldr	r0, [pc, #96]	; (8010110 <tcp_keepalive+0x7c>)
 80100b0:	f005 f99c 	bl	80153ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80100b4:	7dfb      	ldrb	r3, [r7, #23]
 80100b6:	b29c      	uxth	r4, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100bc:	3b01      	subs	r3, #1
 80100be:	4618      	mov	r0, r3
 80100c0:	f7f9 f9cf 	bl	8009462 <lwip_htonl>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2200      	movs	r2, #0
 80100c8:	4621      	mov	r1, r4
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7ff fe66 	bl	800fd9c <tcp_output_alloc_header>
 80100d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d102      	bne.n	80100de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80100d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100dc:	e010      	b.n	8010100 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80100de:	7dfb      	ldrb	r3, [r7, #23]
 80100e0:	2200      	movs	r2, #0
 80100e2:	6939      	ldr	r1, [r7, #16]
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff fe97 	bl	800fe18 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	3304      	adds	r3, #4
 80100f0:	6939      	ldr	r1, [r7, #16]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f7ff fed0 	bl	800fe98 <tcp_output_control_segment>
 80100f8:	4603      	mov	r3, r0
 80100fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80100fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010100:	4618      	mov	r0, r3
 8010102:	371c      	adds	r7, #28
 8010104:	46bd      	mov	sp, r7
 8010106:	bd90      	pop	{r4, r7, pc}
 8010108:	08017a20 	.word	0x08017a20
 801010c:	080181fc 	.word	0x080181fc
 8010110:	08017a74 	.word	0x08017a74

08010114 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010114:	b590      	push	{r4, r7, lr}
 8010116:	b08b      	sub	sp, #44	; 0x2c
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801011c:	2300      	movs	r3, #0
 801011e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d106      	bne.n	8010136 <tcp_zero_window_probe+0x22>
 8010128:	4b4c      	ldr	r3, [pc, #304]	; (801025c <tcp_zero_window_probe+0x148>)
 801012a:	f640 024f 	movw	r2, #2127	; 0x84f
 801012e:	494c      	ldr	r1, [pc, #304]	; (8010260 <tcp_zero_window_probe+0x14c>)
 8010130:	484c      	ldr	r0, [pc, #304]	; (8010264 <tcp_zero_window_probe+0x150>)
 8010132:	f005 f95b 	bl	80153ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d101      	bne.n	8010146 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010142:	2300      	movs	r3, #0
 8010144:	e086      	b.n	8010254 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801014c:	2bff      	cmp	r3, #255	; 0xff
 801014e:	d007      	beq.n	8010160 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010156:	3301      	adds	r3, #1
 8010158:	b2da      	uxtb	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	b29b      	uxth	r3, r3
 8010168:	4618      	mov	r0, r3
 801016a:	f7f9 f965 	bl	8009438 <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	f003 0301 	and.w	r3, r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	d005      	beq.n	8010186 <tcp_zero_window_probe+0x72>
 801017a:	6a3b      	ldr	r3, [r7, #32]
 801017c:	891b      	ldrh	r3, [r3, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <tcp_zero_window_probe+0x72>
 8010182:	2301      	movs	r3, #1
 8010184:	e000      	b.n	8010188 <tcp_zero_window_probe+0x74>
 8010186:	2300      	movs	r3, #0
 8010188:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801018a:	7ffb      	ldrb	r3, [r7, #31]
 801018c:	2b00      	cmp	r3, #0
 801018e:	bf0c      	ite	eq
 8010190:	2301      	moveq	r3, #1
 8010192:	2300      	movne	r3, #0
 8010194:	b2db      	uxtb	r3, r3
 8010196:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801019c:	b299      	uxth	r1, r3
 801019e:	6a3b      	ldr	r3, [r7, #32]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	8bba      	ldrh	r2, [r7, #28]
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff fdf8 	bl	800fd9c <tcp_output_alloc_header>
 80101ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80101b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101b8:	e04c      	b.n	8010254 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80101c0:	7ffb      	ldrb	r3, [r7, #31]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d011      	beq.n	80101ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	899b      	ldrh	r3, [r3, #12]
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	b21b      	sxth	r3, r3
 80101ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80101d2:	b21c      	sxth	r4, r3
 80101d4:	2011      	movs	r0, #17
 80101d6:	f7f9 f92f 	bl	8009438 <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	b21b      	sxth	r3, r3
 80101de:	4323      	orrs	r3, r4
 80101e0:	b21b      	sxth	r3, r3
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	819a      	strh	r2, [r3, #12]
 80101e8:	e010      	b.n	801020c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	3314      	adds	r3, #20
 80101f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80101f2:	6a3b      	ldr	r3, [r7, #32]
 80101f4:	6858      	ldr	r0, [r3, #4]
 80101f6:	6a3b      	ldr	r3, [r7, #32]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	891a      	ldrh	r2, [r3, #8]
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	891b      	ldrh	r3, [r3, #8]
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	b29b      	uxth	r3, r3
 8010204:	2201      	movs	r2, #1
 8010206:	6939      	ldr	r1, [r7, #16]
 8010208:	f7fa fe52 	bl	800aeb0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	4618      	mov	r0, r3
 8010214:	f7f9 f925 	bl	8009462 <lwip_htonl>
 8010218:	4603      	mov	r3, r0
 801021a:	3301      	adds	r3, #1
 801021c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	1ad3      	subs	r3, r2, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	da02      	bge.n	8010230 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010234:	2200      	movs	r2, #0
 8010236:	69b9      	ldr	r1, [r7, #24]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff fded 	bl	800fe18 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3304      	adds	r3, #4
 8010244:	69b9      	ldr	r1, [r7, #24]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7ff fe26 	bl	800fe98 <tcp_output_control_segment>
 801024c:	4603      	mov	r3, r0
 801024e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010250:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010254:	4618      	mov	r0, r3
 8010256:	372c      	adds	r7, #44	; 0x2c
 8010258:	46bd      	mov	sp, r7
 801025a:	bd90      	pop	{r4, r7, pc}
 801025c:	08017a20 	.word	0x08017a20
 8010260:	08018218 	.word	0x08018218
 8010264:	08017a74 	.word	0x08017a74

08010268 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010270:	f7fa ff0c 	bl	800b08c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010274:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <tcpip_tcp_timer+0x38>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d103      	bne.n	8010284 <tcpip_tcp_timer+0x1c>
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <tcpip_tcp_timer+0x3c>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010284:	2200      	movs	r2, #0
 8010286:	4908      	ldr	r1, [pc, #32]	; (80102a8 <tcpip_tcp_timer+0x40>)
 8010288:	20fa      	movs	r0, #250	; 0xfa
 801028a:	f000 f8f1 	bl	8010470 <sys_timeout>
 801028e:	e002      	b.n	8010296 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010290:	4b06      	ldr	r3, [pc, #24]	; (80102ac <tcpip_tcp_timer+0x44>)
 8010292:	2200      	movs	r2, #0
 8010294:	601a      	str	r2, [r3, #0]
  }
}
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	2000b8c0 	.word	0x2000b8c0
 80102a4:	2000b8d0 	.word	0x2000b8d0
 80102a8:	08010269 	.word	0x08010269
 80102ac:	20004a40 	.word	0x20004a40

080102b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <tcp_timer_needed+0x30>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10f      	bne.n	80102dc <tcp_timer_needed+0x2c>
 80102bc:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <tcp_timer_needed+0x34>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d103      	bne.n	80102cc <tcp_timer_needed+0x1c>
 80102c4:	4b08      	ldr	r3, [pc, #32]	; (80102e8 <tcp_timer_needed+0x38>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d007      	beq.n	80102dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80102cc:	4b04      	ldr	r3, [pc, #16]	; (80102e0 <tcp_timer_needed+0x30>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80102d2:	2200      	movs	r2, #0
 80102d4:	4905      	ldr	r1, [pc, #20]	; (80102ec <tcp_timer_needed+0x3c>)
 80102d6:	20fa      	movs	r0, #250	; 0xfa
 80102d8:	f000 f8ca 	bl	8010470 <sys_timeout>
  }
}
 80102dc:	bf00      	nop
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20004a40 	.word	0x20004a40
 80102e4:	2000b8c0 	.word	0x2000b8c0
 80102e8:	2000b8d0 	.word	0x2000b8d0
 80102ec:	08010269 	.word	0x08010269

080102f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b086      	sub	sp, #24
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80102fc:	200a      	movs	r0, #10
 80102fe:	f7f9 fd51 	bl	8009da4 <memp_malloc>
 8010302:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d109      	bne.n	801031e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d151      	bne.n	80103b4 <sys_timeout_abs+0xc4>
 8010310:	4b2a      	ldr	r3, [pc, #168]	; (80103bc <sys_timeout_abs+0xcc>)
 8010312:	22be      	movs	r2, #190	; 0xbe
 8010314:	492a      	ldr	r1, [pc, #168]	; (80103c0 <sys_timeout_abs+0xd0>)
 8010316:	482b      	ldr	r0, [pc, #172]	; (80103c4 <sys_timeout_abs+0xd4>)
 8010318:	f005 f868 	bl	80153ec <iprintf>
    return;
 801031c:	e04a      	b.n	80103b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	2200      	movs	r2, #0
 8010322:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010336:	4b24      	ldr	r3, [pc, #144]	; (80103c8 <sys_timeout_abs+0xd8>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d103      	bne.n	8010346 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801033e:	4a22      	ldr	r2, [pc, #136]	; (80103c8 <sys_timeout_abs+0xd8>)
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	6013      	str	r3, [r2, #0]
    return;
 8010344:	e037      	b.n	80103b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	4b1f      	ldr	r3, [pc, #124]	; (80103c8 <sys_timeout_abs+0xd8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	0fdb      	lsrs	r3, r3, #31
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d007      	beq.n	801036e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801035e:	4b1a      	ldr	r3, [pc, #104]	; (80103c8 <sys_timeout_abs+0xd8>)
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010366:	4a18      	ldr	r2, [pc, #96]	; (80103c8 <sys_timeout_abs+0xd8>)
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	6013      	str	r3, [r2, #0]
 801036c:	e023      	b.n	80103b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801036e:	4b16      	ldr	r3, [pc, #88]	; (80103c8 <sys_timeout_abs+0xd8>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	617b      	str	r3, [r7, #20]
 8010374:	e01a      	b.n	80103ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00b      	beq.n	8010396 <sys_timeout_abs+0xa6>
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	0fdb      	lsrs	r3, r3, #31
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d007      	beq.n	80103a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	693a      	ldr	r2, [r7, #16]
 80103a2:	601a      	str	r2, [r3, #0]
        break;
 80103a4:	e007      	b.n	80103b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	617b      	str	r3, [r7, #20]
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e1      	bne.n	8010376 <sys_timeout_abs+0x86>
 80103b2:	e000      	b.n	80103b6 <sys_timeout_abs+0xc6>
    return;
 80103b4:	bf00      	nop
      }
    }
  }
}
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0801823c 	.word	0x0801823c
 80103c0:	08018270 	.word	0x08018270
 80103c4:	080182b0 	.word	0x080182b0
 80103c8:	20004a38 	.word	0x20004a38

080103cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b086      	sub	sp, #24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	4798      	blx	r3

  now = sys_now();
 80103de:	f7f4 ffad 	bl	800533c <sys_now>
 80103e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	4b0f      	ldr	r3, [pc, #60]	; (8010428 <lwip_cyclic_timer+0x5c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4413      	add	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	0fdb      	lsrs	r3, r3, #31
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d009      	beq.n	8010416 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	4413      	add	r3, r2
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	4907      	ldr	r1, [pc, #28]	; (801042c <lwip_cyclic_timer+0x60>)
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff ff6e 	bl	80102f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010414:	e004      	b.n	8010420 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	4904      	ldr	r1, [pc, #16]	; (801042c <lwip_cyclic_timer+0x60>)
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f7ff ff68 	bl	80102f0 <sys_timeout_abs>
}
 8010420:	bf00      	nop
 8010422:	3718      	adds	r7, #24
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	20004a3c 	.word	0x20004a3c
 801042c:	080103cd 	.word	0x080103cd

08010430 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010436:	2301      	movs	r3, #1
 8010438:	607b      	str	r3, [r7, #4]
 801043a:	e00e      	b.n	801045a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801043c:	4a0a      	ldr	r2, [pc, #40]	; (8010468 <sys_timeouts_init+0x38>)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	4a07      	ldr	r2, [pc, #28]	; (8010468 <sys_timeouts_init+0x38>)
 801044a:	4413      	add	r3, r2
 801044c:	461a      	mov	r2, r3
 801044e:	4907      	ldr	r1, [pc, #28]	; (801046c <sys_timeouts_init+0x3c>)
 8010450:	f000 f80e 	bl	8010470 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	3301      	adds	r3, #1
 8010458:	607b      	str	r3, [r7, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b04      	cmp	r3, #4
 801045e:	d9ed      	bls.n	801043c <sys_timeouts_init+0xc>
  }
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	08019220 	.word	0x08019220
 801046c:	080103cd 	.word	0x080103cd

08010470 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010482:	d306      	bcc.n	8010492 <sys_timeout+0x22>
 8010484:	4b0a      	ldr	r3, [pc, #40]	; (80104b0 <sys_timeout+0x40>)
 8010486:	f240 1229 	movw	r2, #297	; 0x129
 801048a:	490a      	ldr	r1, [pc, #40]	; (80104b4 <sys_timeout+0x44>)
 801048c:	480a      	ldr	r0, [pc, #40]	; (80104b8 <sys_timeout+0x48>)
 801048e:	f004 ffad 	bl	80153ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010492:	f7f4 ff53 	bl	800533c <sys_now>
 8010496:	4602      	mov	r2, r0
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	4413      	add	r3, r2
 801049c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	68b9      	ldr	r1, [r7, #8]
 80104a2:	6978      	ldr	r0, [r7, #20]
 80104a4:	f7ff ff24 	bl	80102f0 <sys_timeout_abs>
#endif
}
 80104a8:	bf00      	nop
 80104aa:	3718      	adds	r7, #24
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	0801823c 	.word	0x0801823c
 80104b4:	080182d8 	.word	0x080182d8
 80104b8:	080182b0 	.word	0x080182b0

080104bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80104c2:	f7f4 ff3b 	bl	800533c <sys_now>
 80104c6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80104c8:	4b17      	ldr	r3, [pc, #92]	; (8010528 <sys_check_timeouts+0x6c>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d022      	beq.n	801051a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	0fdb      	lsrs	r3, r3, #31
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d11a      	bne.n	801051e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a0e      	ldr	r2, [pc, #56]	; (8010528 <sys_check_timeouts+0x6c>)
 80104ee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	4a0a      	ldr	r2, [pc, #40]	; (801052c <sys_check_timeouts+0x70>)
 8010502:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	200a      	movs	r0, #10
 8010508:	f7f9 fc9e 	bl	8009e48 <memp_free>
    if (handler != NULL) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0da      	beq.n	80104c8 <sys_check_timeouts+0xc>
      handler(arg);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6838      	ldr	r0, [r7, #0]
 8010516:	4798      	blx	r3
  do {
 8010518:	e7d6      	b.n	80104c8 <sys_check_timeouts+0xc>
      return;
 801051a:	bf00      	nop
 801051c:	e000      	b.n	8010520 <sys_check_timeouts+0x64>
      return;
 801051e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	20004a38 	.word	0x20004a38
 801052c:	20004a3c 	.word	0x20004a3c

08010530 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010536:	4b16      	ldr	r3, [pc, #88]	; (8010590 <sys_timeouts_sleeptime+0x60>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d102      	bne.n	8010544 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801053e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010542:	e020      	b.n	8010586 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010544:	f7f4 fefa 	bl	800533c <sys_now>
 8010548:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801054a:	4b11      	ldr	r3, [pc, #68]	; (8010590 <sys_timeouts_sleeptime+0x60>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	685a      	ldr	r2, [r3, #4]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	0fdb      	lsrs	r3, r3, #31
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <sys_timeouts_sleeptime+0x34>
    return 0;
 8010560:	2300      	movs	r3, #0
 8010562:	e010      	b.n	8010586 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010564:	4b0a      	ldr	r3, [pc, #40]	; (8010590 <sys_timeouts_sleeptime+0x60>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	685a      	ldr	r2, [r3, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	da06      	bge.n	8010584 <sys_timeouts_sleeptime+0x54>
 8010576:	4b07      	ldr	r3, [pc, #28]	; (8010594 <sys_timeouts_sleeptime+0x64>)
 8010578:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801057c:	4906      	ldr	r1, [pc, #24]	; (8010598 <sys_timeouts_sleeptime+0x68>)
 801057e:	4807      	ldr	r0, [pc, #28]	; (801059c <sys_timeouts_sleeptime+0x6c>)
 8010580:	f004 ff34 	bl	80153ec <iprintf>
    return ret;
 8010584:	683b      	ldr	r3, [r7, #0]
  }
}
 8010586:	4618      	mov	r0, r3
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	20004a38 	.word	0x20004a38
 8010594:	0801823c 	.word	0x0801823c
 8010598:	08018310 	.word	0x08018310
 801059c:	080182b0 	.word	0x080182b0

080105a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80105a4:	f004 ff3a 	bl	801541c <rand>
 80105a8:	4603      	mov	r3, r0
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	4b01      	ldr	r3, [pc, #4]	; (80105c0 <udp_init+0x20>)
 80105ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80105bc:	bf00      	nop
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	20000018 	.word	0x20000018

080105c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80105ce:	4b17      	ldr	r3, [pc, #92]	; (801062c <udp_new_port+0x68>)
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	b291      	uxth	r1, r2
 80105d6:	4a15      	ldr	r2, [pc, #84]	; (801062c <udp_new_port+0x68>)
 80105d8:	8011      	strh	r1, [r2, #0]
 80105da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105de:	4293      	cmp	r3, r2
 80105e0:	d103      	bne.n	80105ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80105e2:	4b12      	ldr	r3, [pc, #72]	; (801062c <udp_new_port+0x68>)
 80105e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80105e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80105ea:	4b11      	ldr	r3, [pc, #68]	; (8010630 <udp_new_port+0x6c>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	e011      	b.n	8010616 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	8a5a      	ldrh	r2, [r3, #18]
 80105f6:	4b0d      	ldr	r3, [pc, #52]	; (801062c <udp_new_port+0x68>)
 80105f8:	881b      	ldrh	r3, [r3, #0]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d108      	bne.n	8010610 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80105fe:	88fb      	ldrh	r3, [r7, #6]
 8010600:	3301      	adds	r3, #1
 8010602:	80fb      	strh	r3, [r7, #6]
 8010604:	88fb      	ldrh	r3, [r7, #6]
 8010606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801060a:	d3e0      	bcc.n	80105ce <udp_new_port+0xa>
        return 0;
 801060c:	2300      	movs	r3, #0
 801060e:	e007      	b.n	8010620 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	603b      	str	r3, [r7, #0]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1ea      	bne.n	80105f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801061c:	4b03      	ldr	r3, [pc, #12]	; (801062c <udp_new_port+0x68>)
 801061e:	881b      	ldrh	r3, [r3, #0]
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	20000018 	.word	0x20000018
 8010630:	2000b8d8 	.word	0x2000b8d8

08010634 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	4613      	mov	r3, r2
 8010640:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d105      	bne.n	8010654 <udp_input_local_match+0x20>
 8010648:	4b27      	ldr	r3, [pc, #156]	; (80106e8 <udp_input_local_match+0xb4>)
 801064a:	2287      	movs	r2, #135	; 0x87
 801064c:	4927      	ldr	r1, [pc, #156]	; (80106ec <udp_input_local_match+0xb8>)
 801064e:	4828      	ldr	r0, [pc, #160]	; (80106f0 <udp_input_local_match+0xbc>)
 8010650:	f004 fecc 	bl	80153ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d105      	bne.n	8010666 <udp_input_local_match+0x32>
 801065a:	4b23      	ldr	r3, [pc, #140]	; (80106e8 <udp_input_local_match+0xb4>)
 801065c:	2288      	movs	r2, #136	; 0x88
 801065e:	4925      	ldr	r1, [pc, #148]	; (80106f4 <udp_input_local_match+0xc0>)
 8010660:	4823      	ldr	r0, [pc, #140]	; (80106f0 <udp_input_local_match+0xbc>)
 8010662:	f004 fec3 	bl	80153ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	7a1b      	ldrb	r3, [r3, #8]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00b      	beq.n	8010686 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	7a1a      	ldrb	r2, [r3, #8]
 8010672:	4b21      	ldr	r3, [pc, #132]	; (80106f8 <udp_input_local_match+0xc4>)
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801067a:	3301      	adds	r3, #1
 801067c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801067e:	429a      	cmp	r2, r3
 8010680:	d001      	beq.n	8010686 <udp_input_local_match+0x52>
    return 0;
 8010682:	2300      	movs	r3, #0
 8010684:	e02b      	b.n	80106de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010686:	79fb      	ldrb	r3, [r7, #7]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d018      	beq.n	80106be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d013      	beq.n	80106ba <udp_input_local_match+0x86>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00f      	beq.n	80106ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801069a:	4b17      	ldr	r3, [pc, #92]	; (80106f8 <udp_input_local_match+0xc4>)
 801069c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801069e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106a2:	d00a      	beq.n	80106ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <udp_input_local_match+0xc4>)
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	405a      	eors	r2, r3
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	3308      	adds	r3, #8
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d110      	bne.n	80106dc <udp_input_local_match+0xa8>
          return 1;
 80106ba:	2301      	movs	r3, #1
 80106bc:	e00f      	b.n	80106de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d009      	beq.n	80106d8 <udp_input_local_match+0xa4>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d005      	beq.n	80106d8 <udp_input_local_match+0xa4>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	4b09      	ldr	r3, [pc, #36]	; (80106f8 <udp_input_local_match+0xc4>)
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d101      	bne.n	80106dc <udp_input_local_match+0xa8>
        return 1;
 80106d8:	2301      	movs	r3, #1
 80106da:	e000      	b.n	80106de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	08018324 	.word	0x08018324
 80106ec:	08018354 	.word	0x08018354
 80106f0:	08018378 	.word	0x08018378
 80106f4:	080183a0 	.word	0x080183a0
 80106f8:	2000818c 	.word	0x2000818c

080106fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80106fc:	b590      	push	{r4, r7, lr}
 80106fe:	b08d      	sub	sp, #52	; 0x34
 8010700:	af02      	add	r7, sp, #8
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d105      	bne.n	801071c <udp_input+0x20>
 8010710:	4b7c      	ldr	r3, [pc, #496]	; (8010904 <udp_input+0x208>)
 8010712:	22cf      	movs	r2, #207	; 0xcf
 8010714:	497c      	ldr	r1, [pc, #496]	; (8010908 <udp_input+0x20c>)
 8010716:	487d      	ldr	r0, [pc, #500]	; (801090c <udp_input+0x210>)
 8010718:	f004 fe68 	bl	80153ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d105      	bne.n	801072e <udp_input+0x32>
 8010722:	4b78      	ldr	r3, [pc, #480]	; (8010904 <udp_input+0x208>)
 8010724:	22d0      	movs	r2, #208	; 0xd0
 8010726:	497a      	ldr	r1, [pc, #488]	; (8010910 <udp_input+0x214>)
 8010728:	4878      	ldr	r0, [pc, #480]	; (801090c <udp_input+0x210>)
 801072a:	f004 fe5f 	bl	80153ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	895b      	ldrh	r3, [r3, #10]
 8010732:	2b07      	cmp	r3, #7
 8010734:	d803      	bhi.n	801073e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fa f9b4 	bl	800aaa4 <pbuf_free>
    goto end;
 801073c:	e0de      	b.n	80108fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010744:	4b73      	ldr	r3, [pc, #460]	; (8010914 <udp_input+0x218>)
 8010746:	695a      	ldr	r2, [r3, #20]
 8010748:	4b72      	ldr	r3, [pc, #456]	; (8010914 <udp_input+0x218>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4619      	mov	r1, r3
 801074e:	4610      	mov	r0, r2
 8010750:	f003 fdc8 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 8010754:	4603      	mov	r3, r0
 8010756:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	b29b      	uxth	r3, r3
 801075e:	4618      	mov	r0, r3
 8010760:	f7f8 fe6a 	bl	8009438 <lwip_htons>
 8010764:	4603      	mov	r3, r0
 8010766:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	885b      	ldrh	r3, [r3, #2]
 801076c:	b29b      	uxth	r3, r3
 801076e:	4618      	mov	r0, r3
 8010770:	f7f8 fe62 	bl	8009438 <lwip_htons>
 8010774:	4603      	mov	r3, r0
 8010776:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010778:	2300      	movs	r3, #0
 801077a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801077c:	2300      	movs	r3, #0
 801077e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010780:	2300      	movs	r3, #0
 8010782:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010784:	4b64      	ldr	r3, [pc, #400]	; (8010918 <udp_input+0x21c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
 801078a:	e054      	b.n	8010836 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	8a5b      	ldrh	r3, [r3, #18]
 8010790:	89fa      	ldrh	r2, [r7, #14]
 8010792:	429a      	cmp	r2, r3
 8010794:	d14a      	bne.n	801082c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010796:	7cfb      	ldrb	r3, [r7, #19]
 8010798:	461a      	mov	r2, r3
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801079e:	f7ff ff49 	bl	8010634 <udp_input_local_match>
 80107a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d041      	beq.n	801082c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	7c1b      	ldrb	r3, [r3, #16]
 80107ac:	f003 0304 	and.w	r3, r3, #4
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d11d      	bne.n	80107f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d102      	bne.n	80107c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107bc:	61fb      	str	r3, [r7, #28]
 80107be:	e017      	b.n	80107f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80107c0:	7cfb      	ldrb	r3, [r7, #19]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d014      	beq.n	80107f0 <udp_input+0xf4>
 80107c6:	4b53      	ldr	r3, [pc, #332]	; (8010914 <udp_input+0x218>)
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107ce:	d10f      	bne.n	80107f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	3304      	adds	r3, #4
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d008      	beq.n	80107f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	3304      	adds	r3, #4
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d101      	bne.n	80107f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	8a9b      	ldrh	r3, [r3, #20]
 80107f4:	8a3a      	ldrh	r2, [r7, #16]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d118      	bne.n	801082c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80107fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d005      	beq.n	801080e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	685a      	ldr	r2, [r3, #4]
 8010806:	4b43      	ldr	r3, [pc, #268]	; (8010914 <udp_input+0x218>)
 8010808:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801080a:	429a      	cmp	r2, r3
 801080c:	d10e      	bne.n	801082c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d014      	beq.n	801083e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801081c:	4b3e      	ldr	r3, [pc, #248]	; (8010918 <udp_input+0x21c>)
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010822:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010824:	4a3c      	ldr	r2, [pc, #240]	; (8010918 <udp_input+0x21c>)
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801082a:	e008      	b.n	801083e <udp_input+0x142>
      }
    }

    prev = pcb;
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1a7      	bne.n	801078c <udp_input+0x90>
 801083c:	e000      	b.n	8010840 <udp_input+0x144>
        break;
 801083e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <udp_input+0x15a>
    for_us = 1;
 8010850:	2301      	movs	r3, #1
 8010852:	76fb      	strb	r3, [r7, #27]
 8010854:	e00a      	b.n	801086c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	3304      	adds	r3, #4
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	4b2d      	ldr	r3, [pc, #180]	; (8010914 <udp_input+0x218>)
 801085e:	695b      	ldr	r3, [r3, #20]
 8010860:	429a      	cmp	r2, r3
 8010862:	bf0c      	ite	eq
 8010864:	2301      	moveq	r3, #1
 8010866:	2300      	movne	r3, #0
 8010868:	b2db      	uxtb	r3, r3
 801086a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801086c:	7efb      	ldrb	r3, [r7, #27]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d041      	beq.n	80108f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010872:	2108      	movs	r1, #8
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f7fa f88f 	bl	800a998 <pbuf_remove_header>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00a      	beq.n	8010896 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010880:	4b20      	ldr	r3, [pc, #128]	; (8010904 <udp_input+0x208>)
 8010882:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010886:	4925      	ldr	r1, [pc, #148]	; (801091c <udp_input+0x220>)
 8010888:	4820      	ldr	r0, [pc, #128]	; (801090c <udp_input+0x210>)
 801088a:	f004 fdaf 	bl	80153ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7fa f908 	bl	800aaa4 <pbuf_free>
      goto end;
 8010894:	e032      	b.n	80108fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	2b00      	cmp	r3, #0
 801089a:	d012      	beq.n	80108c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089e:	699b      	ldr	r3, [r3, #24]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00a      	beq.n	80108ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a6:	699c      	ldr	r4, [r3, #24]
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	69d8      	ldr	r0, [r3, #28]
 80108ac:	8a3b      	ldrh	r3, [r7, #16]
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	4b1b      	ldr	r3, [pc, #108]	; (8010920 <udp_input+0x224>)
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80108b8:	e021      	b.n	80108fe <udp_input+0x202>
        pbuf_free(p);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f7fa f8f2 	bl	800aaa4 <pbuf_free>
        goto end;
 80108c0:	e01c      	b.n	80108fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80108c2:	7cfb      	ldrb	r3, [r7, #19]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d112      	bne.n	80108ee <udp_input+0x1f2>
 80108c8:	4b12      	ldr	r3, [pc, #72]	; (8010914 <udp_input+0x218>)
 80108ca:	695b      	ldr	r3, [r3, #20]
 80108cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108d0:	2be0      	cmp	r3, #224	; 0xe0
 80108d2:	d00c      	beq.n	80108ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80108d4:	4b0f      	ldr	r3, [pc, #60]	; (8010914 <udp_input+0x218>)
 80108d6:	899b      	ldrh	r3, [r3, #12]
 80108d8:	3308      	adds	r3, #8
 80108da:	b29b      	uxth	r3, r3
 80108dc:	b21b      	sxth	r3, r3
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7fa f8cc 	bl	800aa7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80108e6:	2103      	movs	r1, #3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f003 f9bf 	bl	8013c6c <icmp_dest_unreach>
      pbuf_free(p);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7fa f8d8 	bl	800aaa4 <pbuf_free>
  return;
 80108f4:	e003      	b.n	80108fe <udp_input+0x202>
    pbuf_free(p);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7fa f8d4 	bl	800aaa4 <pbuf_free>
  return;
 80108fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80108fe:	372c      	adds	r7, #44	; 0x2c
 8010900:	46bd      	mov	sp, r7
 8010902:	bd90      	pop	{r4, r7, pc}
 8010904:	08018324 	.word	0x08018324
 8010908:	080183c8 	.word	0x080183c8
 801090c:	08018378 	.word	0x08018378
 8010910:	080183e0 	.word	0x080183e0
 8010914:	2000818c 	.word	0x2000818c
 8010918:	2000b8d8 	.word	0x2000b8d8
 801091c:	080183fc 	.word	0x080183fc
 8010920:	2000819c 	.word	0x2000819c

08010924 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af02      	add	r7, sp, #8
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d109      	bne.n	801094c <udp_sendto_if+0x28>
 8010938:	4b2e      	ldr	r3, [pc, #184]	; (80109f4 <udp_sendto_if+0xd0>)
 801093a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801093e:	492e      	ldr	r1, [pc, #184]	; (80109f8 <udp_sendto_if+0xd4>)
 8010940:	482e      	ldr	r0, [pc, #184]	; (80109fc <udp_sendto_if+0xd8>)
 8010942:	f004 fd53 	bl	80153ec <iprintf>
 8010946:	f06f 030f 	mvn.w	r3, #15
 801094a:	e04f      	b.n	80109ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d109      	bne.n	8010966 <udp_sendto_if+0x42>
 8010952:	4b28      	ldr	r3, [pc, #160]	; (80109f4 <udp_sendto_if+0xd0>)
 8010954:	f240 2281 	movw	r2, #641	; 0x281
 8010958:	4929      	ldr	r1, [pc, #164]	; (8010a00 <udp_sendto_if+0xdc>)
 801095a:	4828      	ldr	r0, [pc, #160]	; (80109fc <udp_sendto_if+0xd8>)
 801095c:	f004 fd46 	bl	80153ec <iprintf>
 8010960:	f06f 030f 	mvn.w	r3, #15
 8010964:	e042      	b.n	80109ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d109      	bne.n	8010980 <udp_sendto_if+0x5c>
 801096c:	4b21      	ldr	r3, [pc, #132]	; (80109f4 <udp_sendto_if+0xd0>)
 801096e:	f240 2282 	movw	r2, #642	; 0x282
 8010972:	4924      	ldr	r1, [pc, #144]	; (8010a04 <udp_sendto_if+0xe0>)
 8010974:	4821      	ldr	r0, [pc, #132]	; (80109fc <udp_sendto_if+0xd8>)
 8010976:	f004 fd39 	bl	80153ec <iprintf>
 801097a:	f06f 030f 	mvn.w	r3, #15
 801097e:	e035      	b.n	80109ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d109      	bne.n	801099a <udp_sendto_if+0x76>
 8010986:	4b1b      	ldr	r3, [pc, #108]	; (80109f4 <udp_sendto_if+0xd0>)
 8010988:	f240 2283 	movw	r2, #643	; 0x283
 801098c:	491e      	ldr	r1, [pc, #120]	; (8010a08 <udp_sendto_if+0xe4>)
 801098e:	481b      	ldr	r0, [pc, #108]	; (80109fc <udp_sendto_if+0xd8>)
 8010990:	f004 fd2c 	bl	80153ec <iprintf>
 8010994:	f06f 030f 	mvn.w	r3, #15
 8010998:	e028      	b.n	80109ec <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d009      	beq.n	80109b4 <udp_sendto_if+0x90>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d005      	beq.n	80109b4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80109b0:	2be0      	cmp	r3, #224	; 0xe0
 80109b2:	d103      	bne.n	80109bc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	3304      	adds	r3, #4
 80109b8:	617b      	str	r3, [r7, #20]
 80109ba:	e00b      	b.n	80109d4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	6a3b      	ldr	r3, [r7, #32]
 80109c2:	3304      	adds	r3, #4
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d002      	beq.n	80109d0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80109ca:	f06f 0303 	mvn.w	r3, #3
 80109ce:	e00d      	b.n	80109ec <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80109d4:	887a      	ldrh	r2, [r7, #2]
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	4613      	mov	r3, r2
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	68b9      	ldr	r1, [r7, #8]
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f000 f811 	bl	8010a0c <udp_sendto_if_src>
 80109ea:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3718      	adds	r7, #24
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	08018324 	.word	0x08018324
 80109f8:	08018498 	.word	0x08018498
 80109fc:	08018378 	.word	0x08018378
 8010a00:	080184b4 	.word	0x080184b4
 8010a04:	080184d0 	.word	0x080184d0
 8010a08:	080184f0 	.word	0x080184f0

08010a0c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08c      	sub	sp, #48	; 0x30
 8010a10:	af04      	add	r7, sp, #16
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d109      	bne.n	8010a34 <udp_sendto_if_src+0x28>
 8010a20:	4b65      	ldr	r3, [pc, #404]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010a22:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010a26:	4965      	ldr	r1, [pc, #404]	; (8010bbc <udp_sendto_if_src+0x1b0>)
 8010a28:	4865      	ldr	r0, [pc, #404]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010a2a:	f004 fcdf 	bl	80153ec <iprintf>
 8010a2e:	f06f 030f 	mvn.w	r3, #15
 8010a32:	e0bc      	b.n	8010bae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d109      	bne.n	8010a4e <udp_sendto_if_src+0x42>
 8010a3a:	4b5f      	ldr	r3, [pc, #380]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010a3c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010a40:	4960      	ldr	r1, [pc, #384]	; (8010bc4 <udp_sendto_if_src+0x1b8>)
 8010a42:	485f      	ldr	r0, [pc, #380]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010a44:	f004 fcd2 	bl	80153ec <iprintf>
 8010a48:	f06f 030f 	mvn.w	r3, #15
 8010a4c:	e0af      	b.n	8010bae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d109      	bne.n	8010a68 <udp_sendto_if_src+0x5c>
 8010a54:	4b58      	ldr	r3, [pc, #352]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010a56:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010a5a:	495b      	ldr	r1, [pc, #364]	; (8010bc8 <udp_sendto_if_src+0x1bc>)
 8010a5c:	4858      	ldr	r0, [pc, #352]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010a5e:	f004 fcc5 	bl	80153ec <iprintf>
 8010a62:	f06f 030f 	mvn.w	r3, #15
 8010a66:	e0a2      	b.n	8010bae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d109      	bne.n	8010a82 <udp_sendto_if_src+0x76>
 8010a6e:	4b52      	ldr	r3, [pc, #328]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010a70:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010a74:	4955      	ldr	r1, [pc, #340]	; (8010bcc <udp_sendto_if_src+0x1c0>)
 8010a76:	4852      	ldr	r0, [pc, #328]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010a78:	f004 fcb8 	bl	80153ec <iprintf>
 8010a7c:	f06f 030f 	mvn.w	r3, #15
 8010a80:	e095      	b.n	8010bae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d109      	bne.n	8010a9c <udp_sendto_if_src+0x90>
 8010a88:	4b4b      	ldr	r3, [pc, #300]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010a8a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010a8e:	4950      	ldr	r1, [pc, #320]	; (8010bd0 <udp_sendto_if_src+0x1c4>)
 8010a90:	484b      	ldr	r0, [pc, #300]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010a92:	f004 fcab 	bl	80153ec <iprintf>
 8010a96:	f06f 030f 	mvn.w	r3, #15
 8010a9a:	e088      	b.n	8010bae <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	8a5b      	ldrh	r3, [r3, #18]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10f      	bne.n	8010ac4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010aa4:	68f9      	ldr	r1, [r7, #12]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	8a5b      	ldrh	r3, [r3, #18]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f000 f893 	bl	8010bd8 <udp_bind>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010ab6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010abe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ac2:	e074      	b.n	8010bae <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	891b      	ldrh	r3, [r3, #8]
 8010ac8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d902      	bls.n	8010ad6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ad4:	e06b      	b.n	8010bae <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010ad6:	2108      	movs	r1, #8
 8010ad8:	68b8      	ldr	r0, [r7, #8]
 8010ada:	f7f9 ff4d 	bl	800a978 <pbuf_add_header>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d015      	beq.n	8010b10 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010ae4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ae8:	2108      	movs	r1, #8
 8010aea:	2022      	movs	r0, #34	; 0x22
 8010aec:	f7f9 fcfa 	bl	800a4e4 <pbuf_alloc>
 8010af0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d102      	bne.n	8010afe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010afc:	e057      	b.n	8010bae <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	891b      	ldrh	r3, [r3, #8]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d006      	beq.n	8010b14 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	69f8      	ldr	r0, [r7, #28]
 8010b0a:	f7fa f8ef 	bl	800acec <pbuf_chain>
 8010b0e:	e001      	b.n	8010b14 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	895b      	ldrh	r3, [r3, #10]
 8010b18:	2b07      	cmp	r3, #7
 8010b1a:	d806      	bhi.n	8010b2a <udp_sendto_if_src+0x11e>
 8010b1c:	4b26      	ldr	r3, [pc, #152]	; (8010bb8 <udp_sendto_if_src+0x1ac>)
 8010b1e:	f240 320e 	movw	r2, #782	; 0x30e
 8010b22:	492c      	ldr	r1, [pc, #176]	; (8010bd4 <udp_sendto_if_src+0x1c8>)
 8010b24:	4826      	ldr	r0, [pc, #152]	; (8010bc0 <udp_sendto_if_src+0x1b4>)
 8010b26:	f004 fc61 	bl	80153ec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	8a5b      	ldrh	r3, [r3, #18]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f8 fc7f 	bl	8009438 <lwip_htons>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010b42:	887b      	ldrh	r3, [r7, #2]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7f8 fc77 	bl	8009438 <lwip_htons>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2200      	movs	r2, #0
 8010b56:	719a      	strb	r2, [r3, #6]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	891b      	ldrh	r3, [r3, #8]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7f8 fc69 	bl	8009438 <lwip_htons>
 8010b66:	4603      	mov	r3, r0
 8010b68:	461a      	mov	r2, r3
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010b6e:	2311      	movs	r3, #17
 8010b70:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	7adb      	ldrb	r3, [r3, #11]
 8010b76:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	7a9b      	ldrb	r3, [r3, #10]
 8010b7c:	7cb9      	ldrb	r1, [r7, #18]
 8010b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b80:	9202      	str	r2, [sp, #8]
 8010b82:	7cfa      	ldrb	r2, [r7, #19]
 8010b84:	9201      	str	r2, [sp, #4]
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b8e:	69f8      	ldr	r0, [r7, #28]
 8010b90:	f003 fafa 	bl	8014188 <ip4_output_if_src>
 8010b94:	4603      	mov	r3, r0
 8010b96:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010b98:	69fa      	ldr	r2, [r7, #28]
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d004      	beq.n	8010baa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010ba0:	69f8      	ldr	r0, [r7, #28]
 8010ba2:	f7f9 ff7f 	bl	800aaa4 <pbuf_free>
    q = NULL;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010baa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3720      	adds	r7, #32
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	08018324 	.word	0x08018324
 8010bbc:	08018510 	.word	0x08018510
 8010bc0:	08018378 	.word	0x08018378
 8010bc4:	08018530 	.word	0x08018530
 8010bc8:	08018550 	.word	0x08018550
 8010bcc:	08018574 	.word	0x08018574
 8010bd0:	08018598 	.word	0x08018598
 8010bd4:	080185bc 	.word	0x080185bc

08010bd8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	4613      	mov	r3, r2
 8010be4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010bec:	4b39      	ldr	r3, [pc, #228]	; (8010cd4 <udp_bind+0xfc>)
 8010bee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d109      	bne.n	8010c0a <udp_bind+0x32>
 8010bf6:	4b38      	ldr	r3, [pc, #224]	; (8010cd8 <udp_bind+0x100>)
 8010bf8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010bfc:	4937      	ldr	r1, [pc, #220]	; (8010cdc <udp_bind+0x104>)
 8010bfe:	4838      	ldr	r0, [pc, #224]	; (8010ce0 <udp_bind+0x108>)
 8010c00:	f004 fbf4 	bl	80153ec <iprintf>
 8010c04:	f06f 030f 	mvn.w	r3, #15
 8010c08:	e060      	b.n	8010ccc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c0e:	4b35      	ldr	r3, [pc, #212]	; (8010ce4 <udp_bind+0x10c>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	617b      	str	r3, [r7, #20]
 8010c14:	e009      	b.n	8010c2a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010c16:	68fa      	ldr	r2, [r7, #12]
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d102      	bne.n	8010c24 <udp_bind+0x4c>
      rebind = 1;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	74fb      	strb	r3, [r7, #19]
      break;
 8010c22:	e005      	b.n	8010c30 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	617b      	str	r3, [r7, #20]
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d1f2      	bne.n	8010c16 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010c30:	88fb      	ldrh	r3, [r7, #6]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d109      	bne.n	8010c4a <udp_bind+0x72>
    port = udp_new_port();
 8010c36:	f7ff fcc5 	bl	80105c4 <udp_new_port>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010c3e:	88fb      	ldrh	r3, [r7, #6]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d12c      	bne.n	8010c9e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010c44:	f06f 0307 	mvn.w	r3, #7
 8010c48:	e040      	b.n	8010ccc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c4a:	4b26      	ldr	r3, [pc, #152]	; (8010ce4 <udp_bind+0x10c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	617b      	str	r3, [r7, #20]
 8010c50:	e022      	b.n	8010c98 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d01b      	beq.n	8010c92 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	8a5b      	ldrh	r3, [r3, #18]
 8010c5e:	88fa      	ldrh	r2, [r7, #6]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d116      	bne.n	8010c92 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d00d      	beq.n	8010c8c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00a      	beq.n	8010c8c <udp_bind+0xb4>
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010c7e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010c8c:	f06f 0307 	mvn.w	r3, #7
 8010c90:	e01c      	b.n	8010ccc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	617b      	str	r3, [r7, #20]
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1d9      	bne.n	8010c52 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <udp_bind+0xd2>
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	e000      	b.n	8010cac <udp_bind+0xd4>
 8010caa:	2300      	movs	r3, #0
 8010cac:	68fa      	ldr	r2, [r7, #12]
 8010cae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	88fa      	ldrh	r2, [r7, #6]
 8010cb4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010cb6:	7cfb      	ldrb	r3, [r7, #19]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010cbc:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <udp_bind+0x10c>)
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010cc4:	4a07      	ldr	r2, [pc, #28]	; (8010ce4 <udp_bind+0x10c>)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	08019248 	.word	0x08019248
 8010cd8:	08018324 	.word	0x08018324
 8010cdc:	080185ec 	.word	0x080185ec
 8010ce0:	08018378 	.word	0x08018378
 8010ce4:	2000b8d8 	.word	0x2000b8d8

08010ce8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d109      	bne.n	8010d10 <udp_connect+0x28>
 8010cfc:	4b2c      	ldr	r3, [pc, #176]	; (8010db0 <udp_connect+0xc8>)
 8010cfe:	f240 4235 	movw	r2, #1077	; 0x435
 8010d02:	492c      	ldr	r1, [pc, #176]	; (8010db4 <udp_connect+0xcc>)
 8010d04:	482c      	ldr	r0, [pc, #176]	; (8010db8 <udp_connect+0xd0>)
 8010d06:	f004 fb71 	bl	80153ec <iprintf>
 8010d0a:	f06f 030f 	mvn.w	r3, #15
 8010d0e:	e04b      	b.n	8010da8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d109      	bne.n	8010d2a <udp_connect+0x42>
 8010d16:	4b26      	ldr	r3, [pc, #152]	; (8010db0 <udp_connect+0xc8>)
 8010d18:	f240 4236 	movw	r2, #1078	; 0x436
 8010d1c:	4927      	ldr	r1, [pc, #156]	; (8010dbc <udp_connect+0xd4>)
 8010d1e:	4826      	ldr	r0, [pc, #152]	; (8010db8 <udp_connect+0xd0>)
 8010d20:	f004 fb64 	bl	80153ec <iprintf>
 8010d24:	f06f 030f 	mvn.w	r3, #15
 8010d28:	e03e      	b.n	8010da8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	8a5b      	ldrh	r3, [r3, #18]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10f      	bne.n	8010d52 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010d32:	68f9      	ldr	r1, [r7, #12]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	8a5b      	ldrh	r3, [r3, #18]
 8010d38:	461a      	mov	r2, r3
 8010d3a:	68f8      	ldr	r0, [r7, #12]
 8010d3c:	f7ff ff4c 	bl	8010bd8 <udp_bind>
 8010d40:	4603      	mov	r3, r0
 8010d42:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010d44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d002      	beq.n	8010d52 <udp_connect+0x6a>
      return err;
 8010d4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d50:	e02a      	b.n	8010da8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d002      	beq.n	8010d5e <udp_connect+0x76>
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	e000      	b.n	8010d60 <udp_connect+0x78>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	88fa      	ldrh	r2, [r7, #6]
 8010d68:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	7c1b      	ldrb	r3, [r3, #16]
 8010d6e:	f043 0304 	orr.w	r3, r3, #4
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d78:	4b11      	ldr	r3, [pc, #68]	; (8010dc0 <udp_connect+0xd8>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	617b      	str	r3, [r7, #20]
 8010d7e:	e008      	b.n	8010d92 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010d80:	68fa      	ldr	r2, [r7, #12]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d101      	bne.n	8010d8c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e00d      	b.n	8010da8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	617b      	str	r3, [r7, #20]
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1f3      	bne.n	8010d80 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010d98:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <udp_connect+0xd8>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010da0:	4a07      	ldr	r2, [pc, #28]	; (8010dc0 <udp_connect+0xd8>)
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	08018324 	.word	0x08018324
 8010db4:	08018604 	.word	0x08018604
 8010db8:	08018378 	.word	0x08018378
 8010dbc:	08018620 	.word	0x08018620
 8010dc0:	2000b8d8 	.word	0x2000b8d8

08010dc4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d107      	bne.n	8010de6 <udp_recv+0x22>
 8010dd6:	4b08      	ldr	r3, [pc, #32]	; (8010df8 <udp_recv+0x34>)
 8010dd8:	f240 428a 	movw	r2, #1162	; 0x48a
 8010ddc:	4907      	ldr	r1, [pc, #28]	; (8010dfc <udp_recv+0x38>)
 8010dde:	4808      	ldr	r0, [pc, #32]	; (8010e00 <udp_recv+0x3c>)
 8010de0:	f004 fb04 	bl	80153ec <iprintf>
 8010de4:	e005      	b.n	8010df2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	61da      	str	r2, [r3, #28]
}
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	08018324 	.word	0x08018324
 8010dfc:	08018658 	.word	0x08018658
 8010e00:	08018378 	.word	0x08018378

08010e04 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d107      	bne.n	8010e22 <udp_remove+0x1e>
 8010e12:	4b19      	ldr	r3, [pc, #100]	; (8010e78 <udp_remove+0x74>)
 8010e14:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010e18:	4918      	ldr	r1, [pc, #96]	; (8010e7c <udp_remove+0x78>)
 8010e1a:	4819      	ldr	r0, [pc, #100]	; (8010e80 <udp_remove+0x7c>)
 8010e1c:	f004 fae6 	bl	80153ec <iprintf>
 8010e20:	e026      	b.n	8010e70 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010e22:	4b18      	ldr	r3, [pc, #96]	; (8010e84 <udp_remove+0x80>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d105      	bne.n	8010e38 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010e2c:	4b15      	ldr	r3, [pc, #84]	; (8010e84 <udp_remove+0x80>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	4a14      	ldr	r2, [pc, #80]	; (8010e84 <udp_remove+0x80>)
 8010e34:	6013      	str	r3, [r2, #0]
 8010e36:	e017      	b.n	8010e68 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e38:	4b12      	ldr	r3, [pc, #72]	; (8010e84 <udp_remove+0x80>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	60fb      	str	r3, [r7, #12]
 8010e3e:	e010      	b.n	8010e62 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d009      	beq.n	8010e5c <udp_remove+0x58>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d104      	bne.n	8010e5c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	60da      	str	r2, [r3, #12]
        break;
 8010e5a:	e005      	b.n	8010e68 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	60fb      	str	r3, [r7, #12]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1eb      	bne.n	8010e40 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010e68:	6879      	ldr	r1, [r7, #4]
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	f7f8 ffec 	bl	8009e48 <memp_free>
}
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	08018324 	.word	0x08018324
 8010e7c:	08018670 	.word	0x08018670
 8010e80:	08018378 	.word	0x08018378
 8010e84:	2000b8d8 	.word	0x2000b8d8

08010e88 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010e8e:	2000      	movs	r0, #0
 8010e90:	f7f8 ff88 	bl	8009da4 <memp_malloc>
 8010e94:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d007      	beq.n	8010eac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010e9c:	2220      	movs	r2, #32
 8010e9e:	2100      	movs	r1, #0
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f004 fa9b 	bl	80153dc <memset>
    pcb->ttl = UDP_TTL;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	22ff      	movs	r2, #255	; 0xff
 8010eaa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010eac:	687b      	ldr	r3, [r7, #4]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
	...

08010eb8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d01e      	beq.n	8010f06 <udp_netif_ip_addr_changed+0x4e>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d01a      	beq.n	8010f06 <udp_netif_ip_addr_changed+0x4e>
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d017      	beq.n	8010f06 <udp_netif_ip_addr_changed+0x4e>
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d013      	beq.n	8010f06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010ede:	4b0d      	ldr	r3, [pc, #52]	; (8010f14 <udp_netif_ip_addr_changed+0x5c>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e00c      	b.n	8010f00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d103      	bne.n	8010efa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1ef      	bne.n	8010ee6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010f06:	bf00      	nop
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	2000b8d8 	.word	0x2000b8d8

08010f18 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010f1c:	4b20      	ldr	r3, [pc, #128]	; (8010fa0 <dhcp_inc_pcb_refcount+0x88>)
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d133      	bne.n	8010f8c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010f24:	4b1f      	ldr	r3, [pc, #124]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d005      	beq.n	8010f38 <dhcp_inc_pcb_refcount+0x20>
 8010f2c:	4b1e      	ldr	r3, [pc, #120]	; (8010fa8 <dhcp_inc_pcb_refcount+0x90>)
 8010f2e:	22e5      	movs	r2, #229	; 0xe5
 8010f30:	491e      	ldr	r1, [pc, #120]	; (8010fac <dhcp_inc_pcb_refcount+0x94>)
 8010f32:	481f      	ldr	r0, [pc, #124]	; (8010fb0 <dhcp_inc_pcb_refcount+0x98>)
 8010f34:	f004 fa5a 	bl	80153ec <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010f38:	f7ff ffa6 	bl	8010e88 <udp_new>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	4b19      	ldr	r3, [pc, #100]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f40:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8010f42:	4b18      	ldr	r3, [pc, #96]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f4e:	e024      	b.n	8010f9a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010f50:	4b14      	ldr	r3, [pc, #80]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	7a5a      	ldrb	r2, [r3, #9]
 8010f56:	4b13      	ldr	r3, [pc, #76]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f042 0220 	orr.w	r2, r2, #32
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010f62:	4b10      	ldr	r3, [pc, #64]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2244      	movs	r2, #68	; 0x44
 8010f68:	4912      	ldr	r1, [pc, #72]	; (8010fb4 <dhcp_inc_pcb_refcount+0x9c>)
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7ff fe34 	bl	8010bd8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010f70:	4b0c      	ldr	r3, [pc, #48]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2243      	movs	r2, #67	; 0x43
 8010f76:	490f      	ldr	r1, [pc, #60]	; (8010fb4 <dhcp_inc_pcb_refcount+0x9c>)
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7ff feb5 	bl	8010ce8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010f7e:	4b09      	ldr	r3, [pc, #36]	; (8010fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2200      	movs	r2, #0
 8010f84:	490c      	ldr	r1, [pc, #48]	; (8010fb8 <dhcp_inc_pcb_refcount+0xa0>)
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff ff1c 	bl	8010dc4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010f8c:	4b04      	ldr	r3, [pc, #16]	; (8010fa0 <dhcp_inc_pcb_refcount+0x88>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	3301      	adds	r3, #1
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	4b02      	ldr	r3, [pc, #8]	; (8010fa0 <dhcp_inc_pcb_refcount+0x88>)
 8010f96:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	20004a48 	.word	0x20004a48
 8010fa4:	20004a44 	.word	0x20004a44
 8010fa8:	08018688 	.word	0x08018688
 8010fac:	080186c0 	.word	0x080186c0
 8010fb0:	080186e8 	.word	0x080186e8
 8010fb4:	08019248 	.word	0x08019248
 8010fb8:	080127d9 	.word	0x080127d9

08010fbc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010fc0:	4b0e      	ldr	r3, [pc, #56]	; (8010ffc <dhcp_dec_pcb_refcount+0x40>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d105      	bne.n	8010fd4 <dhcp_dec_pcb_refcount+0x18>
 8010fc8:	4b0d      	ldr	r3, [pc, #52]	; (8011000 <dhcp_dec_pcb_refcount+0x44>)
 8010fca:	22ff      	movs	r2, #255	; 0xff
 8010fcc:	490d      	ldr	r1, [pc, #52]	; (8011004 <dhcp_dec_pcb_refcount+0x48>)
 8010fce:	480e      	ldr	r0, [pc, #56]	; (8011008 <dhcp_dec_pcb_refcount+0x4c>)
 8010fd0:	f004 fa0c 	bl	80153ec <iprintf>
  dhcp_pcb_refcount--;
 8010fd4:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <dhcp_dec_pcb_refcount+0x40>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	4b07      	ldr	r3, [pc, #28]	; (8010ffc <dhcp_dec_pcb_refcount+0x40>)
 8010fde:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010fe0:	4b06      	ldr	r3, [pc, #24]	; (8010ffc <dhcp_dec_pcb_refcount+0x40>)
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d107      	bne.n	8010ff8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010fe8:	4b08      	ldr	r3, [pc, #32]	; (801100c <dhcp_dec_pcb_refcount+0x50>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff ff09 	bl	8010e04 <udp_remove>
    dhcp_pcb = NULL;
 8010ff2:	4b06      	ldr	r3, [pc, #24]	; (801100c <dhcp_dec_pcb_refcount+0x50>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	601a      	str	r2, [r3, #0]
  }
}
 8010ff8:	bf00      	nop
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	20004a48 	.word	0x20004a48
 8011000:	08018688 	.word	0x08018688
 8011004:	08018710 	.word	0x08018710
 8011008:	080186e8 	.word	0x080186e8
 801100c:	20004a44 	.word	0x20004a44

08011010 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a1b      	ldr	r3, [r3, #32]
 801101c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801101e:	210c      	movs	r1, #12
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f001 f81b 	bl	801205c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011026:	4b06      	ldr	r3, [pc, #24]	; (8011040 <dhcp_handle_nak+0x30>)
 8011028:	4a05      	ldr	r2, [pc, #20]	; (8011040 <dhcp_handle_nak+0x30>)
 801102a:	4905      	ldr	r1, [pc, #20]	; (8011040 <dhcp_handle_nak+0x30>)
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7f9 f8a9 	bl	800a184 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fc0e 	bl	8011854 <dhcp_discover>
}
 8011038:	bf00      	nop
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	08019248 	.word	0x08019248

08011044 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a1b      	ldr	r3, [r3, #32]
 8011050:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011052:	2108      	movs	r1, #8
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f001 f801 	bl	801205c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	331c      	adds	r3, #28
 801105e:	2200      	movs	r2, #0
 8011060:	4619      	mov	r1, r3
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f002 fb00 	bl	8013668 <etharp_query>
 8011068:	4603      	mov	r3, r0
 801106a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	799b      	ldrb	r3, [r3, #6]
 8011070:	2bff      	cmp	r3, #255	; 0xff
 8011072:	d005      	beq.n	8011080 <dhcp_check+0x3c>
    dhcp->tries++;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	799b      	ldrb	r3, [r3, #6]
 8011078:	3301      	adds	r3, #1
 801107a:	b2da      	uxtb	r2, r3
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011080:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011084:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011086:	893b      	ldrh	r3, [r7, #8]
 8011088:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801108c:	4a06      	ldr	r2, [pc, #24]	; (80110a8 <dhcp_check+0x64>)
 801108e:	fb82 1203 	smull	r1, r2, r2, r3
 8011092:	1152      	asrs	r2, r2, #5
 8011094:	17db      	asrs	r3, r3, #31
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	b29a      	uxth	r2, r3
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801109e:	bf00      	nop
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	10624dd3 	.word	0x10624dd3

080110ac <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a1b      	ldr	r3, [r3, #32]
 80110ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80110bc:	4b0c      	ldr	r3, [pc, #48]	; (80110f0 <dhcp_handle_offer+0x44>)
 80110be:	789b      	ldrb	r3, [r3, #2]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d011      	beq.n	80110e8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2200      	movs	r2, #0
 80110c8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80110ca:	4b0a      	ldr	r3, [pc, #40]	; (80110f4 <dhcp_handle_offer+0x48>)
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7f8 f9c7 	bl	8009462 <lwip_htonl>
 80110d4:	4602      	mov	r2, r0
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	691a      	ldr	r2, [r3, #16]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 f808 	bl	80110f8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80110e8:	bf00      	nop
 80110ea:	3710      	adds	r7, #16
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	2000b8dc 	.word	0x2000b8dc
 80110f4:	2000b8e4 	.word	0x2000b8e4

080110f8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80110f8:	b5b0      	push	{r4, r5, r7, lr}
 80110fa:	b08a      	sub	sp, #40	; 0x28
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d109      	bne.n	801111a <dhcp_select+0x22>
 8011106:	4b71      	ldr	r3, [pc, #452]	; (80112cc <dhcp_select+0x1d4>)
 8011108:	f240 1277 	movw	r2, #375	; 0x177
 801110c:	4970      	ldr	r1, [pc, #448]	; (80112d0 <dhcp_select+0x1d8>)
 801110e:	4871      	ldr	r0, [pc, #452]	; (80112d4 <dhcp_select+0x1dc>)
 8011110:	f004 f96c 	bl	80153ec <iprintf>
 8011114:	f06f 030f 	mvn.w	r3, #15
 8011118:	e0d3      	b.n	80112c2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d109      	bne.n	801113a <dhcp_select+0x42>
 8011126:	4b69      	ldr	r3, [pc, #420]	; (80112cc <dhcp_select+0x1d4>)
 8011128:	f240 1279 	movw	r2, #377	; 0x179
 801112c:	496a      	ldr	r1, [pc, #424]	; (80112d8 <dhcp_select+0x1e0>)
 801112e:	4869      	ldr	r0, [pc, #420]	; (80112d4 <dhcp_select+0x1dc>)
 8011130:	f004 f95c 	bl	80153ec <iprintf>
 8011134:	f06f 0305 	mvn.w	r3, #5
 8011138:	e0c3      	b.n	80112c2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801113a:	2101      	movs	r1, #1
 801113c:	69b8      	ldr	r0, [r7, #24]
 801113e:	f000 ff8d 	bl	801205c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011142:	f107 030c 	add.w	r3, r7, #12
 8011146:	2203      	movs	r2, #3
 8011148:	69b9      	ldr	r1, [r7, #24]
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f001 fc10 	bl	8012970 <dhcp_create_msg>
 8011150:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 8085 	beq.w	8011264 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011160:	89b8      	ldrh	r0, [r7, #12]
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011168:	2302      	movs	r3, #2
 801116a:	2239      	movs	r2, #57	; 0x39
 801116c:	f000 ff90 	bl	8012090 <dhcp_option>
 8011170:	4603      	mov	r3, r0
 8011172:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011174:	89b8      	ldrh	r0, [r7, #12]
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011180:	461a      	mov	r2, r3
 8011182:	f000 ffdf 	bl	8012144 <dhcp_option_short>
 8011186:	4603      	mov	r3, r0
 8011188:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801118a:	89b8      	ldrh	r0, [r7, #12]
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011192:	2304      	movs	r3, #4
 8011194:	2232      	movs	r2, #50	; 0x32
 8011196:	f000 ff7b 	bl	8012090 <dhcp_option>
 801119a:	4603      	mov	r3, r0
 801119c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801119e:	89bc      	ldrh	r4, [r7, #12]
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	69db      	ldr	r3, [r3, #28]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f8 f959 	bl	8009462 <lwip_htonl>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	4629      	mov	r1, r5
 80111b6:	4620      	mov	r0, r4
 80111b8:	f000 fff6 	bl	80121a8 <dhcp_option_long>
 80111bc:	4603      	mov	r3, r0
 80111be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80111c0:	89b8      	ldrh	r0, [r7, #12]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111c8:	2304      	movs	r3, #4
 80111ca:	2236      	movs	r2, #54	; 0x36
 80111cc:	f000 ff60 	bl	8012090 <dhcp_option>
 80111d0:	4603      	mov	r3, r0
 80111d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80111d4:	89bc      	ldrh	r4, [r7, #12]
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f8 f93e 	bl	8009462 <lwip_htonl>
 80111e6:	4603      	mov	r3, r0
 80111e8:	461a      	mov	r2, r3
 80111ea:	4629      	mov	r1, r5
 80111ec:	4620      	mov	r0, r4
 80111ee:	f000 ffdb 	bl	80121a8 <dhcp_option_long>
 80111f2:	4603      	mov	r3, r0
 80111f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80111f6:	89b8      	ldrh	r0, [r7, #12]
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111fe:	2303      	movs	r3, #3
 8011200:	2237      	movs	r2, #55	; 0x37
 8011202:	f000 ff45 	bl	8012090 <dhcp_option>
 8011206:	4603      	mov	r3, r0
 8011208:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801120a:	2300      	movs	r3, #0
 801120c:	77bb      	strb	r3, [r7, #30]
 801120e:	e00e      	b.n	801122e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011210:	89b8      	ldrh	r0, [r7, #12]
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011218:	7fbb      	ldrb	r3, [r7, #30]
 801121a:	4a30      	ldr	r2, [pc, #192]	; (80112dc <dhcp_select+0x1e4>)
 801121c:	5cd3      	ldrb	r3, [r2, r3]
 801121e:	461a      	mov	r2, r3
 8011220:	f000 ff6a 	bl	80120f8 <dhcp_option_byte>
 8011224:	4603      	mov	r3, r0
 8011226:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011228:	7fbb      	ldrb	r3, [r7, #30]
 801122a:	3301      	adds	r3, #1
 801122c:	77bb      	strb	r3, [r7, #30]
 801122e:	7fbb      	ldrb	r3, [r7, #30]
 8011230:	2b02      	cmp	r3, #2
 8011232:	d9ed      	bls.n	8011210 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011234:	89b8      	ldrh	r0, [r7, #12]
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	33f0      	adds	r3, #240	; 0xf0
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	4619      	mov	r1, r3
 801123e:	f001 fc6d 	bl	8012b1c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011242:	4b27      	ldr	r3, [pc, #156]	; (80112e0 <dhcp_select+0x1e8>)
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	4b27      	ldr	r3, [pc, #156]	; (80112e4 <dhcp_select+0x1ec>)
 8011248:	9301      	str	r3, [sp, #4]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	2343      	movs	r3, #67	; 0x43
 8011250:	4a25      	ldr	r2, [pc, #148]	; (80112e8 <dhcp_select+0x1f0>)
 8011252:	6979      	ldr	r1, [r7, #20]
 8011254:	f7ff fbda 	bl	8010a0c <udp_sendto_if_src>
 8011258:	4603      	mov	r3, r0
 801125a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801125c:	6978      	ldr	r0, [r7, #20]
 801125e:	f7f9 fc21 	bl	800aaa4 <pbuf_free>
 8011262:	e001      	b.n	8011268 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011264:	23ff      	movs	r3, #255	; 0xff
 8011266:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	799b      	ldrb	r3, [r3, #6]
 801126c:	2bff      	cmp	r3, #255	; 0xff
 801126e:	d005      	beq.n	801127c <dhcp_select+0x184>
    dhcp->tries++;
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	799b      	ldrb	r3, [r3, #6]
 8011274:	3301      	adds	r3, #1
 8011276:	b2da      	uxtb	r2, r3
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	799b      	ldrb	r3, [r3, #6]
 8011280:	2b05      	cmp	r3, #5
 8011282:	d80d      	bhi.n	80112a0 <dhcp_select+0x1a8>
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	799b      	ldrb	r3, [r3, #6]
 8011288:	461a      	mov	r2, r3
 801128a:	2301      	movs	r3, #1
 801128c:	4093      	lsls	r3, r2
 801128e:	b29b      	uxth	r3, r3
 8011290:	461a      	mov	r2, r3
 8011292:	0152      	lsls	r2, r2, #5
 8011294:	1ad2      	subs	r2, r2, r3
 8011296:	0092      	lsls	r2, r2, #2
 8011298:	4413      	add	r3, r2
 801129a:	00db      	lsls	r3, r3, #3
 801129c:	b29b      	uxth	r3, r3
 801129e:	e001      	b.n	80112a4 <dhcp_select+0x1ac>
 80112a0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80112a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80112a6:	89fb      	ldrh	r3, [r7, #14]
 80112a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80112ac:	4a0f      	ldr	r2, [pc, #60]	; (80112ec <dhcp_select+0x1f4>)
 80112ae:	fb82 1203 	smull	r1, r2, r2, r3
 80112b2:	1152      	asrs	r2, r2, #5
 80112b4:	17db      	asrs	r3, r3, #31
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80112be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3720      	adds	r7, #32
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bdb0      	pop	{r4, r5, r7, pc}
 80112ca:	bf00      	nop
 80112cc:	08018688 	.word	0x08018688
 80112d0:	08018734 	.word	0x08018734
 80112d4:	080186e8 	.word	0x080186e8
 80112d8:	08018750 	.word	0x08018750
 80112dc:	2000001c 	.word	0x2000001c
 80112e0:	20004a44 	.word	0x20004a44
 80112e4:	08019248 	.word	0x08019248
 80112e8:	0801924c 	.word	0x0801924c
 80112ec:	10624dd3 	.word	0x10624dd3

080112f0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80112f6:	4b27      	ldr	r3, [pc, #156]	; (8011394 <dhcp_coarse_tmr+0xa4>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	607b      	str	r3, [r7, #4]
 80112fc:	e042      	b.n	8011384 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d039      	beq.n	801137e <dhcp_coarse_tmr+0x8e>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	795b      	ldrb	r3, [r3, #5]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d035      	beq.n	801137e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	8a9b      	ldrh	r3, [r3, #20]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d012      	beq.n	8011340 <dhcp_coarse_tmr+0x50>
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	8a5b      	ldrh	r3, [r3, #18]
 801131e:	3301      	adds	r3, #1
 8011320:	b29a      	uxth	r2, r3
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	825a      	strh	r2, [r3, #18]
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	8a5a      	ldrh	r2, [r3, #18]
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	8a9b      	ldrh	r3, [r3, #20]
 801132e:	429a      	cmp	r2, r3
 8011330:	d106      	bne.n	8011340 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 fdf8 	bl	8011f28 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f96b 	bl	8011614 <dhcp_start>
 801133e:	e01e      	b.n	801137e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	8a1b      	ldrh	r3, [r3, #16]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00b      	beq.n	8011360 <dhcp_coarse_tmr+0x70>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	8a1b      	ldrh	r3, [r3, #16]
 801134c:	1e5a      	subs	r2, r3, #1
 801134e:	b291      	uxth	r1, r2
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	8211      	strh	r1, [r2, #16]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d103      	bne.n	8011360 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f000 f8c7 	bl	80114ec <dhcp_t2_timeout>
 801135e:	e00e      	b.n	801137e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	89db      	ldrh	r3, [r3, #14]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00a      	beq.n	801137e <dhcp_coarse_tmr+0x8e>
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	89db      	ldrh	r3, [r3, #14]
 801136c:	1e5a      	subs	r2, r3, #1
 801136e:	b291      	uxth	r1, r2
 8011370:	683a      	ldr	r2, [r7, #0]
 8011372:	81d1      	strh	r1, [r2, #14]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d102      	bne.n	801137e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 f888 	bl	801148e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	607b      	str	r3, [r7, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1b9      	bne.n	80112fe <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801138a:	bf00      	nop
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	2000b8b0 	.word	0x2000b8b0

08011398 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801139e:	4b16      	ldr	r3, [pc, #88]	; (80113f8 <dhcp_fine_tmr+0x60>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	607b      	str	r3, [r7, #4]
 80113a4:	e020      	b.n	80113e8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6a1b      	ldr	r3, [r3, #32]
 80113aa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d017      	beq.n	80113e2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	891b      	ldrh	r3, [r3, #8]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d906      	bls.n	80113c8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	3b01      	subs	r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	811a      	strh	r2, [r3, #8]
 80113c6:	e00c      	b.n	80113e2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d108      	bne.n	80113e2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	891b      	ldrh	r3, [r3, #8]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 f80d 	bl	80113fc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	607b      	str	r3, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1db      	bne.n	80113a6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80113ee:	bf00      	nop
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	2000b8b0 	.word	0x2000b8b0

080113fc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a1b      	ldr	r3, [r3, #32]
 8011408:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	795b      	ldrb	r3, [r3, #5]
 801140e:	2b0c      	cmp	r3, #12
 8011410:	d003      	beq.n	801141a <dhcp_timeout+0x1e>
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	795b      	ldrb	r3, [r3, #5]
 8011416:	2b06      	cmp	r3, #6
 8011418:	d103      	bne.n	8011422 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 fa1a 	bl	8011854 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011420:	e031      	b.n	8011486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	795b      	ldrb	r3, [r3, #5]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d10e      	bne.n	8011448 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	799b      	ldrb	r3, [r3, #6]
 801142e:	2b05      	cmp	r3, #5
 8011430:	d803      	bhi.n	801143a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff fe60 	bl	80110f8 <dhcp_select>
}
 8011438:	e025      	b.n	8011486 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fd74 	bl	8011f28 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f8e7 	bl	8011614 <dhcp_start>
}
 8011446:	e01e      	b.n	8011486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	795b      	ldrb	r3, [r3, #5]
 801144c:	2b08      	cmp	r3, #8
 801144e:	d10b      	bne.n	8011468 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	799b      	ldrb	r3, [r3, #6]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d803      	bhi.n	8011460 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7ff fdf3 	bl	8011044 <dhcp_check>
}
 801145e:	e012      	b.n	8011486 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 fa99 	bl	8011998 <dhcp_bind>
}
 8011466:	e00e      	b.n	8011486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	795b      	ldrb	r3, [r3, #5]
 801146c:	2b03      	cmp	r3, #3
 801146e:	d10a      	bne.n	8011486 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	799b      	ldrb	r3, [r3, #6]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d803      	bhi.n	8011480 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f000 fc9f 	bl	8011dbc <dhcp_reboot>
}
 801147e:	e002      	b.n	8011486 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f000 f9e7 	bl	8011854 <dhcp_discover>
}
 8011486:	bf00      	nop
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b084      	sub	sp, #16
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	795b      	ldrb	r3, [r3, #5]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d007      	beq.n	80114b4 <dhcp_t1_timeout+0x26>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	795b      	ldrb	r3, [r3, #5]
 80114a8:	2b0a      	cmp	r3, #10
 80114aa:	d003      	beq.n	80114b4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80114b0:	2b05      	cmp	r3, #5
 80114b2:	d117      	bne.n	80114e4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fb49 	bl	8011b4c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	899b      	ldrh	r3, [r3, #12]
 80114be:	461a      	mov	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	8a5b      	ldrh	r3, [r3, #18]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	dd0c      	ble.n	80114e4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	899b      	ldrh	r3, [r3, #12]
 80114ce:	461a      	mov	r2, r3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	8a5b      	ldrh	r3, [r3, #18]
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	da00      	bge.n	80114dc <dhcp_t1_timeout+0x4e>
 80114da:	3301      	adds	r3, #1
 80114dc:	105b      	asrs	r3, r3, #1
 80114de:	b29a      	uxth	r2, r3
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80114e4:	bf00      	nop
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6a1b      	ldr	r3, [r3, #32]
 80114f8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	795b      	ldrb	r3, [r3, #5]
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d00b      	beq.n	801151a <dhcp_t2_timeout+0x2e>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	795b      	ldrb	r3, [r3, #5]
 8011506:	2b0a      	cmp	r3, #10
 8011508:	d007      	beq.n	801151a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801150e:	2b05      	cmp	r3, #5
 8011510:	d003      	beq.n	801151a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	795b      	ldrb	r3, [r3, #5]
 8011516:	2b04      	cmp	r3, #4
 8011518:	d117      	bne.n	801154a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fbb2 	bl	8011c84 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	8a9b      	ldrh	r3, [r3, #20]
 8011524:	461a      	mov	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8a5b      	ldrh	r3, [r3, #18]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	2b01      	cmp	r3, #1
 801152e:	dd0c      	ble.n	801154a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	8a9b      	ldrh	r3, [r3, #20]
 8011534:	461a      	mov	r2, r3
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	8a5b      	ldrh	r3, [r3, #18]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	da00      	bge.n	8011542 <dhcp_t2_timeout+0x56>
 8011540:	3301      	adds	r3, #1
 8011542:	105b      	asrs	r3, r3, #1
 8011544:	b29a      	uxth	r2, r3
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801154a:	bf00      	nop
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
	...

08011554 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6a1b      	ldr	r3, [r3, #32]
 8011562:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2200      	movs	r2, #0
 8011568:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2200      	movs	r2, #0
 801156e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011570:	4b26      	ldr	r3, [pc, #152]	; (801160c <dhcp_handle_ack+0xb8>)
 8011572:	78db      	ldrb	r3, [r3, #3]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d003      	beq.n	8011580 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011578:	4b25      	ldr	r3, [pc, #148]	; (8011610 <dhcp_handle_ack+0xbc>)
 801157a:	68da      	ldr	r2, [r3, #12]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011580:	4b22      	ldr	r3, [pc, #136]	; (801160c <dhcp_handle_ack+0xb8>)
 8011582:	791b      	ldrb	r3, [r3, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d004      	beq.n	8011592 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011588:	4b21      	ldr	r3, [pc, #132]	; (8011610 <dhcp_handle_ack+0xbc>)
 801158a:	691a      	ldr	r2, [r3, #16]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011590:	e004      	b.n	801159c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011596:	085a      	lsrs	r2, r3, #1
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801159c:	4b1b      	ldr	r3, [pc, #108]	; (801160c <dhcp_handle_ack+0xb8>)
 801159e:	795b      	ldrb	r3, [r3, #5]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d004      	beq.n	80115ae <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80115a4:	4b1a      	ldr	r3, [pc, #104]	; (8011610 <dhcp_handle_ack+0xbc>)
 80115a6:	695a      	ldr	r2, [r3, #20]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	631a      	str	r2, [r3, #48]	; 0x30
 80115ac:	e007      	b.n	80115be <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115b2:	4613      	mov	r3, r2
 80115b4:	00db      	lsls	r3, r3, #3
 80115b6:	1a9b      	subs	r3, r3, r2
 80115b8:	08da      	lsrs	r2, r3, #3
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80115c6:	4b11      	ldr	r3, [pc, #68]	; (801160c <dhcp_handle_ack+0xb8>)
 80115c8:	799b      	ldrb	r3, [r3, #6]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d00b      	beq.n	80115e6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80115ce:	4b10      	ldr	r3, [pc, #64]	; (8011610 <dhcp_handle_ack+0xbc>)
 80115d0:	699b      	ldr	r3, [r3, #24]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7f7 ff45 	bl	8009462 <lwip_htonl>
 80115d8:	4602      	mov	r2, r0
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2201      	movs	r2, #1
 80115e2:	71da      	strb	r2, [r3, #7]
 80115e4:	e002      	b.n	80115ec <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2200      	movs	r2, #0
 80115ea:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80115ec:	4b07      	ldr	r3, [pc, #28]	; (801160c <dhcp_handle_ack+0xb8>)
 80115ee:	79db      	ldrb	r3, [r3, #7]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d007      	beq.n	8011604 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80115f4:	4b06      	ldr	r3, [pc, #24]	; (8011610 <dhcp_handle_ack+0xbc>)
 80115f6:	69db      	ldr	r3, [r3, #28]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f7 ff32 	bl	8009462 <lwip_htonl>
 80115fe:	4602      	mov	r2, r0
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011604:	bf00      	nop
 8011606:	3710      	adds	r7, #16
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	2000b8dc 	.word	0x2000b8dc
 8011610:	2000b8e4 	.word	0x2000b8e4

08011614 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d109      	bne.n	8011636 <dhcp_start+0x22>
 8011622:	4b37      	ldr	r3, [pc, #220]	; (8011700 <dhcp_start+0xec>)
 8011624:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011628:	4936      	ldr	r1, [pc, #216]	; (8011704 <dhcp_start+0xf0>)
 801162a:	4837      	ldr	r0, [pc, #220]	; (8011708 <dhcp_start+0xf4>)
 801162c:	f003 fede 	bl	80153ec <iprintf>
 8011630:	f06f 030f 	mvn.w	r3, #15
 8011634:	e060      	b.n	80116f8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801163c:	f003 0301 	and.w	r3, r3, #1
 8011640:	2b00      	cmp	r3, #0
 8011642:	d109      	bne.n	8011658 <dhcp_start+0x44>
 8011644:	4b2e      	ldr	r3, [pc, #184]	; (8011700 <dhcp_start+0xec>)
 8011646:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801164a:	4930      	ldr	r1, [pc, #192]	; (801170c <dhcp_start+0xf8>)
 801164c:	482e      	ldr	r0, [pc, #184]	; (8011708 <dhcp_start+0xf4>)
 801164e:	f003 fecd 	bl	80153ec <iprintf>
 8011652:	f06f 030f 	mvn.w	r3, #15
 8011656:	e04f      	b.n	80116f8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6a1b      	ldr	r3, [r3, #32]
 801165c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011662:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011666:	d202      	bcs.n	801166e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801166c:	e044      	b.n	80116f8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10d      	bne.n	8011690 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011674:	2034      	movs	r0, #52	; 0x34
 8011676:	f7f8 fa13 	bl	8009aa0 <mem_malloc>
 801167a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d102      	bne.n	8011688 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011686:	e037      	b.n	80116f8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	621a      	str	r2, [r3, #32]
 801168e:	e005      	b.n	801169c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	791b      	ldrb	r3, [r3, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011698:	f7ff fc90 	bl	8010fbc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801169c:	2234      	movs	r2, #52	; 0x34
 801169e:	2100      	movs	r1, #0
 80116a0:	68f8      	ldr	r0, [r7, #12]
 80116a2:	f003 fe9b 	bl	80153dc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80116a6:	f7ff fc37 	bl	8010f18 <dhcp_inc_pcb_refcount>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d002      	beq.n	80116b6 <dhcp_start+0xa2>
    return ERR_MEM;
 80116b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116b4:	e020      	b.n	80116f8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2201      	movs	r2, #1
 80116ba:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116c2:	f003 0304 	and.w	r3, r3, #4
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d105      	bne.n	80116d6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80116ca:	2102      	movs	r1, #2
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f000 fcc5 	bl	801205c <dhcp_set_state>
    return ERR_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e010      	b.n	80116f8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f8bc 	bl	8011854 <dhcp_discover>
 80116dc:	4603      	mov	r3, r0
 80116de:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80116e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f000 fc1d 	bl	8011f28 <dhcp_release_and_stop>
    return ERR_MEM;
 80116ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116f2:	e001      	b.n	80116f8 <dhcp_start+0xe4>
  }
  return result;
 80116f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	08018688 	.word	0x08018688
 8011704:	0801876c 	.word	0x0801876c
 8011708:	080186e8 	.word	0x080186e8
 801170c:	080187b0 	.word	0x080187b0

08011710 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d107      	bne.n	8011730 <dhcp_arp_reply+0x20>
 8011720:	4b0e      	ldr	r3, [pc, #56]	; (801175c <dhcp_arp_reply+0x4c>)
 8011722:	f240 328b 	movw	r2, #907	; 0x38b
 8011726:	490e      	ldr	r1, [pc, #56]	; (8011760 <dhcp_arp_reply+0x50>)
 8011728:	480e      	ldr	r0, [pc, #56]	; (8011764 <dhcp_arp_reply+0x54>)
 801172a:	f003 fe5f 	bl	80153ec <iprintf>
 801172e:	e012      	b.n	8011756 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a1b      	ldr	r3, [r3, #32]
 8011734:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00c      	beq.n	8011756 <dhcp_arp_reply+0x46>
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	795b      	ldrb	r3, [r3, #5]
 8011740:	2b08      	cmp	r3, #8
 8011742:	d108      	bne.n	8011756 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	69db      	ldr	r3, [r3, #28]
 801174c:	429a      	cmp	r2, r3
 801174e:	d102      	bne.n	8011756 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f809 	bl	8011768 <dhcp_decline>
    }
  }
}
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	08018688 	.word	0x08018688
 8011760:	0801876c 	.word	0x0801876c
 8011764:	080186e8 	.word	0x080186e8

08011768 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011768:	b5b0      	push	{r4, r5, r7, lr}
 801176a:	b08a      	sub	sp, #40	; 0x28
 801176c:	af02      	add	r7, sp, #8
 801176e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a1b      	ldr	r3, [r3, #32]
 8011774:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011776:	210c      	movs	r1, #12
 8011778:	69b8      	ldr	r0, [r7, #24]
 801177a:	f000 fc6f 	bl	801205c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801177e:	f107 030c 	add.w	r3, r7, #12
 8011782:	2204      	movs	r2, #4
 8011784:	69b9      	ldr	r1, [r7, #24]
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f001 f8f2 	bl	8012970 <dhcp_create_msg>
 801178c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d035      	beq.n	8011800 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801179a:	89b8      	ldrh	r0, [r7, #12]
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117a2:	2304      	movs	r3, #4
 80117a4:	2232      	movs	r2, #50	; 0x32
 80117a6:	f000 fc73 	bl	8012090 <dhcp_option>
 80117aa:	4603      	mov	r3, r0
 80117ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80117ae:	89bc      	ldrh	r4, [r7, #12]
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	69db      	ldr	r3, [r3, #28]
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7f7 fe51 	bl	8009462 <lwip_htonl>
 80117c0:	4603      	mov	r3, r0
 80117c2:	461a      	mov	r2, r3
 80117c4:	4629      	mov	r1, r5
 80117c6:	4620      	mov	r0, r4
 80117c8:	f000 fcee 	bl	80121a8 <dhcp_option_long>
 80117cc:	4603      	mov	r3, r0
 80117ce:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80117d0:	89b8      	ldrh	r0, [r7, #12]
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	33f0      	adds	r3, #240	; 0xf0
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	4619      	mov	r1, r3
 80117da:	f001 f99f 	bl	8012b1c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80117de:	4b19      	ldr	r3, [pc, #100]	; (8011844 <dhcp_decline+0xdc>)
 80117e0:	6818      	ldr	r0, [r3, #0]
 80117e2:	4b19      	ldr	r3, [pc, #100]	; (8011848 <dhcp_decline+0xe0>)
 80117e4:	9301      	str	r3, [sp, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	2343      	movs	r3, #67	; 0x43
 80117ec:	4a17      	ldr	r2, [pc, #92]	; (801184c <dhcp_decline+0xe4>)
 80117ee:	6979      	ldr	r1, [r7, #20]
 80117f0:	f7ff f90c 	bl	8010a0c <udp_sendto_if_src>
 80117f4:	4603      	mov	r3, r0
 80117f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80117f8:	6978      	ldr	r0, [r7, #20]
 80117fa:	f7f9 f953 	bl	800aaa4 <pbuf_free>
 80117fe:	e001      	b.n	8011804 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011800:	23ff      	movs	r3, #255	; 0xff
 8011802:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	799b      	ldrb	r3, [r3, #6]
 8011808:	2bff      	cmp	r3, #255	; 0xff
 801180a:	d005      	beq.n	8011818 <dhcp_decline+0xb0>
    dhcp->tries++;
 801180c:	69bb      	ldr	r3, [r7, #24]
 801180e:	799b      	ldrb	r3, [r3, #6]
 8011810:	3301      	adds	r3, #1
 8011812:	b2da      	uxtb	r2, r3
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011818:	f242 7310 	movw	r3, #10000	; 0x2710
 801181c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801181e:	89fb      	ldrh	r3, [r7, #14]
 8011820:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011824:	4a0a      	ldr	r2, [pc, #40]	; (8011850 <dhcp_decline+0xe8>)
 8011826:	fb82 1203 	smull	r1, r2, r2, r3
 801182a:	1152      	asrs	r2, r2, #5
 801182c:	17db      	asrs	r3, r3, #31
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	b29a      	uxth	r2, r3
 8011832:	69bb      	ldr	r3, [r7, #24]
 8011834:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3720      	adds	r7, #32
 801183e:	46bd      	mov	sp, r7
 8011840:	bdb0      	pop	{r4, r5, r7, pc}
 8011842:	bf00      	nop
 8011844:	20004a44 	.word	0x20004a44
 8011848:	08019248 	.word	0x08019248
 801184c:	0801924c 	.word	0x0801924c
 8011850:	10624dd3 	.word	0x10624dd3

08011854 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b08a      	sub	sp, #40	; 0x28
 8011858:	af02      	add	r7, sp, #8
 801185a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a1b      	ldr	r3, [r3, #32]
 8011860:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	2200      	movs	r2, #0
 801186a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801186c:	2106      	movs	r1, #6
 801186e:	69b8      	ldr	r0, [r7, #24]
 8011870:	f000 fbf4 	bl	801205c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011874:	f107 0308 	add.w	r3, r7, #8
 8011878:	2201      	movs	r2, #1
 801187a:	69b9      	ldr	r1, [r7, #24]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f001 f877 	bl	8012970 <dhcp_create_msg>
 8011882:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d04b      	beq.n	8011922 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011890:	8938      	ldrh	r0, [r7, #8]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011898:	2302      	movs	r3, #2
 801189a:	2239      	movs	r2, #57	; 0x39
 801189c:	f000 fbf8 	bl	8012090 <dhcp_option>
 80118a0:	4603      	mov	r3, r0
 80118a2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80118a4:	8938      	ldrh	r0, [r7, #8]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80118b0:	461a      	mov	r2, r3
 80118b2:	f000 fc47 	bl	8012144 <dhcp_option_short>
 80118b6:	4603      	mov	r3, r0
 80118b8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80118ba:	8938      	ldrh	r0, [r7, #8]
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118c2:	2303      	movs	r3, #3
 80118c4:	2237      	movs	r2, #55	; 0x37
 80118c6:	f000 fbe3 	bl	8012090 <dhcp_option>
 80118ca:	4603      	mov	r3, r0
 80118cc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118ce:	2300      	movs	r3, #0
 80118d0:	77fb      	strb	r3, [r7, #31]
 80118d2:	e00e      	b.n	80118f2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80118d4:	8938      	ldrh	r0, [r7, #8]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118dc:	7ffb      	ldrb	r3, [r7, #31]
 80118de:	4a29      	ldr	r2, [pc, #164]	; (8011984 <dhcp_discover+0x130>)
 80118e0:	5cd3      	ldrb	r3, [r2, r3]
 80118e2:	461a      	mov	r2, r3
 80118e4:	f000 fc08 	bl	80120f8 <dhcp_option_byte>
 80118e8:	4603      	mov	r3, r0
 80118ea:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118ec:	7ffb      	ldrb	r3, [r7, #31]
 80118ee:	3301      	adds	r3, #1
 80118f0:	77fb      	strb	r3, [r7, #31]
 80118f2:	7ffb      	ldrb	r3, [r7, #31]
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d9ed      	bls.n	80118d4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118f8:	8938      	ldrh	r0, [r7, #8]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	33f0      	adds	r3, #240	; 0xf0
 80118fe:	693a      	ldr	r2, [r7, #16]
 8011900:	4619      	mov	r1, r3
 8011902:	f001 f90b 	bl	8012b1c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011906:	4b20      	ldr	r3, [pc, #128]	; (8011988 <dhcp_discover+0x134>)
 8011908:	6818      	ldr	r0, [r3, #0]
 801190a:	4b20      	ldr	r3, [pc, #128]	; (801198c <dhcp_discover+0x138>)
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	2343      	movs	r3, #67	; 0x43
 8011914:	4a1e      	ldr	r2, [pc, #120]	; (8011990 <dhcp_discover+0x13c>)
 8011916:	6939      	ldr	r1, [r7, #16]
 8011918:	f7ff f878 	bl	8010a0c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801191c:	6938      	ldr	r0, [r7, #16]
 801191e:	f7f9 f8c1 	bl	800aaa4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	799b      	ldrb	r3, [r3, #6]
 8011926:	2bff      	cmp	r3, #255	; 0xff
 8011928:	d005      	beq.n	8011936 <dhcp_discover+0xe2>
    dhcp->tries++;
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	799b      	ldrb	r3, [r3, #6]
 801192e:	3301      	adds	r3, #1
 8011930:	b2da      	uxtb	r2, r3
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011936:	69bb      	ldr	r3, [r7, #24]
 8011938:	799b      	ldrb	r3, [r3, #6]
 801193a:	2b05      	cmp	r3, #5
 801193c:	d80d      	bhi.n	801195a <dhcp_discover+0x106>
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	799b      	ldrb	r3, [r3, #6]
 8011942:	461a      	mov	r2, r3
 8011944:	2301      	movs	r3, #1
 8011946:	4093      	lsls	r3, r2
 8011948:	b29b      	uxth	r3, r3
 801194a:	461a      	mov	r2, r3
 801194c:	0152      	lsls	r2, r2, #5
 801194e:	1ad2      	subs	r2, r2, r3
 8011950:	0092      	lsls	r2, r2, #2
 8011952:	4413      	add	r3, r2
 8011954:	00db      	lsls	r3, r3, #3
 8011956:	b29b      	uxth	r3, r3
 8011958:	e001      	b.n	801195e <dhcp_discover+0x10a>
 801195a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801195e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011960:	897b      	ldrh	r3, [r7, #10]
 8011962:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011966:	4a0b      	ldr	r2, [pc, #44]	; (8011994 <dhcp_discover+0x140>)
 8011968:	fb82 1203 	smull	r1, r2, r2, r3
 801196c:	1152      	asrs	r2, r2, #5
 801196e:	17db      	asrs	r3, r3, #31
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	b29a      	uxth	r2, r3
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801197c:	4618      	mov	r0, r3
 801197e:	3720      	adds	r7, #32
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}
 8011984:	2000001c 	.word	0x2000001c
 8011988:	20004a44 	.word	0x20004a44
 801198c:	08019248 	.word	0x08019248
 8011990:	0801924c 	.word	0x0801924c
 8011994:	10624dd3 	.word	0x10624dd3

08011998 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b088      	sub	sp, #32
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d107      	bne.n	80119b6 <dhcp_bind+0x1e>
 80119a6:	4b64      	ldr	r3, [pc, #400]	; (8011b38 <dhcp_bind+0x1a0>)
 80119a8:	f240 4215 	movw	r2, #1045	; 0x415
 80119ac:	4963      	ldr	r1, [pc, #396]	; (8011b3c <dhcp_bind+0x1a4>)
 80119ae:	4864      	ldr	r0, [pc, #400]	; (8011b40 <dhcp_bind+0x1a8>)
 80119b0:	f003 fd1c 	bl	80153ec <iprintf>
 80119b4:	e0bc      	b.n	8011b30 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6a1b      	ldr	r3, [r3, #32]
 80119ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d107      	bne.n	80119d2 <dhcp_bind+0x3a>
 80119c2:	4b5d      	ldr	r3, [pc, #372]	; (8011b38 <dhcp_bind+0x1a0>)
 80119c4:	f240 4217 	movw	r2, #1047	; 0x417
 80119c8:	495e      	ldr	r1, [pc, #376]	; (8011b44 <dhcp_bind+0x1ac>)
 80119ca:	485d      	ldr	r0, [pc, #372]	; (8011b40 <dhcp_bind+0x1a8>)
 80119cc:	f003 fd0e 	bl	80153ec <iprintf>
 80119d0:	e0ae      	b.n	8011b30 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	2200      	movs	r2, #0
 80119d6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119e0:	d019      	beq.n	8011a16 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e6:	331e      	adds	r3, #30
 80119e8:	4a57      	ldr	r2, [pc, #348]	; (8011b48 <dhcp_bind+0x1b0>)
 80119ea:	fba2 2303 	umull	r2, r3, r2, r3
 80119ee:	095b      	lsrs	r3, r3, #5
 80119f0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119f8:	d302      	bcc.n	8011a00 <dhcp_bind+0x68>
      timeout = 0xffff;
 80119fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119fe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	8a9b      	ldrh	r3, [r3, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d102      	bne.n	8011a16 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	2201      	movs	r2, #1
 8011a14:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a1e:	d01d      	beq.n	8011a5c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a24:	331e      	adds	r3, #30
 8011a26:	4a48      	ldr	r2, [pc, #288]	; (8011b48 <dhcp_bind+0x1b0>)
 8011a28:	fba2 2303 	umull	r2, r3, r2, r3
 8011a2c:	095b      	lsrs	r3, r3, #5
 8011a2e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a36:	d302      	bcc.n	8011a3e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a3c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	69bb      	ldr	r3, [r7, #24]
 8011a44:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	895b      	ldrh	r3, [r3, #10]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d102      	bne.n	8011a54 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	2201      	movs	r2, #1
 8011a52:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	895a      	ldrh	r2, [r3, #10]
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a64:	d01d      	beq.n	8011aa2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a6a:	331e      	adds	r3, #30
 8011a6c:	4a36      	ldr	r2, [pc, #216]	; (8011b48 <dhcp_bind+0x1b0>)
 8011a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a72:	095b      	lsrs	r3, r3, #5
 8011a74:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a7c:	d302      	bcc.n	8011a84 <dhcp_bind+0xec>
      timeout = 0xffff;
 8011a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a82:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	899b      	ldrh	r3, [r3, #12]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d102      	bne.n	8011a9a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	2201      	movs	r2, #1
 8011a98:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	899a      	ldrh	r2, [r3, #12]
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	895a      	ldrh	r2, [r3, #10]
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	899b      	ldrh	r3, [r3, #12]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d306      	bcc.n	8011abc <dhcp_bind+0x124>
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d002      	beq.n	8011abc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	79db      	ldrb	r3, [r3, #7]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	6a1b      	ldr	r3, [r3, #32]
 8011ac8:	613b      	str	r3, [r7, #16]
 8011aca:	e014      	b.n	8011af6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	331c      	adds	r3, #28
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	db02      	blt.n	8011ae2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011adc:	23ff      	movs	r3, #255	; 0xff
 8011ade:	613b      	str	r3, [r7, #16]
 8011ae0:	e009      	b.n	8011af6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011ae2:	7dfb      	ldrb	r3, [r7, #23]
 8011ae4:	2bbf      	cmp	r3, #191	; 0xbf
 8011ae6:	d903      	bls.n	8011af0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011ae8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011aec:	613b      	str	r3, [r7, #16]
 8011aee:	e002      	b.n	8011af6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011af4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d108      	bne.n	8011b14 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	69da      	ldr	r2, [r3, #28]
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	4013      	ands	r3, r2
 8011b0a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011b12:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011b14:	210a      	movs	r1, #10
 8011b16:	69b8      	ldr	r0, [r7, #24]
 8011b18:	f000 faa0 	bl	801205c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	f103 011c 	add.w	r1, r3, #28
 8011b22:	f107 030c 	add.w	r3, r7, #12
 8011b26:	f107 0210 	add.w	r2, r7, #16
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7f8 fb2a 	bl	800a184 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011b30:	3720      	adds	r7, #32
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	08018688 	.word	0x08018688
 8011b3c:	080187e8 	.word	0x080187e8
 8011b40:	080186e8 	.word	0x080186e8
 8011b44:	08018804 	.word	0x08018804
 8011b48:	88888889 	.word	0x88888889

08011b4c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08a      	sub	sp, #40	; 0x28
 8011b50:	af02      	add	r7, sp, #8
 8011b52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6a1b      	ldr	r3, [r3, #32]
 8011b58:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011b5a:	2105      	movs	r1, #5
 8011b5c:	69b8      	ldr	r0, [r7, #24]
 8011b5e:	f000 fa7d 	bl	801205c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011b62:	f107 030c 	add.w	r3, r7, #12
 8011b66:	2203      	movs	r2, #3
 8011b68:	69b9      	ldr	r1, [r7, #24]
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 ff00 	bl	8012970 <dhcp_create_msg>
 8011b70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d04e      	beq.n	8011c16 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011b7e:	89b8      	ldrh	r0, [r7, #12]
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b86:	2302      	movs	r3, #2
 8011b88:	2239      	movs	r2, #57	; 0x39
 8011b8a:	f000 fa81 	bl	8012090 <dhcp_option>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011b92:	89b8      	ldrh	r0, [r7, #12]
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	f000 fad0 	bl	8012144 <dhcp_option_short>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011ba8:	89b8      	ldrh	r0, [r7, #12]
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	2237      	movs	r2, #55	; 0x37
 8011bb4:	f000 fa6c 	bl	8012090 <dhcp_option>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	77bb      	strb	r3, [r7, #30]
 8011bc0:	e00e      	b.n	8011be0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011bc2:	89b8      	ldrh	r0, [r7, #12]
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bca:	7fbb      	ldrb	r3, [r7, #30]
 8011bcc:	4a2a      	ldr	r2, [pc, #168]	; (8011c78 <dhcp_renew+0x12c>)
 8011bce:	5cd3      	ldrb	r3, [r2, r3]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	f000 fa91 	bl	80120f8 <dhcp_option_byte>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011bda:	7fbb      	ldrb	r3, [r7, #30]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	77bb      	strb	r3, [r7, #30]
 8011be0:	7fbb      	ldrb	r3, [r7, #30]
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d9ed      	bls.n	8011bc2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011be6:	89b8      	ldrh	r0, [r7, #12]
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	33f0      	adds	r3, #240	; 0xf0
 8011bec:	697a      	ldr	r2, [r7, #20]
 8011bee:	4619      	mov	r1, r3
 8011bf0:	f000 ff94 	bl	8012b1c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011bf4:	4b21      	ldr	r3, [pc, #132]	; (8011c7c <dhcp_renew+0x130>)
 8011bf6:	6818      	ldr	r0, [r3, #0]
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	f103 0218 	add.w	r2, r3, #24
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	2343      	movs	r3, #67	; 0x43
 8011c04:	6979      	ldr	r1, [r7, #20]
 8011c06:	f7fe fe8d 	bl	8010924 <udp_sendto_if>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011c0e:	6978      	ldr	r0, [r7, #20]
 8011c10:	f7f8 ff48 	bl	800aaa4 <pbuf_free>
 8011c14:	e001      	b.n	8011c1a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011c16:	23ff      	movs	r3, #255	; 0xff
 8011c18:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	799b      	ldrb	r3, [r3, #6]
 8011c1e:	2bff      	cmp	r3, #255	; 0xff
 8011c20:	d005      	beq.n	8011c2e <dhcp_renew+0xe2>
    dhcp->tries++;
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	799b      	ldrb	r3, [r3, #6]
 8011c26:	3301      	adds	r3, #1
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	799b      	ldrb	r3, [r3, #6]
 8011c32:	2b09      	cmp	r3, #9
 8011c34:	d80a      	bhi.n	8011c4c <dhcp_renew+0x100>
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	799b      	ldrb	r3, [r3, #6]
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	0152      	lsls	r2, r2, #5
 8011c40:	1ad2      	subs	r2, r2, r3
 8011c42:	0092      	lsls	r2, r2, #2
 8011c44:	4413      	add	r3, r2
 8011c46:	011b      	lsls	r3, r3, #4
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	e001      	b.n	8011c50 <dhcp_renew+0x104>
 8011c4c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8011c50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011c52:	89fb      	ldrh	r3, [r7, #14]
 8011c54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011c58:	4a09      	ldr	r2, [pc, #36]	; (8011c80 <dhcp_renew+0x134>)
 8011c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8011c5e:	1152      	asrs	r2, r2, #5
 8011c60:	17db      	asrs	r3, r3, #31
 8011c62:	1ad3      	subs	r3, r2, r3
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3720      	adds	r7, #32
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	2000001c 	.word	0x2000001c
 8011c7c:	20004a44 	.word	0x20004a44
 8011c80:	10624dd3 	.word	0x10624dd3

08011c84 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b08a      	sub	sp, #40	; 0x28
 8011c88:	af02      	add	r7, sp, #8
 8011c8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6a1b      	ldr	r3, [r3, #32]
 8011c90:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011c92:	2104      	movs	r1, #4
 8011c94:	69b8      	ldr	r0, [r7, #24]
 8011c96:	f000 f9e1 	bl	801205c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011c9a:	f107 030c 	add.w	r3, r7, #12
 8011c9e:	2203      	movs	r2, #3
 8011ca0:	69b9      	ldr	r1, [r7, #24]
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 fe64 	bl	8012970 <dhcp_create_msg>
 8011ca8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d04c      	beq.n	8011d4a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011cb6:	89b8      	ldrh	r0, [r7, #12]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cbe:	2302      	movs	r3, #2
 8011cc0:	2239      	movs	r2, #57	; 0x39
 8011cc2:	f000 f9e5 	bl	8012090 <dhcp_option>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011cca:	89b8      	ldrh	r0, [r7, #12]
 8011ccc:	693b      	ldr	r3, [r7, #16]
 8011cce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f000 fa34 	bl	8012144 <dhcp_option_short>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011ce0:	89b8      	ldrh	r0, [r7, #12]
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ce8:	2303      	movs	r3, #3
 8011cea:	2237      	movs	r2, #55	; 0x37
 8011cec:	f000 f9d0 	bl	8012090 <dhcp_option>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	77bb      	strb	r3, [r7, #30]
 8011cf8:	e00e      	b.n	8011d18 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011cfa:	89b8      	ldrh	r0, [r7, #12]
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d02:	7fbb      	ldrb	r3, [r7, #30]
 8011d04:	4a29      	ldr	r2, [pc, #164]	; (8011dac <dhcp_rebind+0x128>)
 8011d06:	5cd3      	ldrb	r3, [r2, r3]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	f000 f9f5 	bl	80120f8 <dhcp_option_byte>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d12:	7fbb      	ldrb	r3, [r7, #30]
 8011d14:	3301      	adds	r3, #1
 8011d16:	77bb      	strb	r3, [r7, #30]
 8011d18:	7fbb      	ldrb	r3, [r7, #30]
 8011d1a:	2b02      	cmp	r3, #2
 8011d1c:	d9ed      	bls.n	8011cfa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d1e:	89b8      	ldrh	r0, [r7, #12]
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	33f0      	adds	r3, #240	; 0xf0
 8011d24:	697a      	ldr	r2, [r7, #20]
 8011d26:	4619      	mov	r1, r3
 8011d28:	f000 fef8 	bl	8012b1c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011d2c:	4b20      	ldr	r3, [pc, #128]	; (8011db0 <dhcp_rebind+0x12c>)
 8011d2e:	6818      	ldr	r0, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	2343      	movs	r3, #67	; 0x43
 8011d36:	4a1f      	ldr	r2, [pc, #124]	; (8011db4 <dhcp_rebind+0x130>)
 8011d38:	6979      	ldr	r1, [r7, #20]
 8011d3a:	f7fe fdf3 	bl	8010924 <udp_sendto_if>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011d42:	6978      	ldr	r0, [r7, #20]
 8011d44:	f7f8 feae 	bl	800aaa4 <pbuf_free>
 8011d48:	e001      	b.n	8011d4e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011d4a:	23ff      	movs	r3, #255	; 0xff
 8011d4c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	799b      	ldrb	r3, [r3, #6]
 8011d52:	2bff      	cmp	r3, #255	; 0xff
 8011d54:	d005      	beq.n	8011d62 <dhcp_rebind+0xde>
    dhcp->tries++;
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	799b      	ldrb	r3, [r3, #6]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	799b      	ldrb	r3, [r3, #6]
 8011d66:	2b09      	cmp	r3, #9
 8011d68:	d80a      	bhi.n	8011d80 <dhcp_rebind+0xfc>
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	799b      	ldrb	r3, [r3, #6]
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	461a      	mov	r2, r3
 8011d72:	0152      	lsls	r2, r2, #5
 8011d74:	1ad2      	subs	r2, r2, r3
 8011d76:	0092      	lsls	r2, r2, #2
 8011d78:	4413      	add	r3, r2
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	e001      	b.n	8011d84 <dhcp_rebind+0x100>
 8011d80:	f242 7310 	movw	r3, #10000	; 0x2710
 8011d84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011d86:	89fb      	ldrh	r3, [r7, #14]
 8011d88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011d8c:	4a0a      	ldr	r2, [pc, #40]	; (8011db8 <dhcp_rebind+0x134>)
 8011d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8011d92:	1152      	asrs	r2, r2, #5
 8011d94:	17db      	asrs	r3, r3, #31
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	69bb      	ldr	r3, [r7, #24]
 8011d9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3720      	adds	r7, #32
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	2000001c 	.word	0x2000001c
 8011db0:	20004a44 	.word	0x20004a44
 8011db4:	0801924c 	.word	0x0801924c
 8011db8:	10624dd3 	.word	0x10624dd3

08011dbc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011dbc:	b5b0      	push	{r4, r5, r7, lr}
 8011dbe:	b08a      	sub	sp, #40	; 0x28
 8011dc0:	af02      	add	r7, sp, #8
 8011dc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a1b      	ldr	r3, [r3, #32]
 8011dc8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011dca:	2103      	movs	r1, #3
 8011dcc:	69b8      	ldr	r0, [r7, #24]
 8011dce:	f000 f945 	bl	801205c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011dd2:	f107 030c 	add.w	r3, r7, #12
 8011dd6:	2203      	movs	r2, #3
 8011dd8:	69b9      	ldr	r1, [r7, #24]
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 fdc8 	bl	8012970 <dhcp_create_msg>
 8011de0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d066      	beq.n	8011eb6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011dee:	89b8      	ldrh	r0, [r7, #12]
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011df6:	2302      	movs	r3, #2
 8011df8:	2239      	movs	r2, #57	; 0x39
 8011dfa:	f000 f949 	bl	8012090 <dhcp_option>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011e02:	89b8      	ldrh	r0, [r7, #12]
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	33f0      	adds	r3, #240	; 0xf0
 8011e08:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	f000 f999 	bl	8012144 <dhcp_option_short>
 8011e12:	4603      	mov	r3, r0
 8011e14:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011e16:	89b8      	ldrh	r0, [r7, #12]
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e1e:	2304      	movs	r3, #4
 8011e20:	2232      	movs	r2, #50	; 0x32
 8011e22:	f000 f935 	bl	8012090 <dhcp_option>
 8011e26:	4603      	mov	r3, r0
 8011e28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011e2a:	89bc      	ldrh	r4, [r7, #12]
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	69db      	ldr	r3, [r3, #28]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f7 fb13 	bl	8009462 <lwip_htonl>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	461a      	mov	r2, r3
 8011e40:	4629      	mov	r1, r5
 8011e42:	4620      	mov	r0, r4
 8011e44:	f000 f9b0 	bl	80121a8 <dhcp_option_long>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011e4c:	89b8      	ldrh	r0, [r7, #12]
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e54:	2303      	movs	r3, #3
 8011e56:	2237      	movs	r2, #55	; 0x37
 8011e58:	f000 f91a 	bl	8012090 <dhcp_option>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011e60:	2300      	movs	r3, #0
 8011e62:	77bb      	strb	r3, [r7, #30]
 8011e64:	e00e      	b.n	8011e84 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011e66:	89b8      	ldrh	r0, [r7, #12]
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e6e:	7fbb      	ldrb	r3, [r7, #30]
 8011e70:	4a29      	ldr	r2, [pc, #164]	; (8011f18 <dhcp_reboot+0x15c>)
 8011e72:	5cd3      	ldrb	r3, [r2, r3]
 8011e74:	461a      	mov	r2, r3
 8011e76:	f000 f93f 	bl	80120f8 <dhcp_option_byte>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011e7e:	7fbb      	ldrb	r3, [r7, #30]
 8011e80:	3301      	adds	r3, #1
 8011e82:	77bb      	strb	r3, [r7, #30]
 8011e84:	7fbb      	ldrb	r3, [r7, #30]
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d9ed      	bls.n	8011e66 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011e8a:	89b8      	ldrh	r0, [r7, #12]
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	33f0      	adds	r3, #240	; 0xf0
 8011e90:	697a      	ldr	r2, [r7, #20]
 8011e92:	4619      	mov	r1, r3
 8011e94:	f000 fe42 	bl	8012b1c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011e98:	4b20      	ldr	r3, [pc, #128]	; (8011f1c <dhcp_reboot+0x160>)
 8011e9a:	6818      	ldr	r0, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	2343      	movs	r3, #67	; 0x43
 8011ea2:	4a1f      	ldr	r2, [pc, #124]	; (8011f20 <dhcp_reboot+0x164>)
 8011ea4:	6979      	ldr	r1, [r7, #20]
 8011ea6:	f7fe fd3d 	bl	8010924 <udp_sendto_if>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011eae:	6978      	ldr	r0, [r7, #20]
 8011eb0:	f7f8 fdf8 	bl	800aaa4 <pbuf_free>
 8011eb4:	e001      	b.n	8011eba <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011eb6:	23ff      	movs	r3, #255	; 0xff
 8011eb8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	799b      	ldrb	r3, [r3, #6]
 8011ebe:	2bff      	cmp	r3, #255	; 0xff
 8011ec0:	d005      	beq.n	8011ece <dhcp_reboot+0x112>
    dhcp->tries++;
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	799b      	ldrb	r3, [r3, #6]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	799b      	ldrb	r3, [r3, #6]
 8011ed2:	2b09      	cmp	r3, #9
 8011ed4:	d80a      	bhi.n	8011eec <dhcp_reboot+0x130>
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	799b      	ldrb	r3, [r3, #6]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	461a      	mov	r2, r3
 8011ede:	0152      	lsls	r2, r2, #5
 8011ee0:	1ad2      	subs	r2, r2, r3
 8011ee2:	0092      	lsls	r2, r2, #2
 8011ee4:	4413      	add	r3, r2
 8011ee6:	00db      	lsls	r3, r3, #3
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	e001      	b.n	8011ef0 <dhcp_reboot+0x134>
 8011eec:	f242 7310 	movw	r3, #10000	; 0x2710
 8011ef0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ef2:	89fb      	ldrh	r3, [r7, #14]
 8011ef4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ef8:	4a0a      	ldr	r2, [pc, #40]	; (8011f24 <dhcp_reboot+0x168>)
 8011efa:	fb82 1203 	smull	r1, r2, r2, r3
 8011efe:	1152      	asrs	r2, r2, #5
 8011f00:	17db      	asrs	r3, r3, #31
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3720      	adds	r7, #32
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bdb0      	pop	{r4, r5, r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2000001c 	.word	0x2000001c
 8011f1c:	20004a44 	.word	0x20004a44
 8011f20:	0801924c 	.word	0x0801924c
 8011f24:	10624dd3 	.word	0x10624dd3

08011f28 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011f28:	b5b0      	push	{r4, r5, r7, lr}
 8011f2a:	b08a      	sub	sp, #40	; 0x28
 8011f2c:	af02      	add	r7, sp, #8
 8011f2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a1b      	ldr	r3, [r3, #32]
 8011f34:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	f000 8084 	beq.w	8012046 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	795b      	ldrb	r3, [r3, #5]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8081 	beq.w	801204a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	699b      	ldr	r3, [r3, #24]
 8011f4c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	2200      	movs	r2, #0
 8011f52:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	2200      	movs	r2, #0
 8011f58:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	2200      	movs	r2, #0
 8011f64:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011f66:	69fb      	ldr	r3, [r7, #28]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	829a      	strh	r2, [r3, #20]
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	8a9a      	ldrh	r2, [r3, #20]
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	825a      	strh	r2, [r3, #18]
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	8a5a      	ldrh	r2, [r3, #18]
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	821a      	strh	r2, [r3, #16]
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	8a1a      	ldrh	r2, [r3, #16]
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fdec 	bl	8012b78 <dhcp_supplied_address>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d03b      	beq.n	801201e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011fa6:	f107 030e 	add.w	r3, r7, #14
 8011faa:	2207      	movs	r2, #7
 8011fac:	69f9      	ldr	r1, [r7, #28]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fcde 	bl	8012970 <dhcp_create_msg>
 8011fb4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d030      	beq.n	801201e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011fc2:	89f8      	ldrh	r0, [r7, #14]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fca:	2304      	movs	r3, #4
 8011fcc:	2236      	movs	r2, #54	; 0x36
 8011fce:	f000 f85f 	bl	8012090 <dhcp_option>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011fd6:	89fc      	ldrh	r4, [r7, #14]
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f7 fa3e 	bl	8009462 <lwip_htonl>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	461a      	mov	r2, r3
 8011fea:	4629      	mov	r1, r5
 8011fec:	4620      	mov	r0, r4
 8011fee:	f000 f8db 	bl	80121a8 <dhcp_option_long>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011ff6:	89f8      	ldrh	r0, [r7, #14]
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	33f0      	adds	r3, #240	; 0xf0
 8011ffc:	69ba      	ldr	r2, [r7, #24]
 8011ffe:	4619      	mov	r1, r3
 8012000:	f000 fd8c 	bl	8012b1c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012004:	4b13      	ldr	r3, [pc, #76]	; (8012054 <dhcp_release_and_stop+0x12c>)
 8012006:	6818      	ldr	r0, [r3, #0]
 8012008:	f107 0210 	add.w	r2, r7, #16
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	9300      	str	r3, [sp, #0]
 8012010:	2343      	movs	r3, #67	; 0x43
 8012012:	69b9      	ldr	r1, [r7, #24]
 8012014:	f7fe fc86 	bl	8010924 <udp_sendto_if>
      pbuf_free(p_out);
 8012018:	69b8      	ldr	r0, [r7, #24]
 801201a:	f7f8 fd43 	bl	800aaa4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801201e:	4b0e      	ldr	r3, [pc, #56]	; (8012058 <dhcp_release_and_stop+0x130>)
 8012020:	4a0d      	ldr	r2, [pc, #52]	; (8012058 <dhcp_release_and_stop+0x130>)
 8012022:	490d      	ldr	r1, [pc, #52]	; (8012058 <dhcp_release_and_stop+0x130>)
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7f8 f8ad 	bl	800a184 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801202a:	2100      	movs	r1, #0
 801202c:	69f8      	ldr	r0, [r7, #28]
 801202e:	f000 f815 	bl	801205c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	791b      	ldrb	r3, [r3, #4]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d008      	beq.n	801204c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801203a:	f7fe ffbf 	bl	8010fbc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	2200      	movs	r2, #0
 8012042:	711a      	strb	r2, [r3, #4]
 8012044:	e002      	b.n	801204c <dhcp_release_and_stop+0x124>
    return;
 8012046:	bf00      	nop
 8012048:	e000      	b.n	801204c <dhcp_release_and_stop+0x124>
    return;
 801204a:	bf00      	nop
  }
}
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bdb0      	pop	{r4, r5, r7, pc}
 8012052:	bf00      	nop
 8012054:	20004a44 	.word	0x20004a44
 8012058:	08019248 	.word	0x08019248

0801205c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	460b      	mov	r3, r1
 8012066:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	795b      	ldrb	r3, [r3, #5]
 801206c:	78fa      	ldrb	r2, [r7, #3]
 801206e:	429a      	cmp	r2, r3
 8012070:	d008      	beq.n	8012084 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	78fa      	ldrb	r2, [r7, #3]
 8012076:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	811a      	strh	r2, [r3, #8]
  }
}
 8012084:	bf00      	nop
 8012086:	370c      	adds	r7, #12
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6039      	str	r1, [r7, #0]
 8012098:	4611      	mov	r1, r2
 801209a:	461a      	mov	r2, r3
 801209c:	4603      	mov	r3, r0
 801209e:	80fb      	strh	r3, [r7, #6]
 80120a0:	460b      	mov	r3, r1
 80120a2:	717b      	strb	r3, [r7, #5]
 80120a4:	4613      	mov	r3, r2
 80120a6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80120a8:	88fa      	ldrh	r2, [r7, #6]
 80120aa:	793b      	ldrb	r3, [r7, #4]
 80120ac:	4413      	add	r3, r2
 80120ae:	3302      	adds	r3, #2
 80120b0:	2b44      	cmp	r3, #68	; 0x44
 80120b2:	d906      	bls.n	80120c2 <dhcp_option+0x32>
 80120b4:	4b0d      	ldr	r3, [pc, #52]	; (80120ec <dhcp_option+0x5c>)
 80120b6:	f240 529a 	movw	r2, #1434	; 0x59a
 80120ba:	490d      	ldr	r1, [pc, #52]	; (80120f0 <dhcp_option+0x60>)
 80120bc:	480d      	ldr	r0, [pc, #52]	; (80120f4 <dhcp_option+0x64>)
 80120be:	f003 f995 	bl	80153ec <iprintf>
  options[options_out_len++] = option_type;
 80120c2:	88fb      	ldrh	r3, [r7, #6]
 80120c4:	1c5a      	adds	r2, r3, #1
 80120c6:	80fa      	strh	r2, [r7, #6]
 80120c8:	461a      	mov	r2, r3
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	4413      	add	r3, r2
 80120ce:	797a      	ldrb	r2, [r7, #5]
 80120d0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80120d2:	88fb      	ldrh	r3, [r7, #6]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	80fa      	strh	r2, [r7, #6]
 80120d8:	461a      	mov	r2, r3
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	4413      	add	r3, r2
 80120de:	793a      	ldrb	r2, [r7, #4]
 80120e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80120e2:	88fb      	ldrh	r3, [r7, #6]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	08018688 	.word	0x08018688
 80120f0:	0801881c 	.word	0x0801881c
 80120f4:	080186e8 	.word	0x080186e8

080120f8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	4603      	mov	r3, r0
 8012100:	6039      	str	r1, [r7, #0]
 8012102:	80fb      	strh	r3, [r7, #6]
 8012104:	4613      	mov	r3, r2
 8012106:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012108:	88fb      	ldrh	r3, [r7, #6]
 801210a:	2b43      	cmp	r3, #67	; 0x43
 801210c:	d906      	bls.n	801211c <dhcp_option_byte+0x24>
 801210e:	4b0a      	ldr	r3, [pc, #40]	; (8012138 <dhcp_option_byte+0x40>)
 8012110:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8012114:	4909      	ldr	r1, [pc, #36]	; (801213c <dhcp_option_byte+0x44>)
 8012116:	480a      	ldr	r0, [pc, #40]	; (8012140 <dhcp_option_byte+0x48>)
 8012118:	f003 f968 	bl	80153ec <iprintf>
  options[options_out_len++] = value;
 801211c:	88fb      	ldrh	r3, [r7, #6]
 801211e:	1c5a      	adds	r2, r3, #1
 8012120:	80fa      	strh	r2, [r7, #6]
 8012122:	461a      	mov	r2, r3
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	4413      	add	r3, r2
 8012128:	797a      	ldrb	r2, [r7, #5]
 801212a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801212c:	88fb      	ldrh	r3, [r7, #6]
}
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	08018688 	.word	0x08018688
 801213c:	08018860 	.word	0x08018860
 8012140:	080186e8 	.word	0x080186e8

08012144 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	4603      	mov	r3, r0
 801214c:	6039      	str	r1, [r7, #0]
 801214e:	80fb      	strh	r3, [r7, #6]
 8012150:	4613      	mov	r3, r2
 8012152:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012154:	88fb      	ldrh	r3, [r7, #6]
 8012156:	3302      	adds	r3, #2
 8012158:	2b44      	cmp	r3, #68	; 0x44
 801215a:	d906      	bls.n	801216a <dhcp_option_short+0x26>
 801215c:	4b0f      	ldr	r3, [pc, #60]	; (801219c <dhcp_option_short+0x58>)
 801215e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012162:	490f      	ldr	r1, [pc, #60]	; (80121a0 <dhcp_option_short+0x5c>)
 8012164:	480f      	ldr	r0, [pc, #60]	; (80121a4 <dhcp_option_short+0x60>)
 8012166:	f003 f941 	bl	80153ec <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801216a:	88bb      	ldrh	r3, [r7, #4]
 801216c:	0a1b      	lsrs	r3, r3, #8
 801216e:	b29a      	uxth	r2, r3
 8012170:	88fb      	ldrh	r3, [r7, #6]
 8012172:	1c59      	adds	r1, r3, #1
 8012174:	80f9      	strh	r1, [r7, #6]
 8012176:	4619      	mov	r1, r3
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	440b      	add	r3, r1
 801217c:	b2d2      	uxtb	r2, r2
 801217e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012180:	88fb      	ldrh	r3, [r7, #6]
 8012182:	1c5a      	adds	r2, r3, #1
 8012184:	80fa      	strh	r2, [r7, #6]
 8012186:	461a      	mov	r2, r3
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	4413      	add	r3, r2
 801218c:	88ba      	ldrh	r2, [r7, #4]
 801218e:	b2d2      	uxtb	r2, r2
 8012190:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012192:	88fb      	ldrh	r3, [r7, #6]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	08018688 	.word	0x08018688
 80121a0:	08018898 	.word	0x08018898
 80121a4:	080186e8 	.word	0x080186e8

080121a8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	4603      	mov	r3, r0
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
 80121b4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80121b6:	89fb      	ldrh	r3, [r7, #14]
 80121b8:	3304      	adds	r3, #4
 80121ba:	2b44      	cmp	r3, #68	; 0x44
 80121bc:	d906      	bls.n	80121cc <dhcp_option_long+0x24>
 80121be:	4b19      	ldr	r3, [pc, #100]	; (8012224 <dhcp_option_long+0x7c>)
 80121c0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80121c4:	4918      	ldr	r1, [pc, #96]	; (8012228 <dhcp_option_long+0x80>)
 80121c6:	4819      	ldr	r0, [pc, #100]	; (801222c <dhcp_option_long+0x84>)
 80121c8:	f003 f910 	bl	80153ec <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	0e1a      	lsrs	r2, r3, #24
 80121d0:	89fb      	ldrh	r3, [r7, #14]
 80121d2:	1c59      	adds	r1, r3, #1
 80121d4:	81f9      	strh	r1, [r7, #14]
 80121d6:	4619      	mov	r1, r3
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	440b      	add	r3, r1
 80121dc:	b2d2      	uxtb	r2, r2
 80121de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	0c1a      	lsrs	r2, r3, #16
 80121e4:	89fb      	ldrh	r3, [r7, #14]
 80121e6:	1c59      	adds	r1, r3, #1
 80121e8:	81f9      	strh	r1, [r7, #14]
 80121ea:	4619      	mov	r1, r3
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	440b      	add	r3, r1
 80121f0:	b2d2      	uxtb	r2, r2
 80121f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	0a1a      	lsrs	r2, r3, #8
 80121f8:	89fb      	ldrh	r3, [r7, #14]
 80121fa:	1c59      	adds	r1, r3, #1
 80121fc:	81f9      	strh	r1, [r7, #14]
 80121fe:	4619      	mov	r1, r3
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	440b      	add	r3, r1
 8012204:	b2d2      	uxtb	r2, r2
 8012206:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012208:	89fb      	ldrh	r3, [r7, #14]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	81fa      	strh	r2, [r7, #14]
 801220e:	461a      	mov	r2, r3
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	4413      	add	r3, r2
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	b2d2      	uxtb	r2, r2
 8012218:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801221a:	89fb      	ldrh	r3, [r7, #14]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	08018688 	.word	0x08018688
 8012228:	080188d4 	.word	0x080188d4
 801222c:	080186e8 	.word	0x080186e8

08012230 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b090      	sub	sp, #64	; 0x40
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801223a:	2300      	movs	r3, #0
 801223c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012242:	2208      	movs	r2, #8
 8012244:	2100      	movs	r1, #0
 8012246:	48be      	ldr	r0, [pc, #760]	; (8012540 <dhcp_parse_reply+0x310>)
 8012248:	f003 f8c8 	bl	80153dc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	895b      	ldrh	r3, [r3, #10]
 8012250:	2b2b      	cmp	r3, #43	; 0x2b
 8012252:	d802      	bhi.n	801225a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012254:	f06f 0301 	mvn.w	r3, #1
 8012258:	e2a8      	b.n	80127ac <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012260:	23f0      	movs	r3, #240	; 0xf0
 8012262:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	891b      	ldrh	r3, [r3, #8]
 8012268:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801226e:	e00c      	b.n	801228a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	895b      	ldrh	r3, [r3, #10]
 8012274:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012276:	1ad3      	subs	r3, r2, r3
 8012278:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227c:	895b      	ldrh	r3, [r3, #10]
 801227e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228c:	2b00      	cmp	r3, #0
 801228e:	d004      	beq.n	801229a <dhcp_parse_reply+0x6a>
 8012290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012292:	895b      	ldrh	r3, [r3, #10]
 8012294:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012296:	429a      	cmp	r2, r3
 8012298:	d2ea      	bcs.n	8012270 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80122a0:	f06f 0301 	mvn.w	r3, #1
 80122a4:	e282      	b.n	80127ac <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80122a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80122a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80122aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122ac:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80122b4:	e23a      	b.n	801272c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80122b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122ba:	4413      	add	r3, r2
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80122c0:	2300      	movs	r3, #0
 80122c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80122c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122ca:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80122cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122ce:	3302      	adds	r3, #2
 80122d0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80122d2:	8bfa      	ldrh	r2, [r7, #30]
 80122d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d202      	bcs.n	80122e0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80122da:	f06f 0301 	mvn.w	r3, #1
 80122de:	e265      	b.n	80127ac <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80122e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122e2:	3301      	adds	r3, #1
 80122e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122e6:	8952      	ldrh	r2, [r2, #10]
 80122e8:	4293      	cmp	r3, r2
 80122ea:	da07      	bge.n	80122fc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80122ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122ee:	3301      	adds	r3, #1
 80122f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122f2:	4413      	add	r3, r2
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122fa:	e00b      	b.n	8012314 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80122fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d004      	beq.n	801230e <dhcp_parse_reply+0xde>
 8012304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	e000      	b.n	8012310 <dhcp_parse_reply+0xe0>
 801230e:	2300      	movs	r3, #0
 8012310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801231c:	7dfb      	ldrb	r3, [r7, #23]
 801231e:	2b3b      	cmp	r3, #59	; 0x3b
 8012320:	f200 812d 	bhi.w	801257e <dhcp_parse_reply+0x34e>
 8012324:	a201      	add	r2, pc, #4	; (adr r2, 801232c <dhcp_parse_reply+0xfc>)
 8012326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801232a:	bf00      	nop
 801232c:	0801241d 	.word	0x0801241d
 8012330:	0801242d 	.word	0x0801242d
 8012334:	0801257f 	.word	0x0801257f
 8012338:	0801244f 	.word	0x0801244f
 801233c:	0801257f 	.word	0x0801257f
 8012340:	0801257f 	.word	0x0801257f
 8012344:	0801257f 	.word	0x0801257f
 8012348:	0801257f 	.word	0x0801257f
 801234c:	0801257f 	.word	0x0801257f
 8012350:	0801257f 	.word	0x0801257f
 8012354:	0801257f 	.word	0x0801257f
 8012358:	0801257f 	.word	0x0801257f
 801235c:	0801257f 	.word	0x0801257f
 8012360:	0801257f 	.word	0x0801257f
 8012364:	0801257f 	.word	0x0801257f
 8012368:	0801257f 	.word	0x0801257f
 801236c:	0801257f 	.word	0x0801257f
 8012370:	0801257f 	.word	0x0801257f
 8012374:	0801257f 	.word	0x0801257f
 8012378:	0801257f 	.word	0x0801257f
 801237c:	0801257f 	.word	0x0801257f
 8012380:	0801257f 	.word	0x0801257f
 8012384:	0801257f 	.word	0x0801257f
 8012388:	0801257f 	.word	0x0801257f
 801238c:	0801257f 	.word	0x0801257f
 8012390:	0801257f 	.word	0x0801257f
 8012394:	0801257f 	.word	0x0801257f
 8012398:	0801257f 	.word	0x0801257f
 801239c:	0801257f 	.word	0x0801257f
 80123a0:	0801257f 	.word	0x0801257f
 80123a4:	0801257f 	.word	0x0801257f
 80123a8:	0801257f 	.word	0x0801257f
 80123ac:	0801257f 	.word	0x0801257f
 80123b0:	0801257f 	.word	0x0801257f
 80123b4:	0801257f 	.word	0x0801257f
 80123b8:	0801257f 	.word	0x0801257f
 80123bc:	0801257f 	.word	0x0801257f
 80123c0:	0801257f 	.word	0x0801257f
 80123c4:	0801257f 	.word	0x0801257f
 80123c8:	0801257f 	.word	0x0801257f
 80123cc:	0801257f 	.word	0x0801257f
 80123d0:	0801257f 	.word	0x0801257f
 80123d4:	0801257f 	.word	0x0801257f
 80123d8:	0801257f 	.word	0x0801257f
 80123dc:	0801257f 	.word	0x0801257f
 80123e0:	0801257f 	.word	0x0801257f
 80123e4:	0801257f 	.word	0x0801257f
 80123e8:	0801257f 	.word	0x0801257f
 80123ec:	0801257f 	.word	0x0801257f
 80123f0:	0801257f 	.word	0x0801257f
 80123f4:	0801257f 	.word	0x0801257f
 80123f8:	0801247b 	.word	0x0801247b
 80123fc:	0801249d 	.word	0x0801249d
 8012400:	080124d9 	.word	0x080124d9
 8012404:	080124fb 	.word	0x080124fb
 8012408:	0801257f 	.word	0x0801257f
 801240c:	0801257f 	.word	0x0801257f
 8012410:	0801257f 	.word	0x0801257f
 8012414:	0801251d 	.word	0x0801251d
 8012418:	0801255d 	.word	0x0801255d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012426:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801242a:	e0ac      	b.n	8012586 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801242c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012430:	2b04      	cmp	r3, #4
 8012432:	d009      	beq.n	8012448 <dhcp_parse_reply+0x218>
 8012434:	4b43      	ldr	r3, [pc, #268]	; (8012544 <dhcp_parse_reply+0x314>)
 8012436:	f240 622e 	movw	r2, #1582	; 0x62e
 801243a:	4943      	ldr	r1, [pc, #268]	; (8012548 <dhcp_parse_reply+0x318>)
 801243c:	4843      	ldr	r0, [pc, #268]	; (801254c <dhcp_parse_reply+0x31c>)
 801243e:	f002 ffd5 	bl	80153ec <iprintf>
 8012442:	f06f 0305 	mvn.w	r3, #5
 8012446:	e1b1      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012448:	2306      	movs	r3, #6
 801244a:	623b      	str	r3, [r7, #32]
        break;
 801244c:	e09b      	b.n	8012586 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801244e:	2304      	movs	r3, #4
 8012450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012454:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801245c:	429a      	cmp	r2, r3
 801245e:	d209      	bcs.n	8012474 <dhcp_parse_reply+0x244>
 8012460:	4b38      	ldr	r3, [pc, #224]	; (8012544 <dhcp_parse_reply+0x314>)
 8012462:	f240 6233 	movw	r2, #1587	; 0x633
 8012466:	493a      	ldr	r1, [pc, #232]	; (8012550 <dhcp_parse_reply+0x320>)
 8012468:	4838      	ldr	r0, [pc, #224]	; (801254c <dhcp_parse_reply+0x31c>)
 801246a:	f002 ffbf 	bl	80153ec <iprintf>
 801246e:	f06f 0305 	mvn.w	r3, #5
 8012472:	e19b      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012474:	2307      	movs	r3, #7
 8012476:	623b      	str	r3, [r7, #32]
        break;
 8012478:	e085      	b.n	8012586 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801247a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801247e:	2b04      	cmp	r3, #4
 8012480:	d009      	beq.n	8012496 <dhcp_parse_reply+0x266>
 8012482:	4b30      	ldr	r3, [pc, #192]	; (8012544 <dhcp_parse_reply+0x314>)
 8012484:	f240 6241 	movw	r2, #1601	; 0x641
 8012488:	492f      	ldr	r1, [pc, #188]	; (8012548 <dhcp_parse_reply+0x318>)
 801248a:	4830      	ldr	r0, [pc, #192]	; (801254c <dhcp_parse_reply+0x31c>)
 801248c:	f002 ffae 	bl	80153ec <iprintf>
 8012490:	f06f 0305 	mvn.w	r3, #5
 8012494:	e18a      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012496:	2303      	movs	r3, #3
 8012498:	623b      	str	r3, [r7, #32]
        break;
 801249a:	e074      	b.n	8012586 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801249c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	d009      	beq.n	80124b8 <dhcp_parse_reply+0x288>
 80124a4:	4b27      	ldr	r3, [pc, #156]	; (8012544 <dhcp_parse_reply+0x314>)
 80124a6:	f240 624f 	movw	r2, #1615	; 0x64f
 80124aa:	492a      	ldr	r1, [pc, #168]	; (8012554 <dhcp_parse_reply+0x324>)
 80124ac:	4827      	ldr	r0, [pc, #156]	; (801254c <dhcp_parse_reply+0x31c>)
 80124ae:	f002 ff9d 	bl	80153ec <iprintf>
 80124b2:	f06f 0305 	mvn.w	r3, #5
 80124b6:	e179      	b.n	80127ac <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80124b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80124ba:	2bf0      	cmp	r3, #240	; 0xf0
 80124bc:	d009      	beq.n	80124d2 <dhcp_parse_reply+0x2a2>
 80124be:	4b21      	ldr	r3, [pc, #132]	; (8012544 <dhcp_parse_reply+0x314>)
 80124c0:	f240 6251 	movw	r2, #1617	; 0x651
 80124c4:	4924      	ldr	r1, [pc, #144]	; (8012558 <dhcp_parse_reply+0x328>)
 80124c6:	4821      	ldr	r0, [pc, #132]	; (801254c <dhcp_parse_reply+0x31c>)
 80124c8:	f002 ff90 	bl	80153ec <iprintf>
 80124cc:	f06f 0305 	mvn.w	r3, #5
 80124d0:	e16c      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80124d2:	2300      	movs	r3, #0
 80124d4:	623b      	str	r3, [r7, #32]
        break;
 80124d6:	e056      	b.n	8012586 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80124d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d009      	beq.n	80124f4 <dhcp_parse_reply+0x2c4>
 80124e0:	4b18      	ldr	r3, [pc, #96]	; (8012544 <dhcp_parse_reply+0x314>)
 80124e2:	f240 6255 	movw	r2, #1621	; 0x655
 80124e6:	491b      	ldr	r1, [pc, #108]	; (8012554 <dhcp_parse_reply+0x324>)
 80124e8:	4818      	ldr	r0, [pc, #96]	; (801254c <dhcp_parse_reply+0x31c>)
 80124ea:	f002 ff7f 	bl	80153ec <iprintf>
 80124ee:	f06f 0305 	mvn.w	r3, #5
 80124f2:	e15b      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80124f4:	2301      	movs	r3, #1
 80124f6:	623b      	str	r3, [r7, #32]
        break;
 80124f8:	e045      	b.n	8012586 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80124fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124fe:	2b04      	cmp	r3, #4
 8012500:	d009      	beq.n	8012516 <dhcp_parse_reply+0x2e6>
 8012502:	4b10      	ldr	r3, [pc, #64]	; (8012544 <dhcp_parse_reply+0x314>)
 8012504:	f240 6259 	movw	r2, #1625	; 0x659
 8012508:	490f      	ldr	r1, [pc, #60]	; (8012548 <dhcp_parse_reply+0x318>)
 801250a:	4810      	ldr	r0, [pc, #64]	; (801254c <dhcp_parse_reply+0x31c>)
 801250c:	f002 ff6e 	bl	80153ec <iprintf>
 8012510:	f06f 0305 	mvn.w	r3, #5
 8012514:	e14a      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012516:	2302      	movs	r3, #2
 8012518:	623b      	str	r3, [r7, #32]
        break;
 801251a:	e034      	b.n	8012586 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801251c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012520:	2b04      	cmp	r3, #4
 8012522:	d009      	beq.n	8012538 <dhcp_parse_reply+0x308>
 8012524:	4b07      	ldr	r3, [pc, #28]	; (8012544 <dhcp_parse_reply+0x314>)
 8012526:	f240 625d 	movw	r2, #1629	; 0x65d
 801252a:	4907      	ldr	r1, [pc, #28]	; (8012548 <dhcp_parse_reply+0x318>)
 801252c:	4807      	ldr	r0, [pc, #28]	; (801254c <dhcp_parse_reply+0x31c>)
 801252e:	f002 ff5d 	bl	80153ec <iprintf>
 8012532:	f06f 0305 	mvn.w	r3, #5
 8012536:	e139      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012538:	2304      	movs	r3, #4
 801253a:	623b      	str	r3, [r7, #32]
        break;
 801253c:	e023      	b.n	8012586 <dhcp_parse_reply+0x356>
 801253e:	bf00      	nop
 8012540:	2000b8dc 	.word	0x2000b8dc
 8012544:	08018688 	.word	0x08018688
 8012548:	08018910 	.word	0x08018910
 801254c:	080186e8 	.word	0x080186e8
 8012550:	0801891c 	.word	0x0801891c
 8012554:	08018930 	.word	0x08018930
 8012558:	0801893c 	.word	0x0801893c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801255c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012560:	2b04      	cmp	r3, #4
 8012562:	d009      	beq.n	8012578 <dhcp_parse_reply+0x348>
 8012564:	4b93      	ldr	r3, [pc, #588]	; (80127b4 <dhcp_parse_reply+0x584>)
 8012566:	f240 6261 	movw	r2, #1633	; 0x661
 801256a:	4993      	ldr	r1, [pc, #588]	; (80127b8 <dhcp_parse_reply+0x588>)
 801256c:	4893      	ldr	r0, [pc, #588]	; (80127bc <dhcp_parse_reply+0x58c>)
 801256e:	f002 ff3d 	bl	80153ec <iprintf>
 8012572:	f06f 0305 	mvn.w	r3, #5
 8012576:	e119      	b.n	80127ac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012578:	2305      	movs	r3, #5
 801257a:	623b      	str	r3, [r7, #32]
        break;
 801257c:	e003      	b.n	8012586 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012584:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012586:	7dfb      	ldrb	r3, [r7, #23]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d103      	bne.n	8012594 <dhcp_parse_reply+0x364>
      offset++;
 801258c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801258e:	3301      	adds	r3, #1
 8012590:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012592:	e0a1      	b.n	80126d8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012594:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801259a:	4413      	add	r3, r2
 801259c:	3302      	adds	r3, #2
 801259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125a2:	db02      	blt.n	80125aa <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80125a4:	f06f 0301 	mvn.w	r3, #1
 80125a8:	e100      	b.n	80127ac <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80125aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80125b2:	4413      	add	r3, r2
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	3302      	adds	r3, #2
 80125b8:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80125ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 808a 	beq.w	80126d8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80125c4:	2300      	movs	r3, #0
 80125c6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80125c8:	6a3b      	ldr	r3, [r7, #32]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	db02      	blt.n	80125d4 <dhcp_parse_reply+0x3a4>
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	2b07      	cmp	r3, #7
 80125d2:	dd06      	ble.n	80125e2 <dhcp_parse_reply+0x3b2>
 80125d4:	4b77      	ldr	r3, [pc, #476]	; (80127b4 <dhcp_parse_reply+0x584>)
 80125d6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80125da:	4979      	ldr	r1, [pc, #484]	; (80127c0 <dhcp_parse_reply+0x590>)
 80125dc:	4877      	ldr	r0, [pc, #476]	; (80127bc <dhcp_parse_reply+0x58c>)
 80125de:	f002 ff05 	bl	80153ec <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80125e2:	4a78      	ldr	r2, [pc, #480]	; (80127c4 <dhcp_parse_reply+0x594>)
 80125e4:	6a3b      	ldr	r3, [r7, #32]
 80125e6:	4413      	add	r3, r2
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d174      	bne.n	80126d8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80125ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	bf28      	it	cs
 80125f6:	2304      	movcs	r3, #4
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80125fc:	8bfb      	ldrh	r3, [r7, #30]
 80125fe:	8aba      	ldrh	r2, [r7, #20]
 8012600:	f107 0108 	add.w	r1, r7, #8
 8012604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012606:	f7f8 fc53 	bl	800aeb0 <pbuf_copy_partial>
 801260a:	4603      	mov	r3, r0
 801260c:	461a      	mov	r2, r3
 801260e:	8abb      	ldrh	r3, [r7, #20]
 8012610:	4293      	cmp	r3, r2
 8012612:	d002      	beq.n	801261a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8012614:	f06f 0301 	mvn.w	r3, #1
 8012618:	e0c8      	b.n	80127ac <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801261a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801261e:	2b04      	cmp	r3, #4
 8012620:	d933      	bls.n	801268a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012626:	f003 0303 	and.w	r3, r3, #3
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <dhcp_parse_reply+0x414>
 8012630:	4b60      	ldr	r3, [pc, #384]	; (80127b4 <dhcp_parse_reply+0x584>)
 8012632:	f240 6281 	movw	r2, #1665	; 0x681
 8012636:	4964      	ldr	r1, [pc, #400]	; (80127c8 <dhcp_parse_reply+0x598>)
 8012638:	4860      	ldr	r0, [pc, #384]	; (80127bc <dhcp_parse_reply+0x58c>)
 801263a:	f002 fed7 	bl	80153ec <iprintf>
 801263e:	f06f 0305 	mvn.w	r3, #5
 8012642:	e0b3      	b.n	80127ac <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8012644:	4a5f      	ldr	r2, [pc, #380]	; (80127c4 <dhcp_parse_reply+0x594>)
 8012646:	6a3b      	ldr	r3, [r7, #32]
 8012648:	4413      	add	r3, r2
 801264a:	2201      	movs	r2, #1
 801264c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	4618      	mov	r0, r3
 8012652:	f7f6 ff06 	bl	8009462 <lwip_htonl>
 8012656:	4601      	mov	r1, r0
 8012658:	4a5c      	ldr	r2, [pc, #368]	; (80127cc <dhcp_parse_reply+0x59c>)
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012664:	3b04      	subs	r3, #4
 8012666:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801266a:	8bfb      	ldrh	r3, [r7, #30]
 801266c:	3304      	adds	r3, #4
 801266e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012670:	8a7a      	ldrh	r2, [r7, #18]
 8012672:	8bfb      	ldrh	r3, [r7, #30]
 8012674:	429a      	cmp	r2, r3
 8012676:	d202      	bcs.n	801267e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8012678:	f06f 0301 	mvn.w	r3, #1
 801267c:	e096      	b.n	80127ac <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801267e:	8a7b      	ldrh	r3, [r7, #18]
 8012680:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012682:	6a3b      	ldr	r3, [r7, #32]
 8012684:	3301      	adds	r3, #1
 8012686:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012688:	e79e      	b.n	80125c8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801268a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801268e:	2b04      	cmp	r3, #4
 8012690:	d106      	bne.n	80126a0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	4618      	mov	r0, r3
 8012696:	f7f6 fee4 	bl	8009462 <lwip_htonl>
 801269a:	4603      	mov	r3, r0
 801269c:	60bb      	str	r3, [r7, #8]
 801269e:	e011      	b.n	80126c4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80126a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d009      	beq.n	80126bc <dhcp_parse_reply+0x48c>
 80126a8:	4b42      	ldr	r3, [pc, #264]	; (80127b4 <dhcp_parse_reply+0x584>)
 80126aa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80126ae:	4948      	ldr	r1, [pc, #288]	; (80127d0 <dhcp_parse_reply+0x5a0>)
 80126b0:	4842      	ldr	r0, [pc, #264]	; (80127bc <dhcp_parse_reply+0x58c>)
 80126b2:	f002 fe9b 	bl	80153ec <iprintf>
 80126b6:	f06f 0305 	mvn.w	r3, #5
 80126ba:	e077      	b.n	80127ac <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80126bc:	f107 0308 	add.w	r3, r7, #8
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80126c4:	4a3f      	ldr	r2, [pc, #252]	; (80127c4 <dhcp_parse_reply+0x594>)
 80126c6:	6a3b      	ldr	r3, [r7, #32]
 80126c8:	4413      	add	r3, r2
 80126ca:	2201      	movs	r2, #1
 80126cc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80126ce:	68ba      	ldr	r2, [r7, #8]
 80126d0:	493e      	ldr	r1, [pc, #248]	; (80127cc <dhcp_parse_reply+0x59c>)
 80126d2:	6a3b      	ldr	r3, [r7, #32]
 80126d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80126d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126da:	895b      	ldrh	r3, [r3, #10]
 80126dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126de:	429a      	cmp	r2, r3
 80126e0:	d324      	bcc.n	801272c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	895b      	ldrh	r3, [r3, #10]
 80126e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126e8:	1ad3      	subs	r3, r2, r3
 80126ea:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	895b      	ldrh	r3, [r3, #10]
 80126f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80126f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d213      	bcs.n	8012726 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80126fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012706:	2b00      	cmp	r3, #0
 8012708:	d109      	bne.n	801271e <dhcp_parse_reply+0x4ee>
 801270a:	4b2a      	ldr	r3, [pc, #168]	; (80127b4 <dhcp_parse_reply+0x584>)
 801270c:	f240 629d 	movw	r2, #1693	; 0x69d
 8012710:	4930      	ldr	r1, [pc, #192]	; (80127d4 <dhcp_parse_reply+0x5a4>)
 8012712:	482a      	ldr	r0, [pc, #168]	; (80127bc <dhcp_parse_reply+0x58c>)
 8012714:	f002 fe6a 	bl	80153ec <iprintf>
 8012718:	f06f 0305 	mvn.w	r3, #5
 801271c:	e046      	b.n	80127ac <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012724:	e002      	b.n	801272c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012726:	f06f 0301 	mvn.w	r3, #1
 801272a:	e03f      	b.n	80127ac <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00a      	beq.n	8012748 <dhcp_parse_reply+0x518>
 8012732:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012734:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012736:	429a      	cmp	r2, r3
 8012738:	d206      	bcs.n	8012748 <dhcp_parse_reply+0x518>
 801273a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801273c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801273e:	4413      	add	r3, r2
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	2bff      	cmp	r3, #255	; 0xff
 8012744:	f47f adb7 	bne.w	80122b6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012748:	4b1e      	ldr	r3, [pc, #120]	; (80127c4 <dhcp_parse_reply+0x594>)
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d018      	beq.n	8012782 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012750:	4b1e      	ldr	r3, [pc, #120]	; (80127cc <dhcp_parse_reply+0x59c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012756:	4b1b      	ldr	r3, [pc, #108]	; (80127c4 <dhcp_parse_reply+0x594>)
 8012758:	2200      	movs	r2, #0
 801275a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2b01      	cmp	r3, #1
 8012760:	d102      	bne.n	8012768 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8012762:	2301      	movs	r3, #1
 8012764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012766:	e00c      	b.n	8012782 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2b02      	cmp	r3, #2
 801276c:	d102      	bne.n	8012774 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801276e:	2301      	movs	r3, #1
 8012770:	62bb      	str	r3, [r7, #40]	; 0x28
 8012772:	e006      	b.n	8012782 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b03      	cmp	r3, #3
 8012778:	d103      	bne.n	8012782 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801277a:	2301      	movs	r3, #1
 801277c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801277e:	2301      	movs	r3, #1
 8012780:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012784:	2b00      	cmp	r3, #0
 8012786:	d006      	beq.n	8012796 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801278c:	236c      	movs	r3, #108	; 0x6c
 801278e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012790:	23ec      	movs	r3, #236	; 0xec
 8012792:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012794:	e569      	b.n	801226a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012798:	2b00      	cmp	r3, #0
 801279a:	d006      	beq.n	80127aa <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801279c:	2300      	movs	r3, #0
 801279e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80127a0:	232c      	movs	r3, #44	; 0x2c
 80127a2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80127a4:	236c      	movs	r3, #108	; 0x6c
 80127a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80127a8:	e55f      	b.n	801226a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80127aa:	2300      	movs	r3, #0
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3740      	adds	r7, #64	; 0x40
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	08018688 	.word	0x08018688
 80127b8:	08018910 	.word	0x08018910
 80127bc:	080186e8 	.word	0x080186e8
 80127c0:	08018954 	.word	0x08018954
 80127c4:	2000b8dc 	.word	0x2000b8dc
 80127c8:	08018968 	.word	0x08018968
 80127cc:	2000b8e4 	.word	0x2000b8e4
 80127d0:	08018980 	.word	0x08018980
 80127d4:	08018994 	.word	0x08018994

080127d8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b08a      	sub	sp, #40	; 0x28
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80127e6:	4b5f      	ldr	r3, [pc, #380]	; (8012964 <dhcp_recv+0x18c>)
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127ec:	6a3b      	ldr	r3, [r7, #32]
 80127ee:	6a1b      	ldr	r3, [r3, #32]
 80127f0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f000 809d 	beq.w	801293a <dhcp_recv+0x162>
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	791b      	ldrb	r3, [r3, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	f000 8098 	beq.w	801293a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	895b      	ldrh	r3, [r3, #10]
 801280e:	2b2b      	cmp	r3, #43	; 0x2b
 8012810:	f240 8095 	bls.w	801293e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b02      	cmp	r3, #2
 801281a:	f040 8092 	bne.w	8012942 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801281e:	2300      	movs	r3, #0
 8012820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012824:	e012      	b.n	801284c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801282a:	6a3a      	ldr	r2, [r7, #32]
 801282c:	4413      	add	r3, r2
 801282e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8012832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012836:	69b9      	ldr	r1, [r7, #24]
 8012838:	440b      	add	r3, r1
 801283a:	7f1b      	ldrb	r3, [r3, #28]
 801283c:	429a      	cmp	r2, r3
 801283e:	f040 8082 	bne.w	8012946 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012846:	3301      	adds	r3, #1
 8012848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012852:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012856:	429a      	cmp	r2, r3
 8012858:	d203      	bcs.n	8012862 <dhcp_recv+0x8a>
 801285a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801285e:	2b05      	cmp	r3, #5
 8012860:	d9e1      	bls.n	8012826 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	4618      	mov	r0, r3
 8012868:	f7f6 fdfb 	bl	8009462 <lwip_htonl>
 801286c:	4602      	mov	r2, r0
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	429a      	cmp	r2, r3
 8012874:	d169      	bne.n	801294a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012876:	69f9      	ldr	r1, [r7, #28]
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff fcd9 	bl	8012230 <dhcp_parse_reply>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d164      	bne.n	801294e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012884:	4b38      	ldr	r3, [pc, #224]	; (8012968 <dhcp_recv+0x190>)
 8012886:	785b      	ldrb	r3, [r3, #1]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d062      	beq.n	8012952 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012892:	4b36      	ldr	r3, [pc, #216]	; (801296c <dhcp_recv+0x194>)
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012898:	7cfb      	ldrb	r3, [r7, #19]
 801289a:	2b05      	cmp	r3, #5
 801289c:	d12a      	bne.n	80128f4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801289e:	69fb      	ldr	r3, [r7, #28]
 80128a0:	795b      	ldrb	r3, [r3, #5]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d112      	bne.n	80128cc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80128a6:	6979      	ldr	r1, [r7, #20]
 80128a8:	6a38      	ldr	r0, [r7, #32]
 80128aa:	f7fe fe53 	bl	8011554 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128b4:	f003 0308 	and.w	r3, r3, #8
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d003      	beq.n	80128c4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80128bc:	6a38      	ldr	r0, [r7, #32]
 80128be:	f7fe fbc1 	bl	8011044 <dhcp_check>
 80128c2:	e047      	b.n	8012954 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80128c4:	6a38      	ldr	r0, [r7, #32]
 80128c6:	f7ff f867 	bl	8011998 <dhcp_bind>
 80128ca:	e043      	b.n	8012954 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	795b      	ldrb	r3, [r3, #5]
 80128d0:	2b03      	cmp	r3, #3
 80128d2:	d007      	beq.n	80128e4 <dhcp_recv+0x10c>
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	795b      	ldrb	r3, [r3, #5]
 80128d8:	2b04      	cmp	r3, #4
 80128da:	d003      	beq.n	80128e4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80128e0:	2b05      	cmp	r3, #5
 80128e2:	d137      	bne.n	8012954 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80128e4:	6979      	ldr	r1, [r7, #20]
 80128e6:	6a38      	ldr	r0, [r7, #32]
 80128e8:	f7fe fe34 	bl	8011554 <dhcp_handle_ack>
      dhcp_bind(netif);
 80128ec:	6a38      	ldr	r0, [r7, #32]
 80128ee:	f7ff f853 	bl	8011998 <dhcp_bind>
 80128f2:	e02f      	b.n	8012954 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80128f4:	7cfb      	ldrb	r3, [r7, #19]
 80128f6:	2b06      	cmp	r3, #6
 80128f8:	d113      	bne.n	8012922 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80128fe:	2b03      	cmp	r3, #3
 8012900:	d00b      	beq.n	801291a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	795b      	ldrb	r3, [r3, #5]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d007      	beq.n	801291a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801290e:	2b04      	cmp	r3, #4
 8012910:	d003      	beq.n	801291a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012912:	69fb      	ldr	r3, [r7, #28]
 8012914:	795b      	ldrb	r3, [r3, #5]
 8012916:	2b05      	cmp	r3, #5
 8012918:	d103      	bne.n	8012922 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801291a:	6a38      	ldr	r0, [r7, #32]
 801291c:	f7fe fb78 	bl	8011010 <dhcp_handle_nak>
 8012920:	e018      	b.n	8012954 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012922:	7cfb      	ldrb	r3, [r7, #19]
 8012924:	2b02      	cmp	r3, #2
 8012926:	d108      	bne.n	801293a <dhcp_recv+0x162>
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	795b      	ldrb	r3, [r3, #5]
 801292c:	2b06      	cmp	r3, #6
 801292e:	d104      	bne.n	801293a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012930:	6979      	ldr	r1, [r7, #20]
 8012932:	6a38      	ldr	r0, [r7, #32]
 8012934:	f7fe fbba 	bl	80110ac <dhcp_handle_offer>
 8012938:	e00c      	b.n	8012954 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801293a:	bf00      	nop
 801293c:	e00a      	b.n	8012954 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801293e:	bf00      	nop
 8012940:	e008      	b.n	8012954 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8012942:	bf00      	nop
 8012944:	e006      	b.n	8012954 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8012946:	bf00      	nop
 8012948:	e004      	b.n	8012954 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801294a:	bf00      	nop
 801294c:	e002      	b.n	8012954 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801294e:	bf00      	nop
 8012950:	e000      	b.n	8012954 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8012952:	bf00      	nop
  pbuf_free(p);
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f8 f8a5 	bl	800aaa4 <pbuf_free>
}
 801295a:	bf00      	nop
 801295c:	3728      	adds	r7, #40	; 0x28
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	2000818c 	.word	0x2000818c
 8012968:	2000b8dc 	.word	0x2000b8dc
 801296c:	2000b8e4 	.word	0x2000b8e4

08012970 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b088      	sub	sp, #32
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	603b      	str	r3, [r7, #0]
 801297c:	4613      	mov	r3, r2
 801297e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d108      	bne.n	8012998 <dhcp_create_msg+0x28>
 8012986:	4b5f      	ldr	r3, [pc, #380]	; (8012b04 <dhcp_create_msg+0x194>)
 8012988:	f240 7269 	movw	r2, #1897	; 0x769
 801298c:	495e      	ldr	r1, [pc, #376]	; (8012b08 <dhcp_create_msg+0x198>)
 801298e:	485f      	ldr	r0, [pc, #380]	; (8012b0c <dhcp_create_msg+0x19c>)
 8012990:	f002 fd2c 	bl	80153ec <iprintf>
 8012994:	2300      	movs	r3, #0
 8012996:	e0b1      	b.n	8012afc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d108      	bne.n	80129b0 <dhcp_create_msg+0x40>
 801299e:	4b59      	ldr	r3, [pc, #356]	; (8012b04 <dhcp_create_msg+0x194>)
 80129a0:	f240 726a 	movw	r2, #1898	; 0x76a
 80129a4:	495a      	ldr	r1, [pc, #360]	; (8012b10 <dhcp_create_msg+0x1a0>)
 80129a6:	4859      	ldr	r0, [pc, #356]	; (8012b0c <dhcp_create_msg+0x19c>)
 80129a8:	f002 fd20 	bl	80153ec <iprintf>
 80129ac:	2300      	movs	r3, #0
 80129ae:	e0a5      	b.n	8012afc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80129b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129b4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80129b8:	2036      	movs	r0, #54	; 0x36
 80129ba:	f7f7 fd93 	bl	800a4e4 <pbuf_alloc>
 80129be:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d101      	bne.n	80129ca <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e098      	b.n	8012afc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	895b      	ldrh	r3, [r3, #10]
 80129ce:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80129d2:	d206      	bcs.n	80129e2 <dhcp_create_msg+0x72>
 80129d4:	4b4b      	ldr	r3, [pc, #300]	; (8012b04 <dhcp_create_msg+0x194>)
 80129d6:	f240 7272 	movw	r2, #1906	; 0x772
 80129da:	494e      	ldr	r1, [pc, #312]	; (8012b14 <dhcp_create_msg+0x1a4>)
 80129dc:	484b      	ldr	r0, [pc, #300]	; (8012b0c <dhcp_create_msg+0x19c>)
 80129de:	f002 fd05 	bl	80153ec <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80129e2:	79fb      	ldrb	r3, [r7, #7]
 80129e4:	2b03      	cmp	r3, #3
 80129e6:	d103      	bne.n	80129f0 <dhcp_create_msg+0x80>
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	795b      	ldrb	r3, [r3, #5]
 80129ec:	2b03      	cmp	r3, #3
 80129ee:	d10d      	bne.n	8012a0c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	799b      	ldrb	r3, [r3, #6]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d105      	bne.n	8012a04 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80129f8:	f002 fd10 	bl	801541c <rand>
 80129fc:	4603      	mov	r3, r0
 80129fe:	461a      	mov	r2, r3
 8012a00:	4b45      	ldr	r3, [pc, #276]	; (8012b18 <dhcp_create_msg+0x1a8>)
 8012a02:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012a04:	4b44      	ldr	r3, [pc, #272]	; (8012b18 <dhcp_create_msg+0x1a8>)
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012a12:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012a16:	2100      	movs	r1, #0
 8012a18:	6978      	ldr	r0, [r7, #20]
 8012a1a:	f002 fcdf 	bl	80153dc <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	2201      	movs	r2, #1
 8012a22:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	2201      	movs	r2, #1
 8012a28:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f6 fd12 	bl	8009462 <lwip_htonl>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	2b08      	cmp	r3, #8
 8012a48:	d010      	beq.n	8012a6c <dhcp_create_msg+0xfc>
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	2b04      	cmp	r3, #4
 8012a4e:	d00d      	beq.n	8012a6c <dhcp_create_msg+0xfc>
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	2b07      	cmp	r3, #7
 8012a54:	d00a      	beq.n	8012a6c <dhcp_create_msg+0xfc>
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	2b03      	cmp	r3, #3
 8012a5a:	d10c      	bne.n	8012a76 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012a60:	2b05      	cmp	r3, #5
 8012a62:	d003      	beq.n	8012a6c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	795b      	ldrb	r3, [r3, #5]
 8012a68:	2b04      	cmp	r3, #4
 8012a6a:	d104      	bne.n	8012a76 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012a76:	2300      	movs	r3, #0
 8012a78:	83fb      	strh	r3, [r7, #30]
 8012a7a:	e00c      	b.n	8012a96 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012a7c:	8bfa      	ldrh	r2, [r7, #30]
 8012a7e:	8bfb      	ldrh	r3, [r7, #30]
 8012a80:	68f9      	ldr	r1, [r7, #12]
 8012a82:	440a      	add	r2, r1
 8012a84:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8012a88:	697a      	ldr	r2, [r7, #20]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	460a      	mov	r2, r1
 8012a8e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012a90:	8bfb      	ldrh	r3, [r7, #30]
 8012a92:	3301      	adds	r3, #1
 8012a94:	83fb      	strh	r3, [r7, #30]
 8012a96:	8bfb      	ldrh	r3, [r7, #30]
 8012a98:	2b05      	cmp	r3, #5
 8012a9a:	d9ef      	bls.n	8012a7c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012aa4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012aae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012ab8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012abc:	2200      	movs	r2, #0
 8012abe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012ac2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012acc:	2301      	movs	r3, #1
 8012ace:	2235      	movs	r2, #53	; 0x35
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	f7ff fadd 	bl	8012090 <dhcp_option>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ae0:	79fa      	ldrb	r2, [r7, #7]
 8012ae2:	8a7b      	ldrh	r3, [r7, #18]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7ff fb07 	bl	80120f8 <dhcp_option_byte>
 8012aea:	4603      	mov	r3, r0
 8012aec:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d002      	beq.n	8012afa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	8a7a      	ldrh	r2, [r7, #18]
 8012af8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012afa:	69bb      	ldr	r3, [r7, #24]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3720      	adds	r7, #32
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	08018688 	.word	0x08018688
 8012b08:	080189a8 	.word	0x080189a8
 8012b0c:	080186e8 	.word	0x080186e8
 8012b10:	080189c8 	.word	0x080189c8
 8012b14:	080189e8 	.word	0x080189e8
 8012b18:	20004a4c 	.word	0x20004a4c

08012b1c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
 8012b28:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012b2a:	89fb      	ldrh	r3, [r7, #14]
 8012b2c:	1c5a      	adds	r2, r3, #1
 8012b2e:	81fa      	strh	r2, [r7, #14]
 8012b30:	461a      	mov	r2, r3
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	4413      	add	r3, r2
 8012b36:	22ff      	movs	r2, #255	; 0xff
 8012b38:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012b3a:	e007      	b.n	8012b4c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012b3c:	89fb      	ldrh	r3, [r7, #14]
 8012b3e:	1c5a      	adds	r2, r3, #1
 8012b40:	81fa      	strh	r2, [r7, #14]
 8012b42:	461a      	mov	r2, r3
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	4413      	add	r3, r2
 8012b48:	2200      	movs	r2, #0
 8012b4a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012b4c:	89fb      	ldrh	r3, [r7, #14]
 8012b4e:	2b43      	cmp	r3, #67	; 0x43
 8012b50:	d904      	bls.n	8012b5c <dhcp_option_trailer+0x40>
 8012b52:	89fb      	ldrh	r3, [r7, #14]
 8012b54:	f003 0303 	and.w	r3, r3, #3
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <dhcp_option_trailer+0x46>
 8012b5c:	89fb      	ldrh	r3, [r7, #14]
 8012b5e:	2b43      	cmp	r3, #67	; 0x43
 8012b60:	d9ec      	bls.n	8012b3c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012b62:	89fb      	ldrh	r3, [r7, #14]
 8012b64:	33f0      	adds	r3, #240	; 0xf0
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7f7 fe14 	bl	800a798 <pbuf_realloc>
}
 8012b70:	bf00      	nop
 8012b72:	3710      	adds	r7, #16
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d017      	beq.n	8012bb6 <dhcp_supplied_address+0x3e>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6a1b      	ldr	r3, [r3, #32]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d013      	beq.n	8012bb6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6a1b      	ldr	r3, [r3, #32]
 8012b92:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	795b      	ldrb	r3, [r3, #5]
 8012b98:	2b0a      	cmp	r3, #10
 8012b9a:	d007      	beq.n	8012bac <dhcp_supplied_address+0x34>
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	795b      	ldrb	r3, [r3, #5]
 8012ba0:	2b05      	cmp	r3, #5
 8012ba2:	d003      	beq.n	8012bac <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012ba8:	2b04      	cmp	r3, #4
 8012baa:	d101      	bne.n	8012bb0 <dhcp_supplied_address+0x38>
 8012bac:	2301      	movs	r3, #1
 8012bae:	e000      	b.n	8012bb2 <dhcp_supplied_address+0x3a>
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	e000      	b.n	8012bb8 <dhcp_supplied_address+0x40>
  }
  return 0;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3714      	adds	r7, #20
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012bcc:	4915      	ldr	r1, [pc, #84]	; (8012c24 <etharp_free_entry+0x60>)
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	005b      	lsls	r3, r3, #1
 8012bd4:	4413      	add	r3, r2
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	440b      	add	r3, r1
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d013      	beq.n	8012c08 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012be0:	4910      	ldr	r1, [pc, #64]	; (8012c24 <etharp_free_entry+0x60>)
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	4613      	mov	r3, r2
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	4413      	add	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	440b      	add	r3, r1
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7f7 ff57 	bl	800aaa4 <pbuf_free>
    arp_table[i].q = NULL;
 8012bf6:	490b      	ldr	r1, [pc, #44]	; (8012c24 <etharp_free_entry+0x60>)
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	440b      	add	r3, r1
 8012c04:	2200      	movs	r2, #0
 8012c06:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012c08:	4906      	ldr	r1, [pc, #24]	; (8012c24 <etharp_free_entry+0x60>)
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	4613      	mov	r3, r2
 8012c0e:	005b      	lsls	r3, r3, #1
 8012c10:	4413      	add	r3, r2
 8012c12:	00db      	lsls	r3, r3, #3
 8012c14:	440b      	add	r3, r1
 8012c16:	3314      	adds	r3, #20
 8012c18:	2200      	movs	r2, #0
 8012c1a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	20004a50 	.word	0x20004a50

08012c28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c2e:	2300      	movs	r3, #0
 8012c30:	607b      	str	r3, [r7, #4]
 8012c32:	e096      	b.n	8012d62 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012c34:	494f      	ldr	r1, [pc, #316]	; (8012d74 <etharp_tmr+0x14c>)
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	005b      	lsls	r3, r3, #1
 8012c3c:	4413      	add	r3, r2
 8012c3e:	00db      	lsls	r3, r3, #3
 8012c40:	440b      	add	r3, r1
 8012c42:	3314      	adds	r3, #20
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012c48:	78fb      	ldrb	r3, [r7, #3]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 8086 	beq.w	8012d5c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012c50:	4948      	ldr	r1, [pc, #288]	; (8012d74 <etharp_tmr+0x14c>)
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	4613      	mov	r3, r2
 8012c56:	005b      	lsls	r3, r3, #1
 8012c58:	4413      	add	r3, r2
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	440b      	add	r3, r1
 8012c5e:	3312      	adds	r3, #18
 8012c60:	881b      	ldrh	r3, [r3, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	b298      	uxth	r0, r3
 8012c66:	4943      	ldr	r1, [pc, #268]	; (8012d74 <etharp_tmr+0x14c>)
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	4413      	add	r3, r2
 8012c70:	00db      	lsls	r3, r3, #3
 8012c72:	440b      	add	r3, r1
 8012c74:	3312      	adds	r3, #18
 8012c76:	4602      	mov	r2, r0
 8012c78:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012c7a:	493e      	ldr	r1, [pc, #248]	; (8012d74 <etharp_tmr+0x14c>)
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	4613      	mov	r3, r2
 8012c80:	005b      	lsls	r3, r3, #1
 8012c82:	4413      	add	r3, r2
 8012c84:	00db      	lsls	r3, r3, #3
 8012c86:	440b      	add	r3, r1
 8012c88:	3312      	adds	r3, #18
 8012c8a:	881b      	ldrh	r3, [r3, #0]
 8012c8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012c90:	d215      	bcs.n	8012cbe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012c92:	4938      	ldr	r1, [pc, #224]	; (8012d74 <etharp_tmr+0x14c>)
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	4613      	mov	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	00db      	lsls	r3, r3, #3
 8012c9e:	440b      	add	r3, r1
 8012ca0:	3314      	adds	r3, #20
 8012ca2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d10e      	bne.n	8012cc6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012ca8:	4932      	ldr	r1, [pc, #200]	; (8012d74 <etharp_tmr+0x14c>)
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	4613      	mov	r3, r2
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4413      	add	r3, r2
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	440b      	add	r3, r1
 8012cb6:	3312      	adds	r3, #18
 8012cb8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012cba:	2b04      	cmp	r3, #4
 8012cbc:	d903      	bls.n	8012cc6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7ff ff80 	bl	8012bc4 <etharp_free_entry>
 8012cc4:	e04a      	b.n	8012d5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012cc6:	492b      	ldr	r1, [pc, #172]	; (8012d74 <etharp_tmr+0x14c>)
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	4613      	mov	r3, r2
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	4413      	add	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	440b      	add	r3, r1
 8012cd4:	3314      	adds	r3, #20
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2b03      	cmp	r3, #3
 8012cda:	d10a      	bne.n	8012cf2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012cdc:	4925      	ldr	r1, [pc, #148]	; (8012d74 <etharp_tmr+0x14c>)
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	4613      	mov	r3, r2
 8012ce2:	005b      	lsls	r3, r3, #1
 8012ce4:	4413      	add	r3, r2
 8012ce6:	00db      	lsls	r3, r3, #3
 8012ce8:	440b      	add	r3, r1
 8012cea:	3314      	adds	r3, #20
 8012cec:	2204      	movs	r2, #4
 8012cee:	701a      	strb	r2, [r3, #0]
 8012cf0:	e034      	b.n	8012d5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012cf2:	4920      	ldr	r1, [pc, #128]	; (8012d74 <etharp_tmr+0x14c>)
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	4413      	add	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	440b      	add	r3, r1
 8012d00:	3314      	adds	r3, #20
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	2b04      	cmp	r3, #4
 8012d06:	d10a      	bne.n	8012d1e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012d08:	491a      	ldr	r1, [pc, #104]	; (8012d74 <etharp_tmr+0x14c>)
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	005b      	lsls	r3, r3, #1
 8012d10:	4413      	add	r3, r2
 8012d12:	00db      	lsls	r3, r3, #3
 8012d14:	440b      	add	r3, r1
 8012d16:	3314      	adds	r3, #20
 8012d18:	2202      	movs	r2, #2
 8012d1a:	701a      	strb	r2, [r3, #0]
 8012d1c:	e01e      	b.n	8012d5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012d1e:	4915      	ldr	r1, [pc, #84]	; (8012d74 <etharp_tmr+0x14c>)
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	4613      	mov	r3, r2
 8012d24:	005b      	lsls	r3, r3, #1
 8012d26:	4413      	add	r3, r2
 8012d28:	00db      	lsls	r3, r3, #3
 8012d2a:	440b      	add	r3, r1
 8012d2c:	3314      	adds	r3, #20
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	2b01      	cmp	r3, #1
 8012d32:	d113      	bne.n	8012d5c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012d34:	490f      	ldr	r1, [pc, #60]	; (8012d74 <etharp_tmr+0x14c>)
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	440b      	add	r3, r1
 8012d42:	3308      	adds	r3, #8
 8012d44:	6818      	ldr	r0, [r3, #0]
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	4613      	mov	r3, r2
 8012d4a:	005b      	lsls	r3, r3, #1
 8012d4c:	4413      	add	r3, r2
 8012d4e:	00db      	lsls	r3, r3, #3
 8012d50:	4a08      	ldr	r2, [pc, #32]	; (8012d74 <etharp_tmr+0x14c>)
 8012d52:	4413      	add	r3, r2
 8012d54:	3304      	adds	r3, #4
 8012d56:	4619      	mov	r1, r3
 8012d58:	f000 fe72 	bl	8013a40 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	607b      	str	r3, [r7, #4]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b09      	cmp	r3, #9
 8012d66:	f77f af65 	ble.w	8012c34 <etharp_tmr+0xc>
      }
    }
  }
}
 8012d6a:	bf00      	nop
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20004a50 	.word	0x20004a50

08012d78 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b08a      	sub	sp, #40	; 0x28
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	460b      	mov	r3, r1
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012d86:	230a      	movs	r3, #10
 8012d88:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012d8a:	230a      	movs	r3, #10
 8012d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012d8e:	230a      	movs	r3, #10
 8012d90:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012d96:	230a      	movs	r3, #10
 8012d98:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	83bb      	strh	r3, [r7, #28]
 8012d9e:	2300      	movs	r3, #0
 8012da0:	837b      	strh	r3, [r7, #26]
 8012da2:	2300      	movs	r3, #0
 8012da4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012da6:	2300      	movs	r3, #0
 8012da8:	843b      	strh	r3, [r7, #32]
 8012daa:	e0ae      	b.n	8012f0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012dac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012db0:	49a6      	ldr	r1, [pc, #664]	; (801304c <etharp_find_entry+0x2d4>)
 8012db2:	4613      	mov	r3, r2
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	4413      	add	r3, r2
 8012db8:	00db      	lsls	r3, r3, #3
 8012dba:	440b      	add	r3, r1
 8012dbc:	3314      	adds	r3, #20
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012dc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012dc6:	2b0a      	cmp	r3, #10
 8012dc8:	d105      	bne.n	8012dd6 <etharp_find_entry+0x5e>
 8012dca:	7dfb      	ldrb	r3, [r7, #23]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012dd0:	8c3b      	ldrh	r3, [r7, #32]
 8012dd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8012dd4:	e095      	b.n	8012f02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 8092 	beq.w	8012f02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012dde:	7dfb      	ldrb	r3, [r7, #23]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d009      	beq.n	8012df8 <etharp_find_entry+0x80>
 8012de4:	7dfb      	ldrb	r3, [r7, #23]
 8012de6:	2b01      	cmp	r3, #1
 8012de8:	d806      	bhi.n	8012df8 <etharp_find_entry+0x80>
 8012dea:	4b99      	ldr	r3, [pc, #612]	; (8013050 <etharp_find_entry+0x2d8>)
 8012dec:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012df0:	4998      	ldr	r1, [pc, #608]	; (8013054 <etharp_find_entry+0x2dc>)
 8012df2:	4899      	ldr	r0, [pc, #612]	; (8013058 <etharp_find_entry+0x2e0>)
 8012df4:	f002 fafa 	bl	80153ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d020      	beq.n	8012e40 <etharp_find_entry+0xc8>
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6819      	ldr	r1, [r3, #0]
 8012e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e06:	4891      	ldr	r0, [pc, #580]	; (801304c <etharp_find_entry+0x2d4>)
 8012e08:	4613      	mov	r3, r2
 8012e0a:	005b      	lsls	r3, r3, #1
 8012e0c:	4413      	add	r3, r2
 8012e0e:	00db      	lsls	r3, r3, #3
 8012e10:	4403      	add	r3, r0
 8012e12:	3304      	adds	r3, #4
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4299      	cmp	r1, r3
 8012e18:	d112      	bne.n	8012e40 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00c      	beq.n	8012e3a <etharp_find_entry+0xc2>
 8012e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e24:	4989      	ldr	r1, [pc, #548]	; (801304c <etharp_find_entry+0x2d4>)
 8012e26:	4613      	mov	r3, r2
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	4413      	add	r3, r2
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	440b      	add	r3, r1
 8012e30:	3308      	adds	r3, #8
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d102      	bne.n	8012e40 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012e3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e3e:	e100      	b.n	8013042 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012e40:	7dfb      	ldrb	r3, [r7, #23]
 8012e42:	2b01      	cmp	r3, #1
 8012e44:	d140      	bne.n	8012ec8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e4a:	4980      	ldr	r1, [pc, #512]	; (801304c <etharp_find_entry+0x2d4>)
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	005b      	lsls	r3, r3, #1
 8012e50:	4413      	add	r3, r2
 8012e52:	00db      	lsls	r3, r3, #3
 8012e54:	440b      	add	r3, r1
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d01a      	beq.n	8012e92 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e60:	497a      	ldr	r1, [pc, #488]	; (801304c <etharp_find_entry+0x2d4>)
 8012e62:	4613      	mov	r3, r2
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	4413      	add	r3, r2
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	440b      	add	r3, r1
 8012e6c:	3312      	adds	r3, #18
 8012e6e:	881b      	ldrh	r3, [r3, #0]
 8012e70:	8bba      	ldrh	r2, [r7, #28]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d845      	bhi.n	8012f02 <etharp_find_entry+0x18a>
            old_queue = i;
 8012e76:	8c3b      	ldrh	r3, [r7, #32]
 8012e78:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012e7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e7e:	4973      	ldr	r1, [pc, #460]	; (801304c <etharp_find_entry+0x2d4>)
 8012e80:	4613      	mov	r3, r2
 8012e82:	005b      	lsls	r3, r3, #1
 8012e84:	4413      	add	r3, r2
 8012e86:	00db      	lsls	r3, r3, #3
 8012e88:	440b      	add	r3, r1
 8012e8a:	3312      	adds	r3, #18
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	83bb      	strh	r3, [r7, #28]
 8012e90:	e037      	b.n	8012f02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012e92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e96:	496d      	ldr	r1, [pc, #436]	; (801304c <etharp_find_entry+0x2d4>)
 8012e98:	4613      	mov	r3, r2
 8012e9a:	005b      	lsls	r3, r3, #1
 8012e9c:	4413      	add	r3, r2
 8012e9e:	00db      	lsls	r3, r3, #3
 8012ea0:	440b      	add	r3, r1
 8012ea2:	3312      	adds	r3, #18
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	8b7a      	ldrh	r2, [r7, #26]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d82a      	bhi.n	8012f02 <etharp_find_entry+0x18a>
            old_pending = i;
 8012eac:	8c3b      	ldrh	r3, [r7, #32]
 8012eae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012eb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eb4:	4965      	ldr	r1, [pc, #404]	; (801304c <etharp_find_entry+0x2d4>)
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	005b      	lsls	r3, r3, #1
 8012eba:	4413      	add	r3, r2
 8012ebc:	00db      	lsls	r3, r3, #3
 8012ebe:	440b      	add	r3, r1
 8012ec0:	3312      	adds	r3, #18
 8012ec2:	881b      	ldrh	r3, [r3, #0]
 8012ec4:	837b      	strh	r3, [r7, #26]
 8012ec6:	e01c      	b.n	8012f02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012ec8:	7dfb      	ldrb	r3, [r7, #23]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d919      	bls.n	8012f02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012ece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ed2:	495e      	ldr	r1, [pc, #376]	; (801304c <etharp_find_entry+0x2d4>)
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	440b      	add	r3, r1
 8012ede:	3312      	adds	r3, #18
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	8b3a      	ldrh	r2, [r7, #24]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d80c      	bhi.n	8012f02 <etharp_find_entry+0x18a>
            old_stable = i;
 8012ee8:	8c3b      	ldrh	r3, [r7, #32]
 8012eea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012eec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ef0:	4956      	ldr	r1, [pc, #344]	; (801304c <etharp_find_entry+0x2d4>)
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	005b      	lsls	r3, r3, #1
 8012ef6:	4413      	add	r3, r2
 8012ef8:	00db      	lsls	r3, r3, #3
 8012efa:	440b      	add	r3, r1
 8012efc:	3312      	adds	r3, #18
 8012efe:	881b      	ldrh	r3, [r3, #0]
 8012f00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f02:	8c3b      	ldrh	r3, [r7, #32]
 8012f04:	3301      	adds	r3, #1
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	843b      	strh	r3, [r7, #32]
 8012f0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f0e:	2b09      	cmp	r3, #9
 8012f10:	f77f af4c 	ble.w	8012dac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012f14:	7afb      	ldrb	r3, [r7, #11]
 8012f16:	f003 0302 	and.w	r3, r3, #2
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d108      	bne.n	8012f30 <etharp_find_entry+0x1b8>
 8012f1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012f22:	2b0a      	cmp	r3, #10
 8012f24:	d107      	bne.n	8012f36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012f26:	7afb      	ldrb	r3, [r7, #11]
 8012f28:	f003 0301 	and.w	r3, r3, #1
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d102      	bne.n	8012f36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f34:	e085      	b.n	8013042 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012f3a:	2b09      	cmp	r3, #9
 8012f3c:	dc02      	bgt.n	8012f44 <etharp_find_entry+0x1cc>
    i = empty;
 8012f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f40:	843b      	strh	r3, [r7, #32]
 8012f42:	e039      	b.n	8012fb8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012f44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012f48:	2b09      	cmp	r3, #9
 8012f4a:	dc14      	bgt.n	8012f76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012f50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f54:	493d      	ldr	r1, [pc, #244]	; (801304c <etharp_find_entry+0x2d4>)
 8012f56:	4613      	mov	r3, r2
 8012f58:	005b      	lsls	r3, r3, #1
 8012f5a:	4413      	add	r3, r2
 8012f5c:	00db      	lsls	r3, r3, #3
 8012f5e:	440b      	add	r3, r1
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d018      	beq.n	8012f98 <etharp_find_entry+0x220>
 8012f66:	4b3a      	ldr	r3, [pc, #232]	; (8013050 <etharp_find_entry+0x2d8>)
 8012f68:	f240 126d 	movw	r2, #365	; 0x16d
 8012f6c:	493b      	ldr	r1, [pc, #236]	; (801305c <etharp_find_entry+0x2e4>)
 8012f6e:	483a      	ldr	r0, [pc, #232]	; (8013058 <etharp_find_entry+0x2e0>)
 8012f70:	f002 fa3c 	bl	80153ec <iprintf>
 8012f74:	e010      	b.n	8012f98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012f76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012f7a:	2b09      	cmp	r3, #9
 8012f7c:	dc02      	bgt.n	8012f84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f80:	843b      	strh	r3, [r7, #32]
 8012f82:	e009      	b.n	8012f98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012f84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012f88:	2b09      	cmp	r3, #9
 8012f8a:	dc02      	bgt.n	8012f92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012f8c:	8bfb      	ldrh	r3, [r7, #30]
 8012f8e:	843b      	strh	r3, [r7, #32]
 8012f90:	e002      	b.n	8012f98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f96:	e054      	b.n	8013042 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012f98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f9c:	2b09      	cmp	r3, #9
 8012f9e:	dd06      	ble.n	8012fae <etharp_find_entry+0x236>
 8012fa0:	4b2b      	ldr	r3, [pc, #172]	; (8013050 <etharp_find_entry+0x2d8>)
 8012fa2:	f240 127f 	movw	r2, #383	; 0x17f
 8012fa6:	492e      	ldr	r1, [pc, #184]	; (8013060 <etharp_find_entry+0x2e8>)
 8012fa8:	482b      	ldr	r0, [pc, #172]	; (8013058 <etharp_find_entry+0x2e0>)
 8012faa:	f002 fa1f 	bl	80153ec <iprintf>
    etharp_free_entry(i);
 8012fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7ff fe06 	bl	8012bc4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012fb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012fbc:	2b09      	cmp	r3, #9
 8012fbe:	dd06      	ble.n	8012fce <etharp_find_entry+0x256>
 8012fc0:	4b23      	ldr	r3, [pc, #140]	; (8013050 <etharp_find_entry+0x2d8>)
 8012fc2:	f240 1283 	movw	r2, #387	; 0x183
 8012fc6:	4926      	ldr	r1, [pc, #152]	; (8013060 <etharp_find_entry+0x2e8>)
 8012fc8:	4823      	ldr	r0, [pc, #140]	; (8013058 <etharp_find_entry+0x2e0>)
 8012fca:	f002 fa0f 	bl	80153ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012fce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fd2:	491e      	ldr	r1, [pc, #120]	; (801304c <etharp_find_entry+0x2d4>)
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	4413      	add	r3, r2
 8012fda:	00db      	lsls	r3, r3, #3
 8012fdc:	440b      	add	r3, r1
 8012fde:	3314      	adds	r3, #20
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d006      	beq.n	8012ff4 <etharp_find_entry+0x27c>
 8012fe6:	4b1a      	ldr	r3, [pc, #104]	; (8013050 <etharp_find_entry+0x2d8>)
 8012fe8:	f240 1285 	movw	r2, #389	; 0x185
 8012fec:	491d      	ldr	r1, [pc, #116]	; (8013064 <etharp_find_entry+0x2ec>)
 8012fee:	481a      	ldr	r0, [pc, #104]	; (8013058 <etharp_find_entry+0x2e0>)
 8012ff0:	f002 f9fc 	bl	80153ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d00b      	beq.n	8013012 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012ffa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	6819      	ldr	r1, [r3, #0]
 8013002:	4812      	ldr	r0, [pc, #72]	; (801304c <etharp_find_entry+0x2d4>)
 8013004:	4613      	mov	r3, r2
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	4413      	add	r3, r2
 801300a:	00db      	lsls	r3, r3, #3
 801300c:	4403      	add	r3, r0
 801300e:	3304      	adds	r3, #4
 8013010:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013016:	490d      	ldr	r1, [pc, #52]	; (801304c <etharp_find_entry+0x2d4>)
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	00db      	lsls	r3, r3, #3
 8013020:	440b      	add	r3, r1
 8013022:	3312      	adds	r3, #18
 8013024:	2200      	movs	r2, #0
 8013026:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013028:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801302c:	4907      	ldr	r1, [pc, #28]	; (801304c <etharp_find_entry+0x2d4>)
 801302e:	4613      	mov	r3, r2
 8013030:	005b      	lsls	r3, r3, #1
 8013032:	4413      	add	r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	440b      	add	r3, r1
 8013038:	3308      	adds	r3, #8
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801303e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013042:	4618      	mov	r0, r3
 8013044:	3728      	adds	r7, #40	; 0x28
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	20004a50 	.word	0x20004a50
 8013050:	08018a28 	.word	0x08018a28
 8013054:	08018a60 	.word	0x08018a60
 8013058:	08018aa0 	.word	0x08018aa0
 801305c:	08018ac8 	.word	0x08018ac8
 8013060:	08018ae0 	.word	0x08018ae0
 8013064:	08018af4 	.word	0x08018af4

08013068 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b088      	sub	sp, #32
 801306c:	af02      	add	r7, sp, #8
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	607a      	str	r2, [r7, #4]
 8013074:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801307c:	2b06      	cmp	r3, #6
 801307e:	d006      	beq.n	801308e <etharp_update_arp_entry+0x26>
 8013080:	4b48      	ldr	r3, [pc, #288]	; (80131a4 <etharp_update_arp_entry+0x13c>)
 8013082:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013086:	4948      	ldr	r1, [pc, #288]	; (80131a8 <etharp_update_arp_entry+0x140>)
 8013088:	4848      	ldr	r0, [pc, #288]	; (80131ac <etharp_update_arp_entry+0x144>)
 801308a:	f002 f9af 	bl	80153ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d012      	beq.n	80130ba <etharp_update_arp_entry+0x52>
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00e      	beq.n	80130ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68f9      	ldr	r1, [r7, #12]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f001 f91e 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 80130a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80130b6:	2be0      	cmp	r3, #224	; 0xe0
 80130b8:	d102      	bne.n	80130c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80130ba:	f06f 030f 	mvn.w	r3, #15
 80130be:	e06c      	b.n	801319a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80130c0:	78fb      	ldrb	r3, [r7, #3]
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	4619      	mov	r1, r3
 80130c6:	68b8      	ldr	r0, [r7, #8]
 80130c8:	f7ff fe56 	bl	8012d78 <etharp_find_entry>
 80130cc:	4603      	mov	r3, r0
 80130ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80130d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	da02      	bge.n	80130de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80130d8:	8afb      	ldrh	r3, [r7, #22]
 80130da:	b25b      	sxtb	r3, r3
 80130dc:	e05d      	b.n	801319a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80130de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80130e2:	4933      	ldr	r1, [pc, #204]	; (80131b0 <etharp_update_arp_entry+0x148>)
 80130e4:	4613      	mov	r3, r2
 80130e6:	005b      	lsls	r3, r3, #1
 80130e8:	4413      	add	r3, r2
 80130ea:	00db      	lsls	r3, r3, #3
 80130ec:	440b      	add	r3, r1
 80130ee:	3314      	adds	r3, #20
 80130f0:	2202      	movs	r2, #2
 80130f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80130f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80130f8:	492d      	ldr	r1, [pc, #180]	; (80131b0 <etharp_update_arp_entry+0x148>)
 80130fa:	4613      	mov	r3, r2
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	4413      	add	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	440b      	add	r3, r1
 8013104:	3308      	adds	r3, #8
 8013106:	68fa      	ldr	r2, [r7, #12]
 8013108:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801310a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801310e:	4613      	mov	r3, r2
 8013110:	005b      	lsls	r3, r3, #1
 8013112:	4413      	add	r3, r2
 8013114:	00db      	lsls	r3, r3, #3
 8013116:	3308      	adds	r3, #8
 8013118:	4a25      	ldr	r2, [pc, #148]	; (80131b0 <etharp_update_arp_entry+0x148>)
 801311a:	4413      	add	r3, r2
 801311c:	3304      	adds	r3, #4
 801311e:	2206      	movs	r2, #6
 8013120:	6879      	ldr	r1, [r7, #4]
 8013122:	4618      	mov	r0, r3
 8013124:	f002 f94f 	bl	80153c6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013128:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801312c:	4920      	ldr	r1, [pc, #128]	; (80131b0 <etharp_update_arp_entry+0x148>)
 801312e:	4613      	mov	r3, r2
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4413      	add	r3, r2
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	440b      	add	r3, r1
 8013138:	3312      	adds	r3, #18
 801313a:	2200      	movs	r2, #0
 801313c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801313e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013142:	491b      	ldr	r1, [pc, #108]	; (80131b0 <etharp_update_arp_entry+0x148>)
 8013144:	4613      	mov	r3, r2
 8013146:	005b      	lsls	r3, r3, #1
 8013148:	4413      	add	r3, r2
 801314a:	00db      	lsls	r3, r3, #3
 801314c:	440b      	add	r3, r1
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d021      	beq.n	8013198 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013154:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013158:	4915      	ldr	r1, [pc, #84]	; (80131b0 <etharp_update_arp_entry+0x148>)
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	00db      	lsls	r3, r3, #3
 8013162:	440b      	add	r3, r1
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013168:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801316c:	4910      	ldr	r1, [pc, #64]	; (80131b0 <etharp_update_arp_entry+0x148>)
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	2200      	movs	r2, #0
 801317a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013186:	9300      	str	r3, [sp, #0]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6939      	ldr	r1, [r7, #16]
 801318c:	68f8      	ldr	r0, [r7, #12]
 801318e:	f001 ffad 	bl	80150ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013192:	6938      	ldr	r0, [r7, #16]
 8013194:	f7f7 fc86 	bl	800aaa4 <pbuf_free>
  }
  return ERR_OK;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3718      	adds	r7, #24
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	08018a28 	.word	0x08018a28
 80131a8:	08018b20 	.word	0x08018b20
 80131ac:	08018aa0 	.word	0x08018aa0
 80131b0:	20004a50 	.word	0x20004a50

080131b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80131bc:	2300      	movs	r3, #0
 80131be:	60fb      	str	r3, [r7, #12]
 80131c0:	e01e      	b.n	8013200 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80131c2:	4913      	ldr	r1, [pc, #76]	; (8013210 <etharp_cleanup_netif+0x5c>)
 80131c4:	68fa      	ldr	r2, [r7, #12]
 80131c6:	4613      	mov	r3, r2
 80131c8:	005b      	lsls	r3, r3, #1
 80131ca:	4413      	add	r3, r2
 80131cc:	00db      	lsls	r3, r3, #3
 80131ce:	440b      	add	r3, r1
 80131d0:	3314      	adds	r3, #20
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80131d6:	7afb      	ldrb	r3, [r7, #11]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d00e      	beq.n	80131fa <etharp_cleanup_netif+0x46>
 80131dc:	490c      	ldr	r1, [pc, #48]	; (8013210 <etharp_cleanup_netif+0x5c>)
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	4613      	mov	r3, r2
 80131e2:	005b      	lsls	r3, r3, #1
 80131e4:	4413      	add	r3, r2
 80131e6:	00db      	lsls	r3, r3, #3
 80131e8:	440b      	add	r3, r1
 80131ea:	3308      	adds	r3, #8
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d102      	bne.n	80131fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f7ff fce5 	bl	8012bc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3301      	adds	r3, #1
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b09      	cmp	r3, #9
 8013204:	dddd      	ble.n	80131c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013206:	bf00      	nop
 8013208:	3710      	adds	r7, #16
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20004a50 	.word	0x20004a50

08013214 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013214:	b5b0      	push	{r4, r5, r7, lr}
 8013216:	b08a      	sub	sp, #40	; 0x28
 8013218:	af04      	add	r7, sp, #16
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d107      	bne.n	8013234 <etharp_input+0x20>
 8013224:	4b3f      	ldr	r3, [pc, #252]	; (8013324 <etharp_input+0x110>)
 8013226:	f240 228a 	movw	r2, #650	; 0x28a
 801322a:	493f      	ldr	r1, [pc, #252]	; (8013328 <etharp_input+0x114>)
 801322c:	483f      	ldr	r0, [pc, #252]	; (801332c <etharp_input+0x118>)
 801322e:	f002 f8dd 	bl	80153ec <iprintf>
 8013232:	e074      	b.n	801331e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	b29b      	uxth	r3, r3
 8013240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013244:	d10c      	bne.n	8013260 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801324a:	2b06      	cmp	r3, #6
 801324c:	d108      	bne.n	8013260 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013252:	2b04      	cmp	r3, #4
 8013254:	d104      	bne.n	8013260 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	885b      	ldrh	r3, [r3, #2]
 801325a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801325c:	2b08      	cmp	r3, #8
 801325e:	d003      	beq.n	8013268 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7f7 fc1f 	bl	800aaa4 <pbuf_free>
    return;
 8013266:	e05a      	b.n	801331e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	330e      	adds	r3, #14
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	3318      	adds	r3, #24
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	3304      	adds	r3, #4
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d102      	bne.n	8013288 <etharp_input+0x74>
    for_us = 0;
 8013282:	2300      	movs	r3, #0
 8013284:	75fb      	strb	r3, [r7, #23]
 8013286:	e009      	b.n	801329c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013288:	68ba      	ldr	r2, [r7, #8]
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	3304      	adds	r3, #4
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	429a      	cmp	r2, r3
 8013292:	bf0c      	ite	eq
 8013294:	2301      	moveq	r3, #1
 8013296:	2300      	movne	r3, #0
 8013298:	b2db      	uxtb	r3, r3
 801329a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	f103 0208 	add.w	r2, r3, #8
 80132a2:	7dfb      	ldrb	r3, [r7, #23]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d001      	beq.n	80132ac <etharp_input+0x98>
 80132a8:	2301      	movs	r3, #1
 80132aa:	e000      	b.n	80132ae <etharp_input+0x9a>
 80132ac:	2302      	movs	r3, #2
 80132ae:	f107 010c 	add.w	r1, r7, #12
 80132b2:	6838      	ldr	r0, [r7, #0]
 80132b4:	f7ff fed8 	bl	8013068 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	88db      	ldrh	r3, [r3, #6]
 80132bc:	b29b      	uxth	r3, r3
 80132be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132c2:	d003      	beq.n	80132cc <etharp_input+0xb8>
 80132c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132c8:	d01e      	beq.n	8013308 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80132ca:	e025      	b.n	8013318 <etharp_input+0x104>
      if (for_us) {
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d021      	beq.n	8013316 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80132e8:	693a      	ldr	r2, [r7, #16]
 80132ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80132ec:	2102      	movs	r1, #2
 80132ee:	9103      	str	r1, [sp, #12]
 80132f0:	f107 010c 	add.w	r1, r7, #12
 80132f4:	9102      	str	r1, [sp, #8]
 80132f6:	9201      	str	r2, [sp, #4]
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	462b      	mov	r3, r5
 80132fc:	4622      	mov	r2, r4
 80132fe:	4601      	mov	r1, r0
 8013300:	6838      	ldr	r0, [r7, #0]
 8013302:	f000 faef 	bl	80138e4 <etharp_raw>
      break;
 8013306:	e006      	b.n	8013316 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013308:	f107 030c 	add.w	r3, r7, #12
 801330c:	4619      	mov	r1, r3
 801330e:	6838      	ldr	r0, [r7, #0]
 8013310:	f7fe f9fe 	bl	8011710 <dhcp_arp_reply>
      break;
 8013314:	e000      	b.n	8013318 <etharp_input+0x104>
      break;
 8013316:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f7f7 fbc3 	bl	800aaa4 <pbuf_free>
}
 801331e:	3718      	adds	r7, #24
 8013320:	46bd      	mov	sp, r7
 8013322:	bdb0      	pop	{r4, r5, r7, pc}
 8013324:	08018a28 	.word	0x08018a28
 8013328:	08018b78 	.word	0x08018b78
 801332c:	08018aa0 	.word	0x08018aa0

08013330 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b086      	sub	sp, #24
 8013334:	af02      	add	r7, sp, #8
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	4613      	mov	r3, r2
 801333c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801333e:	79fa      	ldrb	r2, [r7, #7]
 8013340:	4944      	ldr	r1, [pc, #272]	; (8013454 <etharp_output_to_arp_index+0x124>)
 8013342:	4613      	mov	r3, r2
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4413      	add	r3, r2
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	440b      	add	r3, r1
 801334c:	3314      	adds	r3, #20
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b01      	cmp	r3, #1
 8013352:	d806      	bhi.n	8013362 <etharp_output_to_arp_index+0x32>
 8013354:	4b40      	ldr	r3, [pc, #256]	; (8013458 <etharp_output_to_arp_index+0x128>)
 8013356:	f240 22ef 	movw	r2, #751	; 0x2ef
 801335a:	4940      	ldr	r1, [pc, #256]	; (801345c <etharp_output_to_arp_index+0x12c>)
 801335c:	4840      	ldr	r0, [pc, #256]	; (8013460 <etharp_output_to_arp_index+0x130>)
 801335e:	f002 f845 	bl	80153ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013362:	79fa      	ldrb	r2, [r7, #7]
 8013364:	493b      	ldr	r1, [pc, #236]	; (8013454 <etharp_output_to_arp_index+0x124>)
 8013366:	4613      	mov	r3, r2
 8013368:	005b      	lsls	r3, r3, #1
 801336a:	4413      	add	r3, r2
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	440b      	add	r3, r1
 8013370:	3314      	adds	r3, #20
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	2b02      	cmp	r3, #2
 8013376:	d153      	bne.n	8013420 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013378:	79fa      	ldrb	r2, [r7, #7]
 801337a:	4936      	ldr	r1, [pc, #216]	; (8013454 <etharp_output_to_arp_index+0x124>)
 801337c:	4613      	mov	r3, r2
 801337e:	005b      	lsls	r3, r3, #1
 8013380:	4413      	add	r3, r2
 8013382:	00db      	lsls	r3, r3, #3
 8013384:	440b      	add	r3, r1
 8013386:	3312      	adds	r3, #18
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801338e:	d919      	bls.n	80133c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013390:	79fa      	ldrb	r2, [r7, #7]
 8013392:	4613      	mov	r3, r2
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	4413      	add	r3, r2
 8013398:	00db      	lsls	r3, r3, #3
 801339a:	4a2e      	ldr	r2, [pc, #184]	; (8013454 <etharp_output_to_arp_index+0x124>)
 801339c:	4413      	add	r3, r2
 801339e:	3304      	adds	r3, #4
 80133a0:	4619      	mov	r1, r3
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f000 fb4c 	bl	8013a40 <etharp_request>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d138      	bne.n	8013420 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80133ae:	79fa      	ldrb	r2, [r7, #7]
 80133b0:	4928      	ldr	r1, [pc, #160]	; (8013454 <etharp_output_to_arp_index+0x124>)
 80133b2:	4613      	mov	r3, r2
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	4413      	add	r3, r2
 80133b8:	00db      	lsls	r3, r3, #3
 80133ba:	440b      	add	r3, r1
 80133bc:	3314      	adds	r3, #20
 80133be:	2203      	movs	r2, #3
 80133c0:	701a      	strb	r2, [r3, #0]
 80133c2:	e02d      	b.n	8013420 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80133c4:	79fa      	ldrb	r2, [r7, #7]
 80133c6:	4923      	ldr	r1, [pc, #140]	; (8013454 <etharp_output_to_arp_index+0x124>)
 80133c8:	4613      	mov	r3, r2
 80133ca:	005b      	lsls	r3, r3, #1
 80133cc:	4413      	add	r3, r2
 80133ce:	00db      	lsls	r3, r3, #3
 80133d0:	440b      	add	r3, r1
 80133d2:	3312      	adds	r3, #18
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80133da:	d321      	bcc.n	8013420 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80133dc:	79fa      	ldrb	r2, [r7, #7]
 80133de:	4613      	mov	r3, r2
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	4413      	add	r3, r2
 80133e4:	00db      	lsls	r3, r3, #3
 80133e6:	4a1b      	ldr	r2, [pc, #108]	; (8013454 <etharp_output_to_arp_index+0x124>)
 80133e8:	4413      	add	r3, r2
 80133ea:	1d19      	adds	r1, r3, #4
 80133ec:	79fa      	ldrb	r2, [r7, #7]
 80133ee:	4613      	mov	r3, r2
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	4413      	add	r3, r2
 80133f4:	00db      	lsls	r3, r3, #3
 80133f6:	3308      	adds	r3, #8
 80133f8:	4a16      	ldr	r2, [pc, #88]	; (8013454 <etharp_output_to_arp_index+0x124>)
 80133fa:	4413      	add	r3, r2
 80133fc:	3304      	adds	r3, #4
 80133fe:	461a      	mov	r2, r3
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f000 fafb 	bl	80139fc <etharp_request_dst>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d109      	bne.n	8013420 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801340c:	79fa      	ldrb	r2, [r7, #7]
 801340e:	4911      	ldr	r1, [pc, #68]	; (8013454 <etharp_output_to_arp_index+0x124>)
 8013410:	4613      	mov	r3, r2
 8013412:	005b      	lsls	r3, r3, #1
 8013414:	4413      	add	r3, r2
 8013416:	00db      	lsls	r3, r3, #3
 8013418:	440b      	add	r3, r1
 801341a:	3314      	adds	r3, #20
 801341c:	2203      	movs	r2, #3
 801341e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013426:	79fa      	ldrb	r2, [r7, #7]
 8013428:	4613      	mov	r3, r2
 801342a:	005b      	lsls	r3, r3, #1
 801342c:	4413      	add	r3, r2
 801342e:	00db      	lsls	r3, r3, #3
 8013430:	3308      	adds	r3, #8
 8013432:	4a08      	ldr	r2, [pc, #32]	; (8013454 <etharp_output_to_arp_index+0x124>)
 8013434:	4413      	add	r3, r2
 8013436:	1d1a      	adds	r2, r3, #4
 8013438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	4613      	mov	r3, r2
 8013440:	460a      	mov	r2, r1
 8013442:	68b9      	ldr	r1, [r7, #8]
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f001 fe51 	bl	80150ec <ethernet_output>
 801344a:	4603      	mov	r3, r0
}
 801344c:	4618      	mov	r0, r3
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	20004a50 	.word	0x20004a50
 8013458:	08018a28 	.word	0x08018a28
 801345c:	08018b98 	.word	0x08018b98
 8013460:	08018aa0 	.word	0x08018aa0

08013464 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b08a      	sub	sp, #40	; 0x28
 8013468:	af02      	add	r7, sp, #8
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <etharp_output+0x24>
 801347a:	4b73      	ldr	r3, [pc, #460]	; (8013648 <etharp_output+0x1e4>)
 801347c:	f240 321e 	movw	r2, #798	; 0x31e
 8013480:	4972      	ldr	r1, [pc, #456]	; (801364c <etharp_output+0x1e8>)
 8013482:	4873      	ldr	r0, [pc, #460]	; (8013650 <etharp_output+0x1ec>)
 8013484:	f001 ffb2 	bl	80153ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d106      	bne.n	801349c <etharp_output+0x38>
 801348e:	4b6e      	ldr	r3, [pc, #440]	; (8013648 <etharp_output+0x1e4>)
 8013490:	f240 321f 	movw	r2, #799	; 0x31f
 8013494:	496f      	ldr	r1, [pc, #444]	; (8013654 <etharp_output+0x1f0>)
 8013496:	486e      	ldr	r0, [pc, #440]	; (8013650 <etharp_output+0x1ec>)
 8013498:	f001 ffa8 	bl	80153ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d106      	bne.n	80134b0 <etharp_output+0x4c>
 80134a2:	4b69      	ldr	r3, [pc, #420]	; (8013648 <etharp_output+0x1e4>)
 80134a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80134a8:	496b      	ldr	r1, [pc, #428]	; (8013658 <etharp_output+0x1f4>)
 80134aa:	4869      	ldr	r0, [pc, #420]	; (8013650 <etharp_output+0x1ec>)
 80134ac:	f001 ff9e 	bl	80153ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f000 ff14 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80134c2:	4b66      	ldr	r3, [pc, #408]	; (801365c <etharp_output+0x1f8>)
 80134c4:	61fb      	str	r3, [r7, #28]
 80134c6:	e0af      	b.n	8013628 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134d0:	2be0      	cmp	r3, #224	; 0xe0
 80134d2:	d118      	bne.n	8013506 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80134d4:	2301      	movs	r3, #1
 80134d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80134d8:	2300      	movs	r3, #0
 80134da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80134dc:	235e      	movs	r3, #94	; 0x5e
 80134de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	3301      	adds	r3, #1
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	3302      	adds	r3, #2
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	3303      	adds	r3, #3
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80134fe:	f107 0310 	add.w	r3, r7, #16
 8013502:	61fb      	str	r3, [r7, #28]
 8013504:	e090      	b.n	8013628 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3304      	adds	r3, #4
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	405a      	eors	r2, r3
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	3308      	adds	r3, #8
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4013      	ands	r3, r2
 801351a:	2b00      	cmp	r3, #0
 801351c:	d012      	beq.n	8013544 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013524:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013528:	4293      	cmp	r3, r2
 801352a:	d00b      	beq.n	8013544 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	330c      	adds	r3, #12
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d003      	beq.n	801353e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	330c      	adds	r3, #12
 801353a:	61bb      	str	r3, [r7, #24]
 801353c:	e002      	b.n	8013544 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801353e:	f06f 0303 	mvn.w	r3, #3
 8013542:	e07d      	b.n	8013640 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013544:	4b46      	ldr	r3, [pc, #280]	; (8013660 <etharp_output+0x1fc>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	4619      	mov	r1, r3
 801354a:	4a46      	ldr	r2, [pc, #280]	; (8013664 <etharp_output+0x200>)
 801354c:	460b      	mov	r3, r1
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	440b      	add	r3, r1
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	4413      	add	r3, r2
 8013556:	3314      	adds	r3, #20
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d925      	bls.n	80135aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801355e:	4b40      	ldr	r3, [pc, #256]	; (8013660 <etharp_output+0x1fc>)
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	4619      	mov	r1, r3
 8013564:	4a3f      	ldr	r2, [pc, #252]	; (8013664 <etharp_output+0x200>)
 8013566:	460b      	mov	r3, r1
 8013568:	005b      	lsls	r3, r3, #1
 801356a:	440b      	add	r3, r1
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	4413      	add	r3, r2
 8013570:	3308      	adds	r3, #8
 8013572:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	429a      	cmp	r2, r3
 8013578:	d117      	bne.n	80135aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	4b38      	ldr	r3, [pc, #224]	; (8013660 <etharp_output+0x1fc>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	4618      	mov	r0, r3
 8013584:	4937      	ldr	r1, [pc, #220]	; (8013664 <etharp_output+0x200>)
 8013586:	4603      	mov	r3, r0
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4403      	add	r3, r0
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	440b      	add	r3, r1
 8013590:	3304      	adds	r3, #4
 8013592:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013594:	429a      	cmp	r2, r3
 8013596:	d108      	bne.n	80135aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013598:	4b31      	ldr	r3, [pc, #196]	; (8013660 <etharp_output+0x1fc>)
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	461a      	mov	r2, r3
 801359e:	68b9      	ldr	r1, [r7, #8]
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f7ff fec5 	bl	8013330 <etharp_output_to_arp_index>
 80135a6:	4603      	mov	r3, r0
 80135a8:	e04a      	b.n	8013640 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80135aa:	2300      	movs	r3, #0
 80135ac:	75fb      	strb	r3, [r7, #23]
 80135ae:	e031      	b.n	8013614 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80135b0:	7dfa      	ldrb	r2, [r7, #23]
 80135b2:	492c      	ldr	r1, [pc, #176]	; (8013664 <etharp_output+0x200>)
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	00db      	lsls	r3, r3, #3
 80135bc:	440b      	add	r3, r1
 80135be:	3314      	adds	r3, #20
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d923      	bls.n	801360e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80135c6:	7dfa      	ldrb	r2, [r7, #23]
 80135c8:	4926      	ldr	r1, [pc, #152]	; (8013664 <etharp_output+0x200>)
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	440b      	add	r3, r1
 80135d4:	3308      	adds	r3, #8
 80135d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d117      	bne.n	801360e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	6819      	ldr	r1, [r3, #0]
 80135e2:	7dfa      	ldrb	r2, [r7, #23]
 80135e4:	481f      	ldr	r0, [pc, #124]	; (8013664 <etharp_output+0x200>)
 80135e6:	4613      	mov	r3, r2
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	4413      	add	r3, r2
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	4403      	add	r3, r0
 80135f0:	3304      	adds	r3, #4
 80135f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80135f4:	4299      	cmp	r1, r3
 80135f6:	d10a      	bne.n	801360e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80135f8:	4a19      	ldr	r2, [pc, #100]	; (8013660 <etharp_output+0x1fc>)
 80135fa:	7dfb      	ldrb	r3, [r7, #23]
 80135fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80135fe:	7dfb      	ldrb	r3, [r7, #23]
 8013600:	461a      	mov	r2, r3
 8013602:	68b9      	ldr	r1, [r7, #8]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f7ff fe93 	bl	8013330 <etharp_output_to_arp_index>
 801360a:	4603      	mov	r3, r0
 801360c:	e018      	b.n	8013640 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801360e:	7dfb      	ldrb	r3, [r7, #23]
 8013610:	3301      	adds	r3, #1
 8013612:	75fb      	strb	r3, [r7, #23]
 8013614:	7dfb      	ldrb	r3, [r7, #23]
 8013616:	2b09      	cmp	r3, #9
 8013618:	d9ca      	bls.n	80135b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801361a:	68ba      	ldr	r2, [r7, #8]
 801361c:	69b9      	ldr	r1, [r7, #24]
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f000 f822 	bl	8013668 <etharp_query>
 8013624:	4603      	mov	r3, r0
 8013626:	e00b      	b.n	8013640 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801362e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	68b9      	ldr	r1, [r7, #8]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f001 fd57 	bl	80150ec <ethernet_output>
 801363e:	4603      	mov	r3, r0
}
 8013640:	4618      	mov	r0, r3
 8013642:	3720      	adds	r7, #32
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}
 8013648:	08018a28 	.word	0x08018a28
 801364c:	08018b78 	.word	0x08018b78
 8013650:	08018aa0 	.word	0x08018aa0
 8013654:	08018bc8 	.word	0x08018bc8
 8013658:	08018b68 	.word	0x08018b68
 801365c:	08019250 	.word	0x08019250
 8013660:	20004b40 	.word	0x20004b40
 8013664:	20004a50 	.word	0x20004a50

08013668 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08c      	sub	sp, #48	; 0x30
 801366c:	af02      	add	r7, sp, #8
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	3326      	adds	r3, #38	; 0x26
 8013678:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801367a:	23ff      	movs	r3, #255	; 0xff
 801367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	68f9      	ldr	r1, [r7, #12]
 801368a:	4618      	mov	r0, r3
 801368c:	f000 fe2a 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10c      	bne.n	80136b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801369e:	2be0      	cmp	r3, #224	; 0xe0
 80136a0:	d006      	beq.n	80136b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d003      	beq.n	80136b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d102      	bne.n	80136b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80136b0:	f06f 030f 	mvn.w	r3, #15
 80136b4:	e102      	b.n	80138bc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	2101      	movs	r1, #1
 80136ba:	68b8      	ldr	r0, [r7, #8]
 80136bc:	f7ff fb5c 	bl	8012d78 <etharp_find_entry>
 80136c0:	4603      	mov	r3, r0
 80136c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80136c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	da02      	bge.n	80136d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80136cc:	8a7b      	ldrh	r3, [r7, #18]
 80136ce:	b25b      	sxtb	r3, r3
 80136d0:	e0f4      	b.n	80138bc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80136d2:	8a7b      	ldrh	r3, [r7, #18]
 80136d4:	2b7e      	cmp	r3, #126	; 0x7e
 80136d6:	d906      	bls.n	80136e6 <etharp_query+0x7e>
 80136d8:	4b7a      	ldr	r3, [pc, #488]	; (80138c4 <etharp_query+0x25c>)
 80136da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80136de:	497a      	ldr	r1, [pc, #488]	; (80138c8 <etharp_query+0x260>)
 80136e0:	487a      	ldr	r0, [pc, #488]	; (80138cc <etharp_query+0x264>)
 80136e2:	f001 fe83 	bl	80153ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 80136e6:	8a7b      	ldrh	r3, [r7, #18]
 80136e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80136ea:	7c7a      	ldrb	r2, [r7, #17]
 80136ec:	4978      	ldr	r1, [pc, #480]	; (80138d0 <etharp_query+0x268>)
 80136ee:	4613      	mov	r3, r2
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4413      	add	r3, r2
 80136f4:	00db      	lsls	r3, r3, #3
 80136f6:	440b      	add	r3, r1
 80136f8:	3314      	adds	r3, #20
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d115      	bne.n	801372c <etharp_query+0xc4>
    is_new_entry = 1;
 8013700:	2301      	movs	r3, #1
 8013702:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013704:	7c7a      	ldrb	r2, [r7, #17]
 8013706:	4972      	ldr	r1, [pc, #456]	; (80138d0 <etharp_query+0x268>)
 8013708:	4613      	mov	r3, r2
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	4413      	add	r3, r2
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	440b      	add	r3, r1
 8013712:	3314      	adds	r3, #20
 8013714:	2201      	movs	r2, #1
 8013716:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013718:	7c7a      	ldrb	r2, [r7, #17]
 801371a:	496d      	ldr	r1, [pc, #436]	; (80138d0 <etharp_query+0x268>)
 801371c:	4613      	mov	r3, r2
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	4413      	add	r3, r2
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	440b      	add	r3, r1
 8013726:	3308      	adds	r3, #8
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801372c:	7c7a      	ldrb	r2, [r7, #17]
 801372e:	4968      	ldr	r1, [pc, #416]	; (80138d0 <etharp_query+0x268>)
 8013730:	4613      	mov	r3, r2
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	4413      	add	r3, r2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	440b      	add	r3, r1
 801373a:	3314      	adds	r3, #20
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	2b01      	cmp	r3, #1
 8013740:	d011      	beq.n	8013766 <etharp_query+0xfe>
 8013742:	7c7a      	ldrb	r2, [r7, #17]
 8013744:	4962      	ldr	r1, [pc, #392]	; (80138d0 <etharp_query+0x268>)
 8013746:	4613      	mov	r3, r2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	4413      	add	r3, r2
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	440b      	add	r3, r1
 8013750:	3314      	adds	r3, #20
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	2b01      	cmp	r3, #1
 8013756:	d806      	bhi.n	8013766 <etharp_query+0xfe>
 8013758:	4b5a      	ldr	r3, [pc, #360]	; (80138c4 <etharp_query+0x25c>)
 801375a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801375e:	495d      	ldr	r1, [pc, #372]	; (80138d4 <etharp_query+0x26c>)
 8013760:	485a      	ldr	r0, [pc, #360]	; (80138cc <etharp_query+0x264>)
 8013762:	f001 fe43 	bl	80153ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013766:	6a3b      	ldr	r3, [r7, #32]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d102      	bne.n	8013772 <etharp_query+0x10a>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10c      	bne.n	801378c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013772:	68b9      	ldr	r1, [r7, #8]
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f000 f963 	bl	8013a40 <etharp_request>
 801377a:	4603      	mov	r3, r0
 801377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d102      	bne.n	801378c <etharp_query+0x124>
      return result;
 8013786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801378a:	e097      	b.n	80138bc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d106      	bne.n	80137a0 <etharp_query+0x138>
 8013792:	4b4c      	ldr	r3, [pc, #304]	; (80138c4 <etharp_query+0x25c>)
 8013794:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013798:	494f      	ldr	r1, [pc, #316]	; (80138d8 <etharp_query+0x270>)
 801379a:	484c      	ldr	r0, [pc, #304]	; (80138cc <etharp_query+0x264>)
 801379c:	f001 fe26 	bl	80153ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80137a0:	7c7a      	ldrb	r2, [r7, #17]
 80137a2:	494b      	ldr	r1, [pc, #300]	; (80138d0 <etharp_query+0x268>)
 80137a4:	4613      	mov	r3, r2
 80137a6:	005b      	lsls	r3, r3, #1
 80137a8:	4413      	add	r3, r2
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	440b      	add	r3, r1
 80137ae:	3314      	adds	r3, #20
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	2b01      	cmp	r3, #1
 80137b4:	d918      	bls.n	80137e8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80137b6:	4a49      	ldr	r2, [pc, #292]	; (80138dc <etharp_query+0x274>)
 80137b8:	7c7b      	ldrb	r3, [r7, #17]
 80137ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80137bc:	7c7a      	ldrb	r2, [r7, #17]
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	3308      	adds	r3, #8
 80137c8:	4a41      	ldr	r2, [pc, #260]	; (80138d0 <etharp_query+0x268>)
 80137ca:	4413      	add	r3, r2
 80137cc:	1d1a      	adds	r2, r3, #4
 80137ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	4613      	mov	r3, r2
 80137d6:	697a      	ldr	r2, [r7, #20]
 80137d8:	6879      	ldr	r1, [r7, #4]
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f001 fc86 	bl	80150ec <ethernet_output>
 80137e0:	4603      	mov	r3, r0
 80137e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137e6:	e067      	b.n	80138b8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80137e8:	7c7a      	ldrb	r2, [r7, #17]
 80137ea:	4939      	ldr	r1, [pc, #228]	; (80138d0 <etharp_query+0x268>)
 80137ec:	4613      	mov	r3, r2
 80137ee:	005b      	lsls	r3, r3, #1
 80137f0:	4413      	add	r3, r2
 80137f2:	00db      	lsls	r3, r3, #3
 80137f4:	440b      	add	r3, r1
 80137f6:	3314      	adds	r3, #20
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d15c      	bne.n	80138b8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80137fe:	2300      	movs	r3, #0
 8013800:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013806:	e01c      	b.n	8013842 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	895a      	ldrh	r2, [r3, #10]
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	891b      	ldrh	r3, [r3, #8]
 8013810:	429a      	cmp	r2, r3
 8013812:	d10a      	bne.n	801382a <etharp_query+0x1c2>
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <etharp_query+0x1c2>
 801381c:	4b29      	ldr	r3, [pc, #164]	; (80138c4 <etharp_query+0x25c>)
 801381e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013822:	492f      	ldr	r1, [pc, #188]	; (80138e0 <etharp_query+0x278>)
 8013824:	4829      	ldr	r0, [pc, #164]	; (80138cc <etharp_query+0x264>)
 8013826:	f001 fde1 	bl	80153ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	7b1b      	ldrb	r3, [r3, #12]
 801382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013832:	2b00      	cmp	r3, #0
 8013834:	d002      	beq.n	801383c <etharp_query+0x1d4>
        copy_needed = 1;
 8013836:	2301      	movs	r3, #1
 8013838:	61bb      	str	r3, [r7, #24]
        break;
 801383a:	e005      	b.n	8013848 <etharp_query+0x1e0>
      }
      p = p->next;
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1df      	bne.n	8013808 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d007      	beq.n	801385e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013854:	200e      	movs	r0, #14
 8013856:	f7f7 fb9d 	bl	800af94 <pbuf_clone>
 801385a:	61f8      	str	r0, [r7, #28]
 801385c:	e004      	b.n	8013868 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013862:	69f8      	ldr	r0, [r7, #28]
 8013864:	f7f7 f9c4 	bl	800abf0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d021      	beq.n	80138b2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801386e:	7c7a      	ldrb	r2, [r7, #17]
 8013870:	4917      	ldr	r1, [pc, #92]	; (80138d0 <etharp_query+0x268>)
 8013872:	4613      	mov	r3, r2
 8013874:	005b      	lsls	r3, r3, #1
 8013876:	4413      	add	r3, r2
 8013878:	00db      	lsls	r3, r3, #3
 801387a:	440b      	add	r3, r1
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00a      	beq.n	8013898 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013882:	7c7a      	ldrb	r2, [r7, #17]
 8013884:	4912      	ldr	r1, [pc, #72]	; (80138d0 <etharp_query+0x268>)
 8013886:	4613      	mov	r3, r2
 8013888:	005b      	lsls	r3, r3, #1
 801388a:	4413      	add	r3, r2
 801388c:	00db      	lsls	r3, r3, #3
 801388e:	440b      	add	r3, r1
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4618      	mov	r0, r3
 8013894:	f7f7 f906 	bl	800aaa4 <pbuf_free>
      }
      arp_table[i].q = p;
 8013898:	7c7a      	ldrb	r2, [r7, #17]
 801389a:	490d      	ldr	r1, [pc, #52]	; (80138d0 <etharp_query+0x268>)
 801389c:	4613      	mov	r3, r2
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	4413      	add	r3, r2
 80138a2:	00db      	lsls	r3, r3, #3
 80138a4:	440b      	add	r3, r1
 80138a6:	69fa      	ldr	r2, [r7, #28]
 80138a8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80138aa:	2300      	movs	r3, #0
 80138ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80138b0:	e002      	b.n	80138b8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80138b2:	23ff      	movs	r3, #255	; 0xff
 80138b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80138b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3728      	adds	r7, #40	; 0x28
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	08018a28 	.word	0x08018a28
 80138c8:	08018bd4 	.word	0x08018bd4
 80138cc:	08018aa0 	.word	0x08018aa0
 80138d0:	20004a50 	.word	0x20004a50
 80138d4:	08018be4 	.word	0x08018be4
 80138d8:	08018bc8 	.word	0x08018bc8
 80138dc:	20004b40 	.word	0x20004b40
 80138e0:	08018c0c 	.word	0x08018c0c

080138e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b08a      	sub	sp, #40	; 0x28
 80138e8:	af02      	add	r7, sp, #8
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
 80138f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d106      	bne.n	801390a <etharp_raw+0x26>
 80138fc:	4b3a      	ldr	r3, [pc, #232]	; (80139e8 <etharp_raw+0x104>)
 80138fe:	f240 4257 	movw	r2, #1111	; 0x457
 8013902:	493a      	ldr	r1, [pc, #232]	; (80139ec <etharp_raw+0x108>)
 8013904:	483a      	ldr	r0, [pc, #232]	; (80139f0 <etharp_raw+0x10c>)
 8013906:	f001 fd71 	bl	80153ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801390a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801390e:	211c      	movs	r1, #28
 8013910:	200e      	movs	r0, #14
 8013912:	f7f6 fde7 	bl	800a4e4 <pbuf_alloc>
 8013916:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d102      	bne.n	8013924 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801391e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013922:	e05d      	b.n	80139e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	895b      	ldrh	r3, [r3, #10]
 8013928:	2b1b      	cmp	r3, #27
 801392a:	d806      	bhi.n	801393a <etharp_raw+0x56>
 801392c:	4b2e      	ldr	r3, [pc, #184]	; (80139e8 <etharp_raw+0x104>)
 801392e:	f240 4263 	movw	r2, #1123	; 0x463
 8013932:	4930      	ldr	r1, [pc, #192]	; (80139f4 <etharp_raw+0x110>)
 8013934:	482e      	ldr	r0, [pc, #184]	; (80139f0 <etharp_raw+0x10c>)
 8013936:	f001 fd59 	bl	80153ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013940:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013942:	4618      	mov	r0, r3
 8013944:	f7f5 fd78 	bl	8009438 <lwip_htons>
 8013948:	4603      	mov	r3, r0
 801394a:	461a      	mov	r2, r3
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013956:	2b06      	cmp	r3, #6
 8013958:	d006      	beq.n	8013968 <etharp_raw+0x84>
 801395a:	4b23      	ldr	r3, [pc, #140]	; (80139e8 <etharp_raw+0x104>)
 801395c:	f240 426a 	movw	r2, #1130	; 0x46a
 8013960:	4925      	ldr	r1, [pc, #148]	; (80139f8 <etharp_raw+0x114>)
 8013962:	4823      	ldr	r0, [pc, #140]	; (80139f0 <etharp_raw+0x10c>)
 8013964:	f001 fd42 	bl	80153ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	3308      	adds	r3, #8
 801396c:	2206      	movs	r2, #6
 801396e:	6839      	ldr	r1, [r7, #0]
 8013970:	4618      	mov	r0, r3
 8013972:	f001 fd28 	bl	80153c6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	3312      	adds	r3, #18
 801397a:	2206      	movs	r2, #6
 801397c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801397e:	4618      	mov	r0, r3
 8013980:	f001 fd21 	bl	80153c6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	330e      	adds	r3, #14
 8013988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801398a:	6812      	ldr	r2, [r2, #0]
 801398c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	3318      	adds	r3, #24
 8013992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013994:	6812      	ldr	r2, [r2, #0]
 8013996:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	2200      	movs	r2, #0
 801399c:	701a      	strb	r2, [r3, #0]
 801399e:	2200      	movs	r2, #0
 80139a0:	f042 0201 	orr.w	r2, r2, #1
 80139a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	2200      	movs	r2, #0
 80139aa:	f042 0208 	orr.w	r2, r2, #8
 80139ae:	709a      	strb	r2, [r3, #2]
 80139b0:	2200      	movs	r2, #0
 80139b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2206      	movs	r2, #6
 80139b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	2204      	movs	r2, #4
 80139be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80139c0:	f640 0306 	movw	r3, #2054	; 0x806
 80139c4:	9300      	str	r3, [sp, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	69b9      	ldr	r1, [r7, #24]
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f001 fb8d 	bl	80150ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80139d2:	69b8      	ldr	r0, [r7, #24]
 80139d4:	f7f7 f866 	bl	800aaa4 <pbuf_free>
  p = NULL;
 80139d8:	2300      	movs	r3, #0
 80139da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80139dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3720      	adds	r7, #32
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	08018a28 	.word	0x08018a28
 80139ec:	08018b78 	.word	0x08018b78
 80139f0:	08018aa0 	.word	0x08018aa0
 80139f4:	08018c28 	.word	0x08018c28
 80139f8:	08018c5c 	.word	0x08018c5c

080139fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b088      	sub	sp, #32
 8013a00:	af04      	add	r7, sp, #16
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a18:	2201      	movs	r2, #1
 8013a1a:	9203      	str	r2, [sp, #12]
 8013a1c:	68ba      	ldr	r2, [r7, #8]
 8013a1e:	9202      	str	r2, [sp, #8]
 8013a20:	4a06      	ldr	r2, [pc, #24]	; (8013a3c <etharp_request_dst+0x40>)
 8013a22:	9201      	str	r2, [sp, #4]
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	4603      	mov	r3, r0
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f7ff ff5a 	bl	80138e4 <etharp_raw>
 8013a30:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3710      	adds	r7, #16
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	08019258 	.word	0x08019258

08013a40 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013a4a:	4a05      	ldr	r2, [pc, #20]	; (8013a60 <etharp_request+0x20>)
 8013a4c:	6839      	ldr	r1, [r7, #0]
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f7ff ffd4 	bl	80139fc <etharp_request_dst>
 8013a54:	4603      	mov	r3, r0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	08019250 	.word	0x08019250

08013a64 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b08e      	sub	sp, #56	; 0x38
 8013a68:	af04      	add	r7, sp, #16
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013a6e:	4b79      	ldr	r3, [pc, #484]	; (8013c54 <icmp_input+0x1f0>)
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	f003 030f 	and.w	r3, r3, #15
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a86:	2b13      	cmp	r3, #19
 8013a88:	f240 80cd 	bls.w	8013c26 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	895b      	ldrh	r3, [r3, #10]
 8013a90:	2b03      	cmp	r3, #3
 8013a92:	f240 80ca 	bls.w	8013c2a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013aa0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 80b7 	beq.w	8013c18 <icmp_input+0x1b4>
 8013aaa:	2b08      	cmp	r3, #8
 8013aac:	f040 80b7 	bne.w	8013c1e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013ab0:	4b69      	ldr	r3, [pc, #420]	; (8013c58 <icmp_input+0x1f4>)
 8013ab2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ab4:	4b67      	ldr	r3, [pc, #412]	; (8013c54 <icmp_input+0x1f0>)
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013abc:	2be0      	cmp	r3, #224	; 0xe0
 8013abe:	f000 80bb 	beq.w	8013c38 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013ac2:	4b64      	ldr	r3, [pc, #400]	; (8013c54 <icmp_input+0x1f0>)
 8013ac4:	695a      	ldr	r2, [r3, #20]
 8013ac6:	4b63      	ldr	r3, [pc, #396]	; (8013c54 <icmp_input+0x1f0>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	4619      	mov	r1, r3
 8013acc:	4610      	mov	r0, r2
 8013ace:	f000 fc09 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	f040 80b1 	bne.w	8013c3c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	891b      	ldrh	r3, [r3, #8]
 8013ade:	2b07      	cmp	r3, #7
 8013ae0:	f240 80a5 	bls.w	8013c2e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ae6:	330e      	adds	r3, #14
 8013ae8:	4619      	mov	r1, r3
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f7f6 ff44 	bl	800a978 <pbuf_add_header>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d04b      	beq.n	8013b8e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	891a      	ldrh	r2, [r3, #8]
 8013afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013afc:	4413      	add	r3, r2
 8013afe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	891b      	ldrh	r3, [r3, #8]
 8013b04:	8b7a      	ldrh	r2, [r7, #26]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	f0c0 809a 	bcc.w	8013c40 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013b0c:	8b7b      	ldrh	r3, [r7, #26]
 8013b0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b12:	4619      	mov	r1, r3
 8013b14:	200e      	movs	r0, #14
 8013b16:	f7f6 fce5 	bl	800a4e4 <pbuf_alloc>
 8013b1a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	f000 8090 	beq.w	8013c44 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	895b      	ldrh	r3, [r3, #10]
 8013b28:	461a      	mov	r2, r3
 8013b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d203      	bcs.n	8013b3a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013b32:	6978      	ldr	r0, [r7, #20]
 8013b34:	f7f6 ffb6 	bl	800aaa4 <pbuf_free>
          goto icmperr;
 8013b38:	e085      	b.n	8013c46 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b42:	4618      	mov	r0, r3
 8013b44:	f001 fc3f 	bl	80153c6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	6978      	ldr	r0, [r7, #20]
 8013b4e:	f7f6 ff23 	bl	800a998 <pbuf_remove_header>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d009      	beq.n	8013b6c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013b58:	4b40      	ldr	r3, [pc, #256]	; (8013c5c <icmp_input+0x1f8>)
 8013b5a:	22b6      	movs	r2, #182	; 0xb6
 8013b5c:	4940      	ldr	r1, [pc, #256]	; (8013c60 <icmp_input+0x1fc>)
 8013b5e:	4841      	ldr	r0, [pc, #260]	; (8013c64 <icmp_input+0x200>)
 8013b60:	f001 fc44 	bl	80153ec <iprintf>
          pbuf_free(r);
 8013b64:	6978      	ldr	r0, [r7, #20]
 8013b66:	f7f6 ff9d 	bl	800aaa4 <pbuf_free>
          goto icmperr;
 8013b6a:	e06c      	b.n	8013c46 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	6978      	ldr	r0, [r7, #20]
 8013b70:	f7f7 f8cc 	bl	800ad0c <pbuf_copy>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d003      	beq.n	8013b82 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013b7a:	6978      	ldr	r0, [r7, #20]
 8013b7c:	f7f6 ff92 	bl	800aaa4 <pbuf_free>
          goto icmperr;
 8013b80:	e061      	b.n	8013c46 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f7f6 ff8e 	bl	800aaa4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	607b      	str	r3, [r7, #4]
 8013b8c:	e00f      	b.n	8013bae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013b8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b90:	330e      	adds	r3, #14
 8013b92:	4619      	mov	r1, r3
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7f6 feff 	bl	800a998 <pbuf_remove_header>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d006      	beq.n	8013bae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013ba0:	4b2e      	ldr	r3, [pc, #184]	; (8013c5c <icmp_input+0x1f8>)
 8013ba2:	22c7      	movs	r2, #199	; 0xc7
 8013ba4:	4930      	ldr	r1, [pc, #192]	; (8013c68 <icmp_input+0x204>)
 8013ba6:	482f      	ldr	r0, [pc, #188]	; (8013c64 <icmp_input+0x200>)
 8013ba8:	f001 fc20 	bl	80153ec <iprintf>
          goto icmperr;
 8013bac:	e04b      	b.n	8013c46 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f7f6 fedd 	bl	800a978 <pbuf_add_header>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d12b      	bne.n	8013c1c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013bd2:	4b20      	ldr	r3, [pc, #128]	; (8013c54 <icmp_input+0x1f0>)
 8013bd4:	691a      	ldr	r2, [r3, #16]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	2200      	movs	r2, #0
 8013be4:	709a      	strb	r2, [r3, #2]
 8013be6:	2200      	movs	r2, #0
 8013be8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	22ff      	movs	r2, #255	; 0xff
 8013bee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	729a      	strb	r2, [r3, #10]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	9302      	str	r3, [sp, #8]
 8013bfe:	2301      	movs	r3, #1
 8013c00:	9301      	str	r3, [sp, #4]
 8013c02:	2300      	movs	r3, #0
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	23ff      	movs	r3, #255	; 0xff
 8013c08:	2200      	movs	r2, #0
 8013c0a:	69f9      	ldr	r1, [r7, #28]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f000 fa91 	bl	8014134 <ip4_output_if>
 8013c12:	4603      	mov	r3, r0
 8013c14:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013c16:	e001      	b.n	8013c1c <icmp_input+0x1b8>
      break;
 8013c18:	bf00      	nop
 8013c1a:	e000      	b.n	8013c1e <icmp_input+0x1ba>
      break;
 8013c1c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7f6 ff40 	bl	800aaa4 <pbuf_free>
  return;
 8013c24:	e013      	b.n	8013c4e <icmp_input+0x1ea>
    goto lenerr;
 8013c26:	bf00      	nop
 8013c28:	e002      	b.n	8013c30 <icmp_input+0x1cc>
    goto lenerr;
 8013c2a:	bf00      	nop
 8013c2c:	e000      	b.n	8013c30 <icmp_input+0x1cc>
        goto lenerr;
 8013c2e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7f6 ff37 	bl	800aaa4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013c36:	e00a      	b.n	8013c4e <icmp_input+0x1ea>
        goto icmperr;
 8013c38:	bf00      	nop
 8013c3a:	e004      	b.n	8013c46 <icmp_input+0x1e2>
        goto icmperr;
 8013c3c:	bf00      	nop
 8013c3e:	e002      	b.n	8013c46 <icmp_input+0x1e2>
          goto icmperr;
 8013c40:	bf00      	nop
 8013c42:	e000      	b.n	8013c46 <icmp_input+0x1e2>
          goto icmperr;
 8013c44:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7f6 ff2c 	bl	800aaa4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013c4c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013c4e:	3728      	adds	r7, #40	; 0x28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	2000818c 	.word	0x2000818c
 8013c58:	200081a0 	.word	0x200081a0
 8013c5c:	08018ca0 	.word	0x08018ca0
 8013c60:	08018cd8 	.word	0x08018cd8
 8013c64:	08018d10 	.word	0x08018d10
 8013c68:	08018d38 	.word	0x08018d38

08013c6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	460b      	mov	r3, r1
 8013c76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013c78:	78fb      	ldrb	r3, [r7, #3]
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	2103      	movs	r1, #3
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f000 f814 	bl	8013cac <icmp_send_response>
}
 8013c84:	bf00      	nop
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	460b      	mov	r3, r1
 8013c96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013c98:	78fb      	ldrb	r3, [r7, #3]
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	210b      	movs	r1, #11
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 f804 	bl	8013cac <icmp_send_response>
}
 8013ca4:	bf00      	nop
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b08c      	sub	sp, #48	; 0x30
 8013cb0:	af04      	add	r7, sp, #16
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	70fb      	strb	r3, [r7, #3]
 8013cb8:	4613      	mov	r3, r2
 8013cba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013cbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cc0:	2124      	movs	r1, #36	; 0x24
 8013cc2:	2022      	movs	r0, #34	; 0x22
 8013cc4:	f7f6 fc0e 	bl	800a4e4 <pbuf_alloc>
 8013cc8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d04c      	beq.n	8013d6a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	895b      	ldrh	r3, [r3, #10]
 8013cd4:	2b23      	cmp	r3, #35	; 0x23
 8013cd6:	d806      	bhi.n	8013ce6 <icmp_send_response+0x3a>
 8013cd8:	4b26      	ldr	r3, [pc, #152]	; (8013d74 <icmp_send_response+0xc8>)
 8013cda:	f240 1269 	movw	r2, #361	; 0x169
 8013cde:	4926      	ldr	r1, [pc, #152]	; (8013d78 <icmp_send_response+0xcc>)
 8013ce0:	4826      	ldr	r0, [pc, #152]	; (8013d7c <icmp_send_response+0xd0>)
 8013ce2:	f001 fb83 	bl	80153ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	78fa      	ldrb	r2, [r7, #3]
 8013cf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	78ba      	ldrb	r2, [r7, #2]
 8013cfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2200      	movs	r2, #0
 8013d02:	711a      	strb	r2, [r3, #4]
 8013d04:	2200      	movs	r2, #0
 8013d06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	719a      	strb	r2, [r3, #6]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	f103 0008 	add.w	r0, r3, #8
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	221c      	movs	r2, #28
 8013d20:	4619      	mov	r1, r3
 8013d22:	f001 fb50 	bl	80153c6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013d2c:	f107 030c 	add.w	r3, r7, #12
 8013d30:	4618      	mov	r0, r3
 8013d32:	f000 f825 	bl	8013d80 <ip4_route>
 8013d36:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d011      	beq.n	8013d62 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	2200      	movs	r2, #0
 8013d42:	709a      	strb	r2, [r3, #2]
 8013d44:	2200      	movs	r2, #0
 8013d46:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013d48:	f107 020c 	add.w	r2, r7, #12
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	9302      	str	r3, [sp, #8]
 8013d50:	2301      	movs	r3, #1
 8013d52:	9301      	str	r3, [sp, #4]
 8013d54:	2300      	movs	r3, #0
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	23ff      	movs	r3, #255	; 0xff
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	69f8      	ldr	r0, [r7, #28]
 8013d5e:	f000 f9e9 	bl	8014134 <ip4_output_if>
  }
  pbuf_free(q);
 8013d62:	69f8      	ldr	r0, [r7, #28]
 8013d64:	f7f6 fe9e 	bl	800aaa4 <pbuf_free>
 8013d68:	e000      	b.n	8013d6c <icmp_send_response+0xc0>
    return;
 8013d6a:	bf00      	nop
}
 8013d6c:	3720      	adds	r7, #32
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	08018ca0 	.word	0x08018ca0
 8013d78:	08018d6c 	.word	0x08018d6c
 8013d7c:	08018d10 	.word	0x08018d10

08013d80 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b085      	sub	sp, #20
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013d88:	4b33      	ldr	r3, [pc, #204]	; (8013e58 <ip4_route+0xd8>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	e036      	b.n	8013dfe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d96:	f003 0301 	and.w	r3, r3, #1
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d02b      	beq.n	8013df8 <ip4_route+0x78>
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013da6:	089b      	lsrs	r3, r3, #2
 8013da8:	f003 0301 	and.w	r3, r3, #1
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d022      	beq.n	8013df8 <ip4_route+0x78>
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	3304      	adds	r3, #4
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d01d      	beq.n	8013df8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	3304      	adds	r3, #4
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	405a      	eors	r2, r3
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	3308      	adds	r3, #8
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4013      	ands	r3, r2
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d101      	bne.n	8013dd8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	e038      	b.n	8013e4a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dde:	f003 0302 	and.w	r3, r3, #2
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d108      	bne.n	8013df8 <ip4_route+0x78>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	330c      	adds	r3, #12
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d101      	bne.n	8013df8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	e028      	b.n	8013e4a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	60fb      	str	r3, [r7, #12]
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1c5      	bne.n	8013d90 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013e04:	4b15      	ldr	r3, [pc, #84]	; (8013e5c <ip4_route+0xdc>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d01a      	beq.n	8013e42 <ip4_route+0xc2>
 8013e0c:	4b13      	ldr	r3, [pc, #76]	; (8013e5c <ip4_route+0xdc>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e14:	f003 0301 	and.w	r3, r3, #1
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d012      	beq.n	8013e42 <ip4_route+0xc2>
 8013e1c:	4b0f      	ldr	r3, [pc, #60]	; (8013e5c <ip4_route+0xdc>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e24:	f003 0304 	and.w	r3, r3, #4
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00a      	beq.n	8013e42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013e2c:	4b0b      	ldr	r3, [pc, #44]	; (8013e5c <ip4_route+0xdc>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	3304      	adds	r3, #4
 8013e32:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d004      	beq.n	8013e42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8013e40:	d101      	bne.n	8013e46 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013e42:	2300      	movs	r3, #0
 8013e44:	e001      	b.n	8013e4a <ip4_route+0xca>
  }

  return netif_default;
 8013e46:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <ip4_route+0xdc>)
 8013e48:	681b      	ldr	r3, [r3, #0]
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3714      	adds	r7, #20
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop
 8013e58:	2000b8b0 	.word	0x2000b8b0
 8013e5c:	2000b8b4 	.word	0x2000b8b4

08013e60 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e6e:	f003 0301 	and.w	r3, r3, #1
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d016      	beq.n	8013ea6 <ip4_input_accept+0x46>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	3304      	adds	r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d011      	beq.n	8013ea6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013e82:	4b0b      	ldr	r3, [pc, #44]	; (8013eb0 <ip4_input_accept+0x50>)
 8013e84:	695a      	ldr	r2, [r3, #20]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d008      	beq.n	8013ea2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013e90:	4b07      	ldr	r3, [pc, #28]	; (8013eb0 <ip4_input_accept+0x50>)
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	6879      	ldr	r1, [r7, #4]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f000 fa24 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 8013e9c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d001      	beq.n	8013ea6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e000      	b.n	8013ea8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013ea6:	2300      	movs	r3, #0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	2000818c 	.word	0x2000818c

08013eb4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b088      	sub	sp, #32
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	091b      	lsrs	r3, r3, #4
 8013ece:	b2db      	uxtb	r3, r3
 8013ed0:	2b04      	cmp	r3, #4
 8013ed2:	d004      	beq.n	8013ede <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f7f6 fde5 	bl	800aaa4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013eda:	2300      	movs	r3, #0
 8013edc:	e121      	b.n	8014122 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	f003 030f 	and.w	r3, r3, #15
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	009b      	lsls	r3, r3, #2
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013eee:	69fb      	ldr	r3, [r7, #28]
 8013ef0:	885b      	ldrh	r3, [r3, #2]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7f5 fa9f 	bl	8009438 <lwip_htons>
 8013efa:	4603      	mov	r3, r0
 8013efc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	891b      	ldrh	r3, [r3, #8]
 8013f02:	8a3a      	ldrh	r2, [r7, #16]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d204      	bcs.n	8013f12 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013f08:	8a3b      	ldrh	r3, [r7, #16]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7f6 fc43 	bl	800a798 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	895b      	ldrh	r3, [r3, #10]
 8013f16:	8a7a      	ldrh	r2, [r7, #18]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d807      	bhi.n	8013f2c <ip4_input+0x78>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	891b      	ldrh	r3, [r3, #8]
 8013f20:	8a3a      	ldrh	r2, [r7, #16]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d802      	bhi.n	8013f2c <ip4_input+0x78>
 8013f26:	8a7b      	ldrh	r3, [r7, #18]
 8013f28:	2b13      	cmp	r3, #19
 8013f2a:	d804      	bhi.n	8013f36 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7f6 fdb9 	bl	800aaa4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013f32:	2300      	movs	r3, #0
 8013f34:	e0f5      	b.n	8014122 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	691b      	ldr	r3, [r3, #16]
 8013f3a:	4a7c      	ldr	r2, [pc, #496]	; (801412c <ip4_input+0x278>)
 8013f3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	4a7a      	ldr	r2, [pc, #488]	; (801412c <ip4_input+0x278>)
 8013f44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f46:	4b79      	ldr	r3, [pc, #484]	; (801412c <ip4_input+0x278>)
 8013f48:	695b      	ldr	r3, [r3, #20]
 8013f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f4e:	2be0      	cmp	r3, #224	; 0xe0
 8013f50:	d112      	bne.n	8013f78 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d007      	beq.n	8013f72 <ip4_input+0xbe>
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	3304      	adds	r3, #4
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d002      	beq.n	8013f72 <ip4_input+0xbe>
      netif = inp;
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	61bb      	str	r3, [r7, #24]
 8013f70:	e02a      	b.n	8013fc8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013f72:	2300      	movs	r3, #0
 8013f74:	61bb      	str	r3, [r7, #24]
 8013f76:	e027      	b.n	8013fc8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013f78:	6838      	ldr	r0, [r7, #0]
 8013f7a:	f7ff ff71 	bl	8013e60 <ip4_input_accept>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d002      	beq.n	8013f8a <ip4_input+0xd6>
      netif = inp;
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	61bb      	str	r3, [r7, #24]
 8013f88:	e01e      	b.n	8013fc8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013f8e:	4b67      	ldr	r3, [pc, #412]	; (801412c <ip4_input+0x278>)
 8013f90:	695b      	ldr	r3, [r3, #20]
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	2b7f      	cmp	r3, #127	; 0x7f
 8013f96:	d017      	beq.n	8013fc8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013f98:	4b65      	ldr	r3, [pc, #404]	; (8014130 <ip4_input+0x27c>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	61bb      	str	r3, [r7, #24]
 8013f9e:	e00e      	b.n	8013fbe <ip4_input+0x10a>
          if (netif == inp) {
 8013fa0:	69ba      	ldr	r2, [r7, #24]
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d006      	beq.n	8013fb6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013fa8:	69b8      	ldr	r0, [r7, #24]
 8013faa:	f7ff ff59 	bl	8013e60 <ip4_input_accept>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d108      	bne.n	8013fc6 <ip4_input+0x112>
 8013fb4:	e000      	b.n	8013fb8 <ip4_input+0x104>
            continue;
 8013fb6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	61bb      	str	r3, [r7, #24]
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d1ed      	bne.n	8013fa0 <ip4_input+0xec>
 8013fc4:	e000      	b.n	8013fc8 <ip4_input+0x114>
            break;
 8013fc6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d111      	bne.n	8013ff2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	7a5b      	ldrb	r3, [r3, #9]
 8013fd2:	2b11      	cmp	r3, #17
 8013fd4:	d10d      	bne.n	8013ff2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013fd6:	8a7b      	ldrh	r3, [r7, #18]
 8013fd8:	69fa      	ldr	r2, [r7, #28]
 8013fda:	4413      	add	r3, r2
 8013fdc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	885b      	ldrh	r3, [r3, #2]
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013fe8:	d103      	bne.n	8013ff2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d017      	beq.n	8014028 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013ff8:	4b4c      	ldr	r3, [pc, #304]	; (801412c <ip4_input+0x278>)
 8013ffa:	691b      	ldr	r3, [r3, #16]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d013      	beq.n	8014028 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014000:	4b4a      	ldr	r3, [pc, #296]	; (801412c <ip4_input+0x278>)
 8014002:	691b      	ldr	r3, [r3, #16]
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	4618      	mov	r0, r3
 8014008:	f000 f96c 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d105      	bne.n	801401e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014012:	4b46      	ldr	r3, [pc, #280]	; (801412c <ip4_input+0x278>)
 8014014:	691b      	ldr	r3, [r3, #16]
 8014016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801401a:	2be0      	cmp	r3, #224	; 0xe0
 801401c:	d104      	bne.n	8014028 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7f6 fd40 	bl	800aaa4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014024:	2300      	movs	r3, #0
 8014026:	e07c      	b.n	8014122 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d104      	bne.n	8014038 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7f6 fd38 	bl	800aaa4 <pbuf_free>
    return ERR_OK;
 8014034:	2300      	movs	r3, #0
 8014036:	e074      	b.n	8014122 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	88db      	ldrh	r3, [r3, #6]
 801403c:	b29b      	uxth	r3, r3
 801403e:	461a      	mov	r2, r3
 8014040:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014044:	4013      	ands	r3, r2
 8014046:	2b00      	cmp	r3, #0
 8014048:	d00b      	beq.n	8014062 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 fc90 	bl	8014970 <ip4_reass>
 8014050:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d101      	bne.n	801405c <ip4_input+0x1a8>
      return ERR_OK;
 8014058:	2300      	movs	r3, #0
 801405a:	e062      	b.n	8014122 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014062:	4a32      	ldr	r2, [pc, #200]	; (801412c <ip4_input+0x278>)
 8014064:	69bb      	ldr	r3, [r7, #24]
 8014066:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014068:	4a30      	ldr	r2, [pc, #192]	; (801412c <ip4_input+0x278>)
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801406e:	4a2f      	ldr	r2, [pc, #188]	; (801412c <ip4_input+0x278>)
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	f003 030f 	and.w	r3, r3, #15
 801407c:	b2db      	uxtb	r3, r3
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	b2db      	uxtb	r3, r3
 8014082:	b29a      	uxth	r2, r3
 8014084:	4b29      	ldr	r3, [pc, #164]	; (801412c <ip4_input+0x278>)
 8014086:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014088:	8a7b      	ldrh	r3, [r7, #18]
 801408a:	4619      	mov	r1, r3
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7f6 fc83 	bl	800a998 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	7a5b      	ldrb	r3, [r3, #9]
 8014096:	2b06      	cmp	r3, #6
 8014098:	d009      	beq.n	80140ae <ip4_input+0x1fa>
 801409a:	2b11      	cmp	r3, #17
 801409c:	d002      	beq.n	80140a4 <ip4_input+0x1f0>
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d00a      	beq.n	80140b8 <ip4_input+0x204>
 80140a2:	e00e      	b.n	80140c2 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80140a4:	6839      	ldr	r1, [r7, #0]
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f7fc fb28 	bl	80106fc <udp_input>
        break;
 80140ac:	e026      	b.n	80140fc <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80140ae:	6839      	ldr	r1, [r7, #0]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f7f8 fb2f 	bl	800c714 <tcp_input>
        break;
 80140b6:	e021      	b.n	80140fc <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80140b8:	6839      	ldr	r1, [r7, #0]
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7ff fcd2 	bl	8013a64 <icmp_input>
        break;
 80140c0:	e01c      	b.n	80140fc <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80140c2:	4b1a      	ldr	r3, [pc, #104]	; (801412c <ip4_input+0x278>)
 80140c4:	695b      	ldr	r3, [r3, #20]
 80140c6:	69b9      	ldr	r1, [r7, #24]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f000 f90b 	bl	80142e4 <ip4_addr_isbroadcast_u32>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d10f      	bne.n	80140f4 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80140d4:	4b15      	ldr	r3, [pc, #84]	; (801412c <ip4_input+0x278>)
 80140d6:	695b      	ldr	r3, [r3, #20]
 80140d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80140dc:	2be0      	cmp	r3, #224	; 0xe0
 80140de:	d009      	beq.n	80140f4 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80140e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7f6 fcc9 	bl	800aa7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80140ec:	2102      	movs	r1, #2
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7ff fdbc 	bl	8013c6c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f7f6 fcd5 	bl	800aaa4 <pbuf_free>
        break;
 80140fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80140fc:	4b0b      	ldr	r3, [pc, #44]	; (801412c <ip4_input+0x278>)
 80140fe:	2200      	movs	r2, #0
 8014100:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014102:	4b0a      	ldr	r3, [pc, #40]	; (801412c <ip4_input+0x278>)
 8014104:	2200      	movs	r2, #0
 8014106:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014108:	4b08      	ldr	r3, [pc, #32]	; (801412c <ip4_input+0x278>)
 801410a:	2200      	movs	r2, #0
 801410c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801410e:	4b07      	ldr	r3, [pc, #28]	; (801412c <ip4_input+0x278>)
 8014110:	2200      	movs	r2, #0
 8014112:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014114:	4b05      	ldr	r3, [pc, #20]	; (801412c <ip4_input+0x278>)
 8014116:	2200      	movs	r2, #0
 8014118:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801411a:	4b04      	ldr	r3, [pc, #16]	; (801412c <ip4_input+0x278>)
 801411c:	2200      	movs	r2, #0
 801411e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3720      	adds	r7, #32
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	2000818c 	.word	0x2000818c
 8014130:	2000b8b0 	.word	0x2000b8b0

08014134 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b08a      	sub	sp, #40	; 0x28
 8014138:	af04      	add	r7, sp, #16
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	607a      	str	r2, [r7, #4]
 8014140:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d009      	beq.n	8014160 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d003      	beq.n	801415a <ip4_output_if+0x26>
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d102      	bne.n	8014160 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415c:	3304      	adds	r3, #4
 801415e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014160:	78fa      	ldrb	r2, [r7, #3]
 8014162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014164:	9302      	str	r3, [sp, #8]
 8014166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801416a:	9301      	str	r3, [sp, #4]
 801416c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	4613      	mov	r3, r2
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	6979      	ldr	r1, [r7, #20]
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f000 f805 	bl	8014188 <ip4_output_if_src>
 801417e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014180:	4618      	mov	r0, r3
 8014182:	3718      	adds	r7, #24
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b088      	sub	sp, #32
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
 8014194:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	7b9b      	ldrb	r3, [r3, #14]
 801419a:	2b01      	cmp	r3, #1
 801419c:	d006      	beq.n	80141ac <ip4_output_if_src+0x24>
 801419e:	4b4b      	ldr	r3, [pc, #300]	; (80142cc <ip4_output_if_src+0x144>)
 80141a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80141a4:	494a      	ldr	r1, [pc, #296]	; (80142d0 <ip4_output_if_src+0x148>)
 80141a6:	484b      	ldr	r0, [pc, #300]	; (80142d4 <ip4_output_if_src+0x14c>)
 80141a8:	f001 f920 	bl	80153ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d060      	beq.n	8014274 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80141b2:	2314      	movs	r3, #20
 80141b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80141b6:	2114      	movs	r1, #20
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f7f6 fbdd 	bl	800a978 <pbuf_add_header>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80141c4:	f06f 0301 	mvn.w	r3, #1
 80141c8:	e07c      	b.n	80142c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	895b      	ldrh	r3, [r3, #10]
 80141d4:	2b13      	cmp	r3, #19
 80141d6:	d806      	bhi.n	80141e6 <ip4_output_if_src+0x5e>
 80141d8:	4b3c      	ldr	r3, [pc, #240]	; (80142cc <ip4_output_if_src+0x144>)
 80141da:	f240 3289 	movw	r2, #905	; 0x389
 80141de:	493e      	ldr	r1, [pc, #248]	; (80142d8 <ip4_output_if_src+0x150>)
 80141e0:	483c      	ldr	r0, [pc, #240]	; (80142d4 <ip4_output_if_src+0x14c>)
 80141e2:	f001 f903 	bl	80153ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	78fa      	ldrb	r2, [r7, #3]
 80141ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80141f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80141fc:	8b7b      	ldrh	r3, [r7, #26]
 80141fe:	089b      	lsrs	r3, r3, #2
 8014200:	b29b      	uxth	r3, r3
 8014202:	b2db      	uxtb	r3, r3
 8014204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014208:	b2da      	uxtb	r2, r3
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014214:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	891b      	ldrh	r3, [r3, #8]
 801421a:	4618      	mov	r0, r3
 801421c:	f7f5 f90c 	bl	8009438 <lwip_htons>
 8014220:	4603      	mov	r3, r0
 8014222:	461a      	mov	r2, r3
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	2200      	movs	r2, #0
 801422c:	719a      	strb	r2, [r3, #6]
 801422e:	2200      	movs	r2, #0
 8014230:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014232:	4b2a      	ldr	r3, [pc, #168]	; (80142dc <ip4_output_if_src+0x154>)
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	4618      	mov	r0, r3
 8014238:	f7f5 f8fe 	bl	8009438 <lwip_htons>
 801423c:	4603      	mov	r3, r0
 801423e:	461a      	mov	r2, r3
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014244:	4b25      	ldr	r3, [pc, #148]	; (80142dc <ip4_output_if_src+0x154>)
 8014246:	881b      	ldrh	r3, [r3, #0]
 8014248:	3301      	adds	r3, #1
 801424a:	b29a      	uxth	r2, r3
 801424c:	4b23      	ldr	r3, [pc, #140]	; (80142dc <ip4_output_if_src+0x154>)
 801424e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d104      	bne.n	8014260 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014256:	4b22      	ldr	r3, [pc, #136]	; (80142e0 <ip4_output_if_src+0x158>)
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	60da      	str	r2, [r3, #12]
 801425e:	e003      	b.n	8014268 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	2200      	movs	r2, #0
 801426c:	729a      	strb	r2, [r3, #10]
 801426e:	2200      	movs	r2, #0
 8014270:	72da      	strb	r2, [r3, #11]
 8014272:	e00f      	b.n	8014294 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	895b      	ldrh	r3, [r3, #10]
 8014278:	2b13      	cmp	r3, #19
 801427a:	d802      	bhi.n	8014282 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801427c:	f06f 0301 	mvn.w	r3, #1
 8014280:	e020      	b.n	80142c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801428e:	f107 0314 	add.w	r3, r7, #20
 8014292:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00c      	beq.n	80142b6 <ip4_output_if_src+0x12e>
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	891a      	ldrh	r2, [r3, #8]
 80142a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d906      	bls.n	80142b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80142ac:	68f8      	ldr	r0, [r7, #12]
 80142ae:	f000 fd4b 	bl	8014d48 <ip4_frag>
 80142b2:	4603      	mov	r3, r0
 80142b4:	e006      	b.n	80142c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80142b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b8:	695b      	ldr	r3, [r3, #20]
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	68f9      	ldr	r1, [r7, #12]
 80142be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142c0:	4798      	blx	r3
 80142c2:	4603      	mov	r3, r0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3720      	adds	r7, #32
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	08018d98 	.word	0x08018d98
 80142d0:	08018dcc 	.word	0x08018dcc
 80142d4:	08018dd8 	.word	0x08018dd8
 80142d8:	08018e00 	.word	0x08018e00
 80142dc:	20004b42 	.word	0x20004b42
 80142e0:	08019248 	.word	0x08019248

080142e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b085      	sub	sp, #20
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142f8:	d002      	beq.n	8014300 <ip4_addr_isbroadcast_u32+0x1c>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014300:	2301      	movs	r3, #1
 8014302:	e02a      	b.n	801435a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801430a:	f003 0302 	and.w	r3, r3, #2
 801430e:	2b00      	cmp	r3, #0
 8014310:	d101      	bne.n	8014316 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014312:	2300      	movs	r3, #0
 8014314:	e021      	b.n	801435a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	3304      	adds	r3, #4
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	429a      	cmp	r2, r3
 8014320:	d101      	bne.n	8014326 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014322:	2300      	movs	r3, #0
 8014324:	e019      	b.n	801435a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014326:	68fa      	ldr	r2, [r7, #12]
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	3304      	adds	r3, #4
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	405a      	eors	r2, r3
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	3308      	adds	r3, #8
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	4013      	ands	r3, r2
 8014338:	2b00      	cmp	r3, #0
 801433a:	d10d      	bne.n	8014358 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	3308      	adds	r3, #8
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	43da      	mvns	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	3308      	adds	r3, #8
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014350:	429a      	cmp	r2, r3
 8014352:	d101      	bne.n	8014358 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014354:	2301      	movs	r3, #1
 8014356:	e000      	b.n	801435a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014358:	2300      	movs	r3, #0
  }
}
 801435a:	4618      	mov	r0, r3
 801435c:	3714      	adds	r7, #20
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr
	...

08014368 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801436e:	2300      	movs	r3, #0
 8014370:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014372:	4b12      	ldr	r3, [pc, #72]	; (80143bc <ip_reass_tmr+0x54>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014378:	e018      	b.n	80143ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	7fdb      	ldrb	r3, [r3, #31]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d00b      	beq.n	801439a <ip_reass_tmr+0x32>
      r->timer--;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	7fdb      	ldrb	r3, [r3, #31]
 8014386:	3b01      	subs	r3, #1
 8014388:	b2da      	uxtb	r2, r3
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	60fb      	str	r3, [r7, #12]
 8014398:	e008      	b.n	80143ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80143a4:	68b9      	ldr	r1, [r7, #8]
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f80a 	bl	80143c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1e3      	bne.n	801437a <ip_reass_tmr+0x12>
    }
  }
}
 80143b2:	bf00      	nop
 80143b4:	3710      	adds	r7, #16
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	20004b44 	.word	0x20004b44

080143c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b088      	sub	sp, #32
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d105      	bne.n	80143e2 <ip_reass_free_complete_datagram+0x22>
 80143d6:	4b45      	ldr	r3, [pc, #276]	; (80144ec <ip_reass_free_complete_datagram+0x12c>)
 80143d8:	22ab      	movs	r2, #171	; 0xab
 80143da:	4945      	ldr	r1, [pc, #276]	; (80144f0 <ip_reass_free_complete_datagram+0x130>)
 80143dc:	4845      	ldr	r0, [pc, #276]	; (80144f4 <ip_reass_free_complete_datagram+0x134>)
 80143de:	f001 f805 	bl	80153ec <iprintf>
  if (prev != NULL) {
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d00a      	beq.n	80143fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d005      	beq.n	80143fe <ip_reass_free_complete_datagram+0x3e>
 80143f2:	4b3e      	ldr	r3, [pc, #248]	; (80144ec <ip_reass_free_complete_datagram+0x12c>)
 80143f4:	22ad      	movs	r2, #173	; 0xad
 80143f6:	4940      	ldr	r1, [pc, #256]	; (80144f8 <ip_reass_free_complete_datagram+0x138>)
 80143f8:	483e      	ldr	r0, [pc, #248]	; (80144f4 <ip_reass_free_complete_datagram+0x134>)
 80143fa:	f000 fff7 	bl	80153ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	889b      	ldrh	r3, [r3, #4]
 801440a:	b29b      	uxth	r3, r3
 801440c:	2b00      	cmp	r3, #0
 801440e:	d12a      	bne.n	8014466 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	6858      	ldr	r0, [r3, #4]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	3308      	adds	r3, #8
 8014426:	2214      	movs	r2, #20
 8014428:	4619      	mov	r1, r3
 801442a:	f000 ffcc 	bl	80153c6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801442e:	2101      	movs	r1, #1
 8014430:	69b8      	ldr	r0, [r7, #24]
 8014432:	f7ff fc2b 	bl	8013c8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014436:	69b8      	ldr	r0, [r7, #24]
 8014438:	f7f6 fbc2 	bl	800abc0 <pbuf_clen>
 801443c:	4603      	mov	r3, r0
 801443e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014440:	8bfa      	ldrh	r2, [r7, #30]
 8014442:	8a7b      	ldrh	r3, [r7, #18]
 8014444:	4413      	add	r3, r2
 8014446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801444a:	db05      	blt.n	8014458 <ip_reass_free_complete_datagram+0x98>
 801444c:	4b27      	ldr	r3, [pc, #156]	; (80144ec <ip_reass_free_complete_datagram+0x12c>)
 801444e:	22bc      	movs	r2, #188	; 0xbc
 8014450:	492a      	ldr	r1, [pc, #168]	; (80144fc <ip_reass_free_complete_datagram+0x13c>)
 8014452:	4828      	ldr	r0, [pc, #160]	; (80144f4 <ip_reass_free_complete_datagram+0x134>)
 8014454:	f000 ffca 	bl	80153ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014458:	8bfa      	ldrh	r2, [r7, #30]
 801445a:	8a7b      	ldrh	r3, [r7, #18]
 801445c:	4413      	add	r3, r2
 801445e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014460:	69b8      	ldr	r0, [r7, #24]
 8014462:	f7f6 fb1f 	bl	800aaa4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801446c:	e01f      	b.n	80144ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f7f6 fb9e 	bl	800abc0 <pbuf_clen>
 8014484:	4603      	mov	r3, r0
 8014486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014488:	8bfa      	ldrh	r2, [r7, #30]
 801448a:	8a7b      	ldrh	r3, [r7, #18]
 801448c:	4413      	add	r3, r2
 801448e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014492:	db05      	blt.n	80144a0 <ip_reass_free_complete_datagram+0xe0>
 8014494:	4b15      	ldr	r3, [pc, #84]	; (80144ec <ip_reass_free_complete_datagram+0x12c>)
 8014496:	22cc      	movs	r2, #204	; 0xcc
 8014498:	4918      	ldr	r1, [pc, #96]	; (80144fc <ip_reass_free_complete_datagram+0x13c>)
 801449a:	4816      	ldr	r0, [pc, #88]	; (80144f4 <ip_reass_free_complete_datagram+0x134>)
 801449c:	f000 ffa6 	bl	80153ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80144a0:	8bfa      	ldrh	r2, [r7, #30]
 80144a2:	8a7b      	ldrh	r3, [r7, #18]
 80144a4:	4413      	add	r3, r2
 80144a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f7f6 fafb 	bl	800aaa4 <pbuf_free>
  while (p != NULL) {
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d1dc      	bne.n	801446e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80144b4:	6839      	ldr	r1, [r7, #0]
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 f8c2 	bl	8014640 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80144bc:	4b10      	ldr	r3, [pc, #64]	; (8014500 <ip_reass_free_complete_datagram+0x140>)
 80144be:	881b      	ldrh	r3, [r3, #0]
 80144c0:	8bfa      	ldrh	r2, [r7, #30]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d905      	bls.n	80144d2 <ip_reass_free_complete_datagram+0x112>
 80144c6:	4b09      	ldr	r3, [pc, #36]	; (80144ec <ip_reass_free_complete_datagram+0x12c>)
 80144c8:	22d2      	movs	r2, #210	; 0xd2
 80144ca:	490e      	ldr	r1, [pc, #56]	; (8014504 <ip_reass_free_complete_datagram+0x144>)
 80144cc:	4809      	ldr	r0, [pc, #36]	; (80144f4 <ip_reass_free_complete_datagram+0x134>)
 80144ce:	f000 ff8d 	bl	80153ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80144d2:	4b0b      	ldr	r3, [pc, #44]	; (8014500 <ip_reass_free_complete_datagram+0x140>)
 80144d4:	881a      	ldrh	r2, [r3, #0]
 80144d6:	8bfb      	ldrh	r3, [r7, #30]
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	b29a      	uxth	r2, r3
 80144dc:	4b08      	ldr	r3, [pc, #32]	; (8014500 <ip_reass_free_complete_datagram+0x140>)
 80144de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80144e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3720      	adds	r7, #32
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	08018e30 	.word	0x08018e30
 80144f0:	08018e6c 	.word	0x08018e6c
 80144f4:	08018e78 	.word	0x08018e78
 80144f8:	08018ea0 	.word	0x08018ea0
 80144fc:	08018eb4 	.word	0x08018eb4
 8014500:	20004b48 	.word	0x20004b48
 8014504:	08018ed4 	.word	0x08018ed4

08014508 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b08a      	sub	sp, #40	; 0x28
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014512:	2300      	movs	r3, #0
 8014514:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014516:	2300      	movs	r3, #0
 8014518:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801451a:	2300      	movs	r3, #0
 801451c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801451e:	2300      	movs	r3, #0
 8014520:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014526:	4b28      	ldr	r3, [pc, #160]	; (80145c8 <ip_reass_remove_oldest_datagram+0xc0>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801452c:	e030      	b.n	8014590 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014530:	695a      	ldr	r2, [r3, #20]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	429a      	cmp	r2, r3
 8014538:	d10c      	bne.n	8014554 <ip_reass_remove_oldest_datagram+0x4c>
 801453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453c:	699a      	ldr	r2, [r3, #24]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	691b      	ldr	r3, [r3, #16]
 8014542:	429a      	cmp	r2, r3
 8014544:	d106      	bne.n	8014554 <ip_reass_remove_oldest_datagram+0x4c>
 8014546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014548:	899a      	ldrh	r2, [r3, #12]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	889b      	ldrh	r3, [r3, #4]
 801454e:	b29b      	uxth	r3, r3
 8014550:	429a      	cmp	r2, r3
 8014552:	d014      	beq.n	801457e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	3301      	adds	r3, #1
 8014558:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801455a:	6a3b      	ldr	r3, [r7, #32]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d104      	bne.n	801456a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014562:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	61bb      	str	r3, [r7, #24]
 8014568:	e009      	b.n	801457e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456c:	7fda      	ldrb	r2, [r3, #31]
 801456e:	6a3b      	ldr	r3, [r7, #32]
 8014570:	7fdb      	ldrb	r3, [r3, #31]
 8014572:	429a      	cmp	r2, r3
 8014574:	d803      	bhi.n	801457e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014578:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014588:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1cb      	bne.n	801452e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d008      	beq.n	80145ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801459c:	69b9      	ldr	r1, [r7, #24]
 801459e:	6a38      	ldr	r0, [r7, #32]
 80145a0:	f7ff ff0e 	bl	80143c0 <ip_reass_free_complete_datagram>
 80145a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80145a6:	697a      	ldr	r2, [r7, #20]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	4413      	add	r3, r2
 80145ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80145ae:	697a      	ldr	r2, [r7, #20]
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	da02      	bge.n	80145bc <ip_reass_remove_oldest_datagram+0xb4>
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	dcac      	bgt.n	8014516 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80145bc:	697b      	ldr	r3, [r7, #20]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3728      	adds	r7, #40	; 0x28
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	20004b44 	.word	0x20004b44

080145cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80145d6:	2004      	movs	r0, #4
 80145d8:	f7f5 fbe4 	bl	8009da4 <memp_malloc>
 80145dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d110      	bne.n	8014606 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80145e4:	6839      	ldr	r1, [r7, #0]
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ff ff8e 	bl	8014508 <ip_reass_remove_oldest_datagram>
 80145ec:	4602      	mov	r2, r0
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	4293      	cmp	r3, r2
 80145f2:	dc03      	bgt.n	80145fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80145f4:	2004      	movs	r0, #4
 80145f6:	f7f5 fbd5 	bl	8009da4 <memp_malloc>
 80145fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d101      	bne.n	8014606 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014602:	2300      	movs	r3, #0
 8014604:	e016      	b.n	8014634 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014606:	2220      	movs	r2, #32
 8014608:	2100      	movs	r1, #0
 801460a:	68f8      	ldr	r0, [r7, #12]
 801460c:	f000 fee6 	bl	80153dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	220f      	movs	r2, #15
 8014614:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014616:	4b09      	ldr	r3, [pc, #36]	; (801463c <ip_reass_enqueue_new_datagram+0x70>)
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801461e:	4a07      	ldr	r2, [pc, #28]	; (801463c <ip_reass_enqueue_new_datagram+0x70>)
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	3308      	adds	r3, #8
 8014628:	2214      	movs	r2, #20
 801462a:	6879      	ldr	r1, [r7, #4]
 801462c:	4618      	mov	r0, r3
 801462e:	f000 feca 	bl	80153c6 <memcpy>
  return ipr;
 8014632:	68fb      	ldr	r3, [r7, #12]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3710      	adds	r7, #16
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	20004b44 	.word	0x20004b44

08014640 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801464a:	4b10      	ldr	r3, [pc, #64]	; (801468c <ip_reass_dequeue_datagram+0x4c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	429a      	cmp	r2, r3
 8014652:	d104      	bne.n	801465e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4a0c      	ldr	r2, [pc, #48]	; (801468c <ip_reass_dequeue_datagram+0x4c>)
 801465a:	6013      	str	r3, [r2, #0]
 801465c:	e00d      	b.n	801467a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d106      	bne.n	8014672 <ip_reass_dequeue_datagram+0x32>
 8014664:	4b0a      	ldr	r3, [pc, #40]	; (8014690 <ip_reass_dequeue_datagram+0x50>)
 8014666:	f240 1245 	movw	r2, #325	; 0x145
 801466a:	490a      	ldr	r1, [pc, #40]	; (8014694 <ip_reass_dequeue_datagram+0x54>)
 801466c:	480a      	ldr	r0, [pc, #40]	; (8014698 <ip_reass_dequeue_datagram+0x58>)
 801466e:	f000 febd 	bl	80153ec <iprintf>
    prev->next = ipr->next;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	2004      	movs	r0, #4
 801467e:	f7f5 fbe3 	bl	8009e48 <memp_free>
}
 8014682:	bf00      	nop
 8014684:	3708      	adds	r7, #8
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	20004b44 	.word	0x20004b44
 8014690:	08018e30 	.word	0x08018e30
 8014694:	08018ef8 	.word	0x08018ef8
 8014698:	08018e78 	.word	0x08018e78

0801469c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b08c      	sub	sp, #48	; 0x30
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80146a8:	2300      	movs	r3, #0
 80146aa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80146ac:	2301      	movs	r3, #1
 80146ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	885b      	ldrh	r3, [r3, #2]
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	4618      	mov	r0, r3
 80146be:	f7f4 febb 	bl	8009438 <lwip_htons>
 80146c2:	4603      	mov	r3, r0
 80146c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80146c6:	69fb      	ldr	r3, [r7, #28]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	f003 030f 	and.w	r3, r3, #15
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80146d4:	7e7b      	ldrb	r3, [r7, #25]
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	8b7a      	ldrh	r2, [r7, #26]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d202      	bcs.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80146de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146e2:	e135      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80146e4:	7e7b      	ldrb	r3, [r7, #25]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	8b7a      	ldrh	r2, [r7, #26]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	88db      	ldrh	r3, [r3, #6]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f4 fe9f 	bl	8009438 <lwip_htons>
 80146fa:	4603      	mov	r3, r0
 80146fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014700:	b29b      	uxth	r3, r3
 8014702:	00db      	lsls	r3, r3, #3
 8014704:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470e:	2200      	movs	r2, #0
 8014710:	701a      	strb	r2, [r3, #0]
 8014712:	2200      	movs	r2, #0
 8014714:	705a      	strb	r2, [r3, #1]
 8014716:	2200      	movs	r2, #0
 8014718:	709a      	strb	r2, [r3, #2]
 801471a:	2200      	movs	r2, #0
 801471c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014720:	8afa      	ldrh	r2, [r7, #22]
 8014722:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014724:	8afa      	ldrh	r2, [r7, #22]
 8014726:	8b7b      	ldrh	r3, [r7, #26]
 8014728:	4413      	add	r3, r2
 801472a:	b29a      	uxth	r2, r3
 801472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801472e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014732:	88db      	ldrh	r3, [r3, #6]
 8014734:	b29b      	uxth	r3, r3
 8014736:	8afa      	ldrh	r2, [r7, #22]
 8014738:	429a      	cmp	r2, r3
 801473a:	d902      	bls.n	8014742 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801473c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014740:	e106      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	627b      	str	r3, [r7, #36]	; 0x24
 8014748:	e068      	b.n	801481c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014752:	889b      	ldrh	r3, [r3, #4]
 8014754:	b29a      	uxth	r2, r3
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	889b      	ldrh	r3, [r3, #4]
 801475a:	b29b      	uxth	r3, r3
 801475c:	429a      	cmp	r2, r3
 801475e:	d235      	bcs.n	80147cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014764:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014768:	2b00      	cmp	r3, #0
 801476a:	d020      	beq.n	80147ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476e:	889b      	ldrh	r3, [r3, #4]
 8014770:	b29a      	uxth	r2, r3
 8014772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014774:	88db      	ldrh	r3, [r3, #6]
 8014776:	b29b      	uxth	r3, r3
 8014778:	429a      	cmp	r2, r3
 801477a:	d307      	bcc.n	801478c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477e:	88db      	ldrh	r3, [r3, #6]
 8014780:	b29a      	uxth	r2, r3
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	889b      	ldrh	r3, [r3, #4]
 8014786:	b29b      	uxth	r3, r3
 8014788:	429a      	cmp	r2, r3
 801478a:	d902      	bls.n	8014792 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801478c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014790:	e0de      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014794:	68ba      	ldr	r2, [r7, #8]
 8014796:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	88db      	ldrh	r3, [r3, #6]
 801479c:	b29a      	uxth	r2, r3
 801479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a0:	889b      	ldrh	r3, [r3, #4]
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d03d      	beq.n	8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80147a8:	2300      	movs	r3, #0
 80147aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80147ac:	e03a      	b.n	8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80147ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b0:	88db      	ldrh	r3, [r3, #6]
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	889b      	ldrh	r3, [r3, #4]
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d902      	bls.n	80147c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147c2:	e0c5      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	68ba      	ldr	r2, [r7, #8]
 80147c8:	605a      	str	r2, [r3, #4]
      break;
 80147ca:	e02b      	b.n	8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80147cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ce:	889b      	ldrh	r3, [r3, #4]
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	889b      	ldrh	r3, [r3, #4]
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	429a      	cmp	r2, r3
 80147da:	d102      	bne.n	80147e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147e0:	e0b6      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80147e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e4:	889b      	ldrh	r3, [r3, #4]
 80147e6:	b29a      	uxth	r2, r3
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	88db      	ldrh	r3, [r3, #6]
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d202      	bcs.n	80147f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147f6:	e0ab      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80147f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d009      	beq.n	8014812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80147fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014800:	88db      	ldrh	r3, [r3, #6]
 8014802:	b29a      	uxth	r2, r3
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	889b      	ldrh	r3, [r3, #4]
 8014808:	b29b      	uxth	r3, r3
 801480a:	429a      	cmp	r2, r3
 801480c:	d001      	beq.n	8014812 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801480e:	2300      	movs	r3, #0
 8014810:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481e:	2b00      	cmp	r3, #0
 8014820:	d193      	bne.n	801474a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014822:	e000      	b.n	8014826 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014824:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	2b00      	cmp	r3, #0
 801482a:	d12d      	bne.n	8014888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482e:	2b00      	cmp	r3, #0
 8014830:	d01c      	beq.n	801486c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	88db      	ldrh	r3, [r3, #6]
 8014836:	b29a      	uxth	r2, r3
 8014838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483a:	889b      	ldrh	r3, [r3, #4]
 801483c:	b29b      	uxth	r3, r3
 801483e:	429a      	cmp	r2, r3
 8014840:	d906      	bls.n	8014850 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014842:	4b45      	ldr	r3, [pc, #276]	; (8014958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014844:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014848:	4944      	ldr	r1, [pc, #272]	; (801495c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801484a:	4845      	ldr	r0, [pc, #276]	; (8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801484c:	f000 fdce 	bl	80153ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014852:	68ba      	ldr	r2, [r7, #8]
 8014854:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014858:	88db      	ldrh	r3, [r3, #6]
 801485a:	b29a      	uxth	r2, r3
 801485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485e:	889b      	ldrh	r3, [r3, #4]
 8014860:	b29b      	uxth	r3, r3
 8014862:	429a      	cmp	r2, r3
 8014864:	d010      	beq.n	8014888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014866:	2300      	movs	r3, #0
 8014868:	623b      	str	r3, [r7, #32]
 801486a:	e00d      	b.n	8014888 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d006      	beq.n	8014882 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014874:	4b38      	ldr	r3, [pc, #224]	; (8014958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014876:	f240 12bf 	movw	r2, #447	; 0x1bf
 801487a:	493a      	ldr	r1, [pc, #232]	; (8014964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801487c:	4838      	ldr	r0, [pc, #224]	; (8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801487e:	f000 fdb5 	bl	80153ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	68ba      	ldr	r2, [r7, #8]
 8014886:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d105      	bne.n	801489a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	7f9b      	ldrb	r3, [r3, #30]
 8014892:	f003 0301 	and.w	r3, r3, #1
 8014896:	2b00      	cmp	r3, #0
 8014898:	d059      	beq.n	801494e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801489a:	6a3b      	ldr	r3, [r7, #32]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d04f      	beq.n	8014940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d006      	beq.n	80148b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	685b      	ldr	r3, [r3, #4]
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	889b      	ldrh	r3, [r3, #4]
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d002      	beq.n	80148bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80148b6:	2300      	movs	r3, #0
 80148b8:	623b      	str	r3, [r7, #32]
 80148ba:	e041      	b.n	8014940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80148bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148be:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80148c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80148c6:	e012      	b.n	80148ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80148c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80148ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d0:	88db      	ldrh	r3, [r3, #6]
 80148d2:	b29a      	uxth	r2, r3
 80148d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d6:	889b      	ldrh	r3, [r3, #4]
 80148d8:	b29b      	uxth	r3, r3
 80148da:	429a      	cmp	r2, r3
 80148dc:	d002      	beq.n	80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80148de:	2300      	movs	r3, #0
 80148e0:	623b      	str	r3, [r7, #32]
            break;
 80148e2:	e007      	b.n	80148f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80148e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80148ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d1e9      	bne.n	80148c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80148f4:	6a3b      	ldr	r3, [r7, #32]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d022      	beq.n	8014940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	685b      	ldr	r3, [r3, #4]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d106      	bne.n	8014910 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014902:	4b15      	ldr	r3, [pc, #84]	; (8014958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014904:	f240 12df 	movw	r2, #479	; 0x1df
 8014908:	4917      	ldr	r1, [pc, #92]	; (8014968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801490a:	4815      	ldr	r0, [pc, #84]	; (8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801490c:	f000 fd6e 	bl	80153ec <iprintf>
          LWIP_ASSERT("sanity check",
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014918:	429a      	cmp	r2, r3
 801491a:	d106      	bne.n	801492a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801491c:	4b0e      	ldr	r3, [pc, #56]	; (8014958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801491e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014922:	4911      	ldr	r1, [pc, #68]	; (8014968 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014924:	480e      	ldr	r0, [pc, #56]	; (8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014926:	f000 fd61 	bl	80153ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d006      	beq.n	8014940 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014932:	4b09      	ldr	r3, [pc, #36]	; (8014958 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014934:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014938:	490c      	ldr	r1, [pc, #48]	; (801496c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801493a:	4809      	ldr	r0, [pc, #36]	; (8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801493c:	f000 fd56 	bl	80153ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014940:	6a3b      	ldr	r3, [r7, #32]
 8014942:	2b00      	cmp	r3, #0
 8014944:	bf14      	ite	ne
 8014946:	2301      	movne	r3, #1
 8014948:	2300      	moveq	r3, #0
 801494a:	b2db      	uxtb	r3, r3
 801494c:	e000      	b.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3730      	adds	r7, #48	; 0x30
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}
 8014958:	08018e30 	.word	0x08018e30
 801495c:	08018f14 	.word	0x08018f14
 8014960:	08018e78 	.word	0x08018e78
 8014964:	08018f34 	.word	0x08018f34
 8014968:	08018f6c 	.word	0x08018f6c
 801496c:	08018f7c 	.word	0x08018f7c

08014970 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b08e      	sub	sp, #56	; 0x38
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	f003 030f 	and.w	r3, r3, #15
 8014986:	b2db      	uxtb	r3, r3
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	b2db      	uxtb	r3, r3
 801498c:	2b14      	cmp	r3, #20
 801498e:	f040 8167 	bne.w	8014c60 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014994:	88db      	ldrh	r3, [r3, #6]
 8014996:	b29b      	uxth	r3, r3
 8014998:	4618      	mov	r0, r3
 801499a:	f7f4 fd4d 	bl	8009438 <lwip_htons>
 801499e:	4603      	mov	r3, r0
 80149a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80149aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ac:	885b      	ldrh	r3, [r3, #2]
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7f4 fd41 	bl	8009438 <lwip_htons>
 80149b6:	4603      	mov	r3, r0
 80149b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80149ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	f003 030f 	and.w	r3, r3, #15
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80149ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80149d2:	429a      	cmp	r2, r3
 80149d4:	f0c0 8146 	bcc.w	8014c64 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80149d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149dc:	b29b      	uxth	r3, r3
 80149de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7f6 f8eb 	bl	800abc0 <pbuf_clen>
 80149ea:	4603      	mov	r3, r0
 80149ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80149ee:	4ba3      	ldr	r3, [pc, #652]	; (8014c7c <ip4_reass+0x30c>)
 80149f0:	881b      	ldrh	r3, [r3, #0]
 80149f2:	461a      	mov	r2, r3
 80149f4:	8c3b      	ldrh	r3, [r7, #32]
 80149f6:	4413      	add	r3, r2
 80149f8:	2b0a      	cmp	r3, #10
 80149fa:	dd10      	ble.n	8014a1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80149fc:	8c3b      	ldrh	r3, [r7, #32]
 80149fe:	4619      	mov	r1, r3
 8014a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a02:	f7ff fd81 	bl	8014508 <ip_reass_remove_oldest_datagram>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 812d 	beq.w	8014c68 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014a0e:	4b9b      	ldr	r3, [pc, #620]	; (8014c7c <ip4_reass+0x30c>)
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	461a      	mov	r2, r3
 8014a14:	8c3b      	ldrh	r3, [r7, #32]
 8014a16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014a18:	2b0a      	cmp	r3, #10
 8014a1a:	f300 8125 	bgt.w	8014c68 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014a1e:	4b98      	ldr	r3, [pc, #608]	; (8014c80 <ip4_reass+0x310>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	633b      	str	r3, [r7, #48]	; 0x30
 8014a24:	e015      	b.n	8014a52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a28:	695a      	ldr	r2, [r3, #20]
 8014a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d10c      	bne.n	8014a4c <ip4_reass+0xdc>
 8014a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a34:	699a      	ldr	r2, [r3, #24]
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	691b      	ldr	r3, [r3, #16]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d106      	bne.n	8014a4c <ip4_reass+0xdc>
 8014a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a40:	899a      	ldrh	r2, [r3, #12]
 8014a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a44:	889b      	ldrh	r3, [r3, #4]
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d006      	beq.n	8014a5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	633b      	str	r3, [r7, #48]	; 0x30
 8014a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d1e6      	bne.n	8014a26 <ip4_reass+0xb6>
 8014a58:	e000      	b.n	8014a5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014a5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d109      	bne.n	8014a76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014a62:	8c3b      	ldrh	r3, [r7, #32]
 8014a64:	4619      	mov	r1, r3
 8014a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a68:	f7ff fdb0 	bl	80145cc <ip_reass_enqueue_new_datagram>
 8014a6c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d11c      	bne.n	8014aae <ip4_reass+0x13e>
      goto nullreturn;
 8014a74:	e0f9      	b.n	8014c6a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a78:	88db      	ldrh	r3, [r3, #6]
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7f4 fcdb 	bl	8009438 <lwip_htons>
 8014a82:	4603      	mov	r3, r0
 8014a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d110      	bne.n	8014aae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8e:	89db      	ldrh	r3, [r3, #14]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7f4 fcd1 	bl	8009438 <lwip_htons>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d006      	beq.n	8014aae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa2:	3308      	adds	r3, #8
 8014aa4:	2214      	movs	r2, #20
 8014aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f000 fc8c 	bl	80153c6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	88db      	ldrh	r3, [r3, #6]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	f003 0320 	and.w	r3, r3, #32
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	bf0c      	ite	eq
 8014abc:	2301      	moveq	r3, #1
 8014abe:	2300      	movne	r3, #0
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d00e      	beq.n	8014ae8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014aca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ace:	4413      	add	r3, r2
 8014ad0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014ad2:	8b7a      	ldrh	r2, [r7, #26]
 8014ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	f0c0 80a0 	bcc.w	8014c1c <ip4_reass+0x2ac>
 8014adc:	8b7b      	ldrh	r3, [r7, #26]
 8014ade:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014ae2:	4293      	cmp	r3, r2
 8014ae4:	f200 809a 	bhi.w	8014c1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014ae8:	69fa      	ldr	r2, [r7, #28]
 8014aea:	6879      	ldr	r1, [r7, #4]
 8014aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aee:	f7ff fdd5 	bl	801469c <ip_reass_chain_frag_into_datagram_and_validate>
 8014af2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014afa:	f000 8091 	beq.w	8014c20 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014afe:	4b5f      	ldr	r3, [pc, #380]	; (8014c7c <ip4_reass+0x30c>)
 8014b00:	881a      	ldrh	r2, [r3, #0]
 8014b02:	8c3b      	ldrh	r3, [r7, #32]
 8014b04:	4413      	add	r3, r2
 8014b06:	b29a      	uxth	r2, r3
 8014b08:	4b5c      	ldr	r3, [pc, #368]	; (8014c7c <ip4_reass+0x30c>)
 8014b0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00d      	beq.n	8014b2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b16:	4413      	add	r3, r2
 8014b18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1c:	8a7a      	ldrh	r2, [r7, #18]
 8014b1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b22:	7f9b      	ldrb	r3, [r3, #30]
 8014b24:	f043 0301 	orr.w	r3, r3, #1
 8014b28:	b2da      	uxtb	r2, r3
 8014b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d171      	bne.n	8014c18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	8b9b      	ldrh	r3, [r3, #28]
 8014b38:	3314      	adds	r3, #20
 8014b3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b50:	3308      	adds	r3, #8
 8014b52:	2214      	movs	r2, #20
 8014b54:	4619      	mov	r1, r3
 8014b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b58:	f000 fc35 	bl	80153c6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014b5c:	8a3b      	ldrh	r3, [r7, #16]
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7f4 fc6a 	bl	8009438 <lwip_htons>
 8014b64:	4603      	mov	r3, r0
 8014b66:	461a      	mov	r2, r3
 8014b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6e:	2200      	movs	r2, #0
 8014b70:	719a      	strb	r2, [r3, #6]
 8014b72:	2200      	movs	r2, #0
 8014b74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b78:	2200      	movs	r2, #0
 8014b7a:	729a      	strb	r2, [r3, #10]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014b86:	e00d      	b.n	8014ba4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014b8e:	2114      	movs	r1, #20
 8014b90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014b92:	f7f5 ff01 	bl	800a998 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014b96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f7f6 f851 	bl	800ac40 <pbuf_cat>
      r = iprh->next_pbuf;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d1ee      	bne.n	8014b88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014baa:	4b35      	ldr	r3, [pc, #212]	; (8014c80 <ip4_reass+0x310>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d102      	bne.n	8014bba <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bb8:	e010      	b.n	8014bdc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014bba:	4b31      	ldr	r3, [pc, #196]	; (8014c80 <ip4_reass+0x310>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bc0:	e007      	b.n	8014bd2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d006      	beq.n	8014bda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1f4      	bne.n	8014bc2 <ip4_reass+0x252>
 8014bd8:	e000      	b.n	8014bdc <ip4_reass+0x26c>
          break;
 8014bda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014be0:	f7ff fd2e 	bl	8014640 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f7f5 ffeb 	bl	800abc0 <pbuf_clen>
 8014bea:	4603      	mov	r3, r0
 8014bec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014bee:	4b23      	ldr	r3, [pc, #140]	; (8014c7c <ip4_reass+0x30c>)
 8014bf0:	881b      	ldrh	r3, [r3, #0]
 8014bf2:	8c3a      	ldrh	r2, [r7, #32]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d906      	bls.n	8014c06 <ip4_reass+0x296>
 8014bf8:	4b22      	ldr	r3, [pc, #136]	; (8014c84 <ip4_reass+0x314>)
 8014bfa:	f240 229b 	movw	r2, #667	; 0x29b
 8014bfe:	4922      	ldr	r1, [pc, #136]	; (8014c88 <ip4_reass+0x318>)
 8014c00:	4822      	ldr	r0, [pc, #136]	; (8014c8c <ip4_reass+0x31c>)
 8014c02:	f000 fbf3 	bl	80153ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014c06:	4b1d      	ldr	r3, [pc, #116]	; (8014c7c <ip4_reass+0x30c>)
 8014c08:	881a      	ldrh	r2, [r3, #0]
 8014c0a:	8c3b      	ldrh	r3, [r7, #32]
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	4b1a      	ldr	r3, [pc, #104]	; (8014c7c <ip4_reass+0x30c>)
 8014c12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	e02c      	b.n	8014c72 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	e02a      	b.n	8014c72 <ip4_reass+0x302>

nullreturn_ipr:
 8014c1c:	bf00      	nop
 8014c1e:	e000      	b.n	8014c22 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014c20:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d106      	bne.n	8014c36 <ip4_reass+0x2c6>
 8014c28:	4b16      	ldr	r3, [pc, #88]	; (8014c84 <ip4_reass+0x314>)
 8014c2a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014c2e:	4918      	ldr	r1, [pc, #96]	; (8014c90 <ip4_reass+0x320>)
 8014c30:	4816      	ldr	r0, [pc, #88]	; (8014c8c <ip4_reass+0x31c>)
 8014c32:	f000 fbdb 	bl	80153ec <iprintf>
  if (ipr->p == NULL) {
 8014c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d114      	bne.n	8014c68 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014c3e:	4b10      	ldr	r3, [pc, #64]	; (8014c80 <ip4_reass+0x310>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d006      	beq.n	8014c56 <ip4_reass+0x2e6>
 8014c48:	4b0e      	ldr	r3, [pc, #56]	; (8014c84 <ip4_reass+0x314>)
 8014c4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014c4e:	4911      	ldr	r1, [pc, #68]	; (8014c94 <ip4_reass+0x324>)
 8014c50:	480e      	ldr	r0, [pc, #56]	; (8014c8c <ip4_reass+0x31c>)
 8014c52:	f000 fbcb 	bl	80153ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014c56:	2100      	movs	r1, #0
 8014c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c5a:	f7ff fcf1 	bl	8014640 <ip_reass_dequeue_datagram>
 8014c5e:	e004      	b.n	8014c6a <ip4_reass+0x2fa>
    goto nullreturn;
 8014c60:	bf00      	nop
 8014c62:	e002      	b.n	8014c6a <ip4_reass+0x2fa>
    goto nullreturn;
 8014c64:	bf00      	nop
 8014c66:	e000      	b.n	8014c6a <ip4_reass+0x2fa>
  }

nullreturn:
 8014c68:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7f5 ff1a 	bl	800aaa4 <pbuf_free>
  return NULL;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3738      	adds	r7, #56	; 0x38
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20004b48 	.word	0x20004b48
 8014c80:	20004b44 	.word	0x20004b44
 8014c84:	08018e30 	.word	0x08018e30
 8014c88:	08018fa0 	.word	0x08018fa0
 8014c8c:	08018e78 	.word	0x08018e78
 8014c90:	08018fbc 	.word	0x08018fbc
 8014c94:	08018fc8 	.word	0x08018fc8

08014c98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014c9c:	2005      	movs	r0, #5
 8014c9e:	f7f5 f881 	bl	8009da4 <memp_malloc>
 8014ca2:	4603      	mov	r3, r0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d106      	bne.n	8014cc4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014cb6:	4b07      	ldr	r3, [pc, #28]	; (8014cd4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014cb8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014cbc:	4906      	ldr	r1, [pc, #24]	; (8014cd8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014cbe:	4807      	ldr	r0, [pc, #28]	; (8014cdc <ip_frag_free_pbuf_custom_ref+0x34>)
 8014cc0:	f000 fb94 	bl	80153ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014cc4:	6879      	ldr	r1, [r7, #4]
 8014cc6:	2005      	movs	r0, #5
 8014cc8:	f7f5 f8be 	bl	8009e48 <memp_free>
}
 8014ccc:	bf00      	nop
 8014cce:	3708      	adds	r7, #8
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	08018e30 	.word	0x08018e30
 8014cd8:	08018fe8 	.word	0x08018fe8
 8014cdc:	08018e78 	.word	0x08018e78

08014ce0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d106      	bne.n	8014d00 <ipfrag_free_pbuf_custom+0x20>
 8014cf2:	4b11      	ldr	r3, [pc, #68]	; (8014d38 <ipfrag_free_pbuf_custom+0x58>)
 8014cf4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014cf8:	4910      	ldr	r1, [pc, #64]	; (8014d3c <ipfrag_free_pbuf_custom+0x5c>)
 8014cfa:	4811      	ldr	r0, [pc, #68]	; (8014d40 <ipfrag_free_pbuf_custom+0x60>)
 8014cfc:	f000 fb76 	bl	80153ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d006      	beq.n	8014d16 <ipfrag_free_pbuf_custom+0x36>
 8014d08:	4b0b      	ldr	r3, [pc, #44]	; (8014d38 <ipfrag_free_pbuf_custom+0x58>)
 8014d0a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014d0e:	490d      	ldr	r1, [pc, #52]	; (8014d44 <ipfrag_free_pbuf_custom+0x64>)
 8014d10:	480b      	ldr	r0, [pc, #44]	; (8014d40 <ipfrag_free_pbuf_custom+0x60>)
 8014d12:	f000 fb6b 	bl	80153ec <iprintf>
  if (pcr->original != NULL) {
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	695b      	ldr	r3, [r3, #20]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d004      	beq.n	8014d28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	695b      	ldr	r3, [r3, #20]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7f5 febe 	bl	800aaa4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f7ff ffbd 	bl	8014ca8 <ip_frag_free_pbuf_custom_ref>
}
 8014d2e:	bf00      	nop
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	08018e30 	.word	0x08018e30
 8014d3c:	08018ff4 	.word	0x08018ff4
 8014d40:	08018e78 	.word	0x08018e78
 8014d44:	08019000 	.word	0x08019000

08014d48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b094      	sub	sp, #80	; 0x50
 8014d4c:	af02      	add	r7, sp, #8
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014d54:	2300      	movs	r3, #0
 8014d56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d5e:	3b14      	subs	r3, #20
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	da00      	bge.n	8014d66 <ip4_frag+0x1e>
 8014d64:	3307      	adds	r3, #7
 8014d66:	10db      	asrs	r3, r3, #3
 8014d68:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014d6a:	2314      	movs	r3, #20
 8014d6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d76:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	f003 030f 	and.w	r3, r3, #15
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	2b14      	cmp	r3, #20
 8014d88:	d002      	beq.n	8014d90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014d8a:	f06f 0305 	mvn.w	r3, #5
 8014d8e:	e10f      	b.n	8014fb0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	895b      	ldrh	r3, [r3, #10]
 8014d94:	2b13      	cmp	r3, #19
 8014d96:	d809      	bhi.n	8014dac <ip4_frag+0x64>
 8014d98:	4b87      	ldr	r3, [pc, #540]	; (8014fb8 <ip4_frag+0x270>)
 8014d9a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014d9e:	4987      	ldr	r1, [pc, #540]	; (8014fbc <ip4_frag+0x274>)
 8014da0:	4887      	ldr	r0, [pc, #540]	; (8014fc0 <ip4_frag+0x278>)
 8014da2:	f000 fb23 	bl	80153ec <iprintf>
 8014da6:	f06f 0305 	mvn.w	r3, #5
 8014daa:	e101      	b.n	8014fb0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	88db      	ldrh	r3, [r3, #6]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7f4 fb40 	bl	8009438 <lwip_htons>
 8014db8:	4603      	mov	r3, r0
 8014dba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014dbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014dc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	891b      	ldrh	r3, [r3, #8]
 8014dd2:	3b14      	subs	r3, #20
 8014dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014dd8:	e0e0      	b.n	8014f9c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ddc:	00db      	lsls	r3, r3, #3
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014de4:	4293      	cmp	r3, r2
 8014de6:	bf28      	it	cs
 8014de8:	4613      	movcs	r3, r2
 8014dea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014dec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014df0:	2114      	movs	r1, #20
 8014df2:	200e      	movs	r0, #14
 8014df4:	f7f5 fb76 	bl	800a4e4 <pbuf_alloc>
 8014df8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	f000 80d4 	beq.w	8014faa <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	895b      	ldrh	r3, [r3, #10]
 8014e06:	2b13      	cmp	r3, #19
 8014e08:	d806      	bhi.n	8014e18 <ip4_frag+0xd0>
 8014e0a:	4b6b      	ldr	r3, [pc, #428]	; (8014fb8 <ip4_frag+0x270>)
 8014e0c:	f240 3225 	movw	r2, #805	; 0x325
 8014e10:	496c      	ldr	r1, [pc, #432]	; (8014fc4 <ip4_frag+0x27c>)
 8014e12:	486b      	ldr	r0, [pc, #428]	; (8014fc0 <ip4_frag+0x278>)
 8014e14:	f000 faea 	bl	80153ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	2214      	movs	r2, #20
 8014e1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e20:	4618      	mov	r0, r3
 8014e22:	f000 fad0 	bl	80153c6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014e2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014e32:	e064      	b.n	8014efe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	895a      	ldrh	r2, [r3, #10]
 8014e38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	895b      	ldrh	r3, [r3, #10]
 8014e42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d906      	bls.n	8014e56 <ip4_frag+0x10e>
 8014e48:	4b5b      	ldr	r3, [pc, #364]	; (8014fb8 <ip4_frag+0x270>)
 8014e4a:	f240 322d 	movw	r2, #813	; 0x32d
 8014e4e:	495e      	ldr	r1, [pc, #376]	; (8014fc8 <ip4_frag+0x280>)
 8014e50:	485b      	ldr	r0, [pc, #364]	; (8014fc0 <ip4_frag+0x278>)
 8014e52:	f000 facb 	bl	80153ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014e56:	8bfa      	ldrh	r2, [r7, #30]
 8014e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	bf28      	it	cs
 8014e60:	4613      	movcs	r3, r2
 8014e62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d105      	bne.n	8014e7a <ip4_frag+0x132>
        poff = 0;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	60fb      	str	r3, [r7, #12]
        continue;
 8014e78:	e041      	b.n	8014efe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014e7a:	f7ff ff0d 	bl	8014c98 <ip_frag_alloc_pbuf_custom_ref>
 8014e7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d103      	bne.n	8014e8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e88:	f7f5 fe0c 	bl	800aaa4 <pbuf_free>
        goto memerr;
 8014e8c:	e08e      	b.n	8014fac <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014e8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014e94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e96:	4413      	add	r3, r2
 8014e98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014e9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014ea0:	9201      	str	r2, [sp, #4]
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2241      	movs	r2, #65	; 0x41
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	f7f5 fc41 	bl	800a730 <pbuf_alloced_custom>
 8014eae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014eb6:	69b8      	ldr	r0, [r7, #24]
 8014eb8:	f7ff fef6 	bl	8014ca8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ebe:	f7f5 fdf1 	bl	800aaa4 <pbuf_free>
        goto memerr;
 8014ec2:	e073      	b.n	8014fac <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7f5 fe93 	bl	800abf0 <pbuf_ref>
      pcr->original = p;
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	4a3e      	ldr	r2, [pc, #248]	; (8014fcc <ip4_frag+0x284>)
 8014ed4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014ed6:	6979      	ldr	r1, [r7, #20]
 8014ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014eda:	f7f5 feb1 	bl	800ac40 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014ede:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014ee2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014eec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d004      	beq.n	8014efe <ip4_frag+0x1b6>
        poff = 0;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014efe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d196      	bne.n	8014e34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014f06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014f0c:	4413      	add	r3, r2
 8014f0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014f10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f18:	3b14      	subs	r3, #20
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	bfd4      	ite	le
 8014f1e:	2301      	movle	r3, #1
 8014f20:	2300      	movgt	r3, #0
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014f2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014f30:	6a3b      	ldr	r3, [r7, #32]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <ip4_frag+0x1f4>
 8014f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d003      	beq.n	8014f44 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014f3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014f42:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014f44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7f4 fa76 	bl	8009438 <lwip_htons>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	461a      	mov	r2, r3
 8014f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f52:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f56:	3314      	adds	r3, #20
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7f4 fa6c 	bl	8009438 <lwip_htons>
 8014f60:	4603      	mov	r3, r0
 8014f62:	461a      	mov	r2, r3
 8014f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f66:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	729a      	strb	r2, [r3, #10]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	695b      	ldr	r3, [r3, #20]
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f7a:	68b8      	ldr	r0, [r7, #8]
 8014f7c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f80:	f7f5 fd90 	bl	800aaa4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014f84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f8a:	1ad3      	subs	r3, r2, r3
 8014f8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014f90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014f94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f96:	4413      	add	r3, r2
 8014f98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014f9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f47f af1a 	bne.w	8014dda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	e002      	b.n	8014fb0 <ip4_frag+0x268>
      goto memerr;
 8014faa:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3748      	adds	r7, #72	; 0x48
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	08018e30 	.word	0x08018e30
 8014fbc:	0801900c 	.word	0x0801900c
 8014fc0:	08018e78 	.word	0x08018e78
 8014fc4:	08019028 	.word	0x08019028
 8014fc8:	08019048 	.word	0x08019048
 8014fcc:	08014ce1 	.word	0x08014ce1

08014fd0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014fda:	230e      	movs	r3, #14
 8014fdc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	895b      	ldrh	r3, [r3, #10]
 8014fe2:	2b0e      	cmp	r3, #14
 8014fe4:	d96e      	bls.n	80150c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	7bdb      	ldrb	r3, [r3, #15]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d106      	bne.n	8014ffc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	b2da      	uxtb	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	7b1a      	ldrb	r2, [r3, #12]
 8015006:	7b5b      	ldrb	r3, [r3, #13]
 8015008:	021b      	lsls	r3, r3, #8
 801500a:	4313      	orrs	r3, r2
 801500c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	f003 0301 	and.w	r3, r3, #1
 8015016:	2b00      	cmp	r3, #0
 8015018:	d023      	beq.n	8015062 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	2b01      	cmp	r3, #1
 8015020:	d10f      	bne.n	8015042 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	785b      	ldrb	r3, [r3, #1]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d11b      	bne.n	8015062 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801502e:	2b5e      	cmp	r3, #94	; 0x5e
 8015030:	d117      	bne.n	8015062 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	7b5b      	ldrb	r3, [r3, #13]
 8015036:	f043 0310 	orr.w	r3, r3, #16
 801503a:	b2da      	uxtb	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	735a      	strb	r2, [r3, #13]
 8015040:	e00f      	b.n	8015062 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	2206      	movs	r2, #6
 8015046:	4928      	ldr	r1, [pc, #160]	; (80150e8 <ethernet_input+0x118>)
 8015048:	4618      	mov	r0, r3
 801504a:	f000 f9ad 	bl	80153a8 <memcmp>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d106      	bne.n	8015062 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	7b5b      	ldrb	r3, [r3, #13]
 8015058:	f043 0308 	orr.w	r3, r3, #8
 801505c:	b2da      	uxtb	r2, r3
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015062:	89fb      	ldrh	r3, [r7, #14]
 8015064:	2b08      	cmp	r3, #8
 8015066:	d003      	beq.n	8015070 <ethernet_input+0xa0>
 8015068:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801506c:	d014      	beq.n	8015098 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801506e:	e032      	b.n	80150d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015076:	f003 0308 	and.w	r3, r3, #8
 801507a:	2b00      	cmp	r3, #0
 801507c:	d024      	beq.n	80150c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801507e:	8afb      	ldrh	r3, [r7, #22]
 8015080:	4619      	mov	r1, r3
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f7f5 fc88 	bl	800a998 <pbuf_remove_header>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d11e      	bne.n	80150cc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7fe ff0f 	bl	8013eb4 <ip4_input>
      break;
 8015096:	e013      	b.n	80150c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801509e:	f003 0308 	and.w	r3, r3, #8
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d014      	beq.n	80150d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80150a6:	8afb      	ldrh	r3, [r7, #22]
 80150a8:	4619      	mov	r1, r3
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7f5 fc74 	bl	800a998 <pbuf_remove_header>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d10e      	bne.n	80150d4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7fe f8ab 	bl	8013214 <etharp_input>
      break;
 80150be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80150c0:	2300      	movs	r3, #0
 80150c2:	e00c      	b.n	80150de <ethernet_input+0x10e>
    goto free_and_return;
 80150c4:	bf00      	nop
 80150c6:	e006      	b.n	80150d6 <ethernet_input+0x106>
        goto free_and_return;
 80150c8:	bf00      	nop
 80150ca:	e004      	b.n	80150d6 <ethernet_input+0x106>
        goto free_and_return;
 80150cc:	bf00      	nop
 80150ce:	e002      	b.n	80150d6 <ethernet_input+0x106>
        goto free_and_return;
 80150d0:	bf00      	nop
 80150d2:	e000      	b.n	80150d6 <ethernet_input+0x106>
        goto free_and_return;
 80150d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7f5 fce4 	bl	800aaa4 <pbuf_free>
  return ERR_OK;
 80150dc:	2300      	movs	r3, #0
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3718      	adds	r7, #24
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	08019250 	.word	0x08019250

080150ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b086      	sub	sp, #24
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
 80150f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80150fa:	8c3b      	ldrh	r3, [r7, #32]
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f4 f99b 	bl	8009438 <lwip_htons>
 8015102:	4603      	mov	r3, r0
 8015104:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015106:	210e      	movs	r1, #14
 8015108:	68b8      	ldr	r0, [r7, #8]
 801510a:	f7f5 fc35 	bl	800a978 <pbuf_add_header>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d125      	bne.n	8015160 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	8afa      	ldrh	r2, [r7, #22]
 801511e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	2206      	movs	r2, #6
 8015124:	6839      	ldr	r1, [r7, #0]
 8015126:	4618      	mov	r0, r3
 8015128:	f000 f94d 	bl	80153c6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	3306      	adds	r3, #6
 8015130:	2206      	movs	r2, #6
 8015132:	6879      	ldr	r1, [r7, #4]
 8015134:	4618      	mov	r0, r3
 8015136:	f000 f946 	bl	80153c6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015140:	2b06      	cmp	r3, #6
 8015142:	d006      	beq.n	8015152 <ethernet_output+0x66>
 8015144:	4b0a      	ldr	r3, [pc, #40]	; (8015170 <ethernet_output+0x84>)
 8015146:	f240 1233 	movw	r2, #307	; 0x133
 801514a:	490a      	ldr	r1, [pc, #40]	; (8015174 <ethernet_output+0x88>)
 801514c:	480a      	ldr	r0, [pc, #40]	; (8015178 <ethernet_output+0x8c>)
 801514e:	f000 f94d 	bl	80153ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	699b      	ldr	r3, [r3, #24]
 8015156:	68b9      	ldr	r1, [r7, #8]
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	4798      	blx	r3
 801515c:	4603      	mov	r3, r0
 801515e:	e002      	b.n	8015166 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015160:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015162:	f06f 0301 	mvn.w	r3, #1
}
 8015166:	4618      	mov	r0, r3
 8015168:	3718      	adds	r7, #24
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	08019058 	.word	0x08019058
 8015174:	08019090 	.word	0x08019090
 8015178:	080190c4 	.word	0x080190c4

0801517c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	2200      	movs	r2, #0
 801518a:	2104      	movs	r1, #4
 801518c:	4618      	mov	r0, r3
 801518e:	f7f0 fced 	bl	8005b6c <osMessageQueueNew>
 8015192:	4602      	mov	r2, r0
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d102      	bne.n	80151a6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80151a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151a4:	e000      	b.n	80151a8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80151a6:	2300      	movs	r3, #0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6818      	ldr	r0, [r3, #0]
 80151be:	4639      	mov	r1, r7
 80151c0:	2300      	movs	r3, #0
 80151c2:	2200      	movs	r2, #0
 80151c4:	f7f0 fd58 	bl	8005c78 <osMessageQueuePut>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d102      	bne.n	80151d4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80151ce:	2300      	movs	r3, #0
 80151d0:	73fb      	strb	r3, [r7, #15]
 80151d2:	e001      	b.n	80151d8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80151d4:	23ff      	movs	r3, #255	; 0xff
 80151d6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80151d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3710      	adds	r7, #16
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b086      	sub	sp, #24
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80151f0:	f7f0 f91c 	bl	800542c <osKernelGetTickCount>
 80151f4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d013      	beq.n	8015224 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	6818      	ldr	r0, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2200      	movs	r2, #0
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	f7f0 fdab 	bl	8005d60 <osMessageQueueGet>
 801520a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d105      	bne.n	801521e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015212:	f7f0 f90b 	bl	800542c <osKernelGetTickCount>
 8015216:	4602      	mov	r2, r0
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	e00f      	b.n	801523e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801521e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015222:	e00c      	b.n	801523e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	6818      	ldr	r0, [r3, #0]
 8015228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801522c:	2200      	movs	r2, #0
 801522e:	68b9      	ldr	r1, [r7, #8]
 8015230:	f7f0 fd96 	bl	8005d60 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015234:	f7f0 f8fa 	bl	800542c <osKernelGetTickCount>
 8015238:	4602      	mov	r2, r0
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801523e:	4618      	mov	r0, r3
 8015240:	3718      	adds	r7, #24
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015246:	b480      	push	{r7}
 8015248:	b083      	sub	sp, #12
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d101      	bne.n	801525a <sys_mbox_valid+0x14>
    return 0;
 8015256:	2300      	movs	r3, #0
 8015258:	e000      	b.n	801525c <sys_mbox_valid+0x16>
  else
    return 1;
 801525a:	2301      	movs	r3, #1
}
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801526c:	2000      	movs	r0, #0
 801526e:	f7f0 f9d9 	bl	8005624 <osMutexNew>
 8015272:	4602      	mov	r2, r0
 8015274:	4b01      	ldr	r3, [pc, #4]	; (801527c <sys_init+0x14>)
 8015276:	601a      	str	r2, [r3, #0]
#endif
}
 8015278:	bf00      	nop
 801527a:	bd80      	pop	{r7, pc}
 801527c:	2000b908 	.word	0x2000b908

08015280 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015288:	2000      	movs	r0, #0
 801528a:	f7f0 f9cb 	bl	8005624 <osMutexNew>
 801528e:	4602      	mov	r2, r0
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d102      	bne.n	80152a2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152a0:	e000      	b.n	80152a4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80152bc:	4618      	mov	r0, r3
 80152be:	f7f0 fa4b 	bl	8005758 <osMutexAcquire>
#endif
}
 80152c2:	bf00      	nop
 80152c4:	3708      	adds	r7, #8
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b082      	sub	sp, #8
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7f0 fa9c 	bl	8005814 <osMutexRelease>
}
 80152dc:	bf00      	nop
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b08e      	sub	sp, #56	; 0x38
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	607a      	str	r2, [r7, #4]
 80152f0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80152f2:	f107 0314 	add.w	r3, r7, #20
 80152f6:	2224      	movs	r2, #36	; 0x24
 80152f8:	2100      	movs	r1, #0
 80152fa:	4618      	mov	r0, r3
 80152fc:	f000 f86e 	bl	80153dc <memset>
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	617b      	str	r3, [r7, #20]
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	62bb      	str	r3, [r7, #40]	; 0x28
 8015308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801530a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801530c:	f107 0314 	add.w	r3, r7, #20
 8015310:	461a      	mov	r2, r3
 8015312:	6879      	ldr	r1, [r7, #4]
 8015314:	68b8      	ldr	r0, [r7, #8]
 8015316:	f7f0 f8b1 	bl	800547c <osThreadNew>
 801531a:	4603      	mov	r3, r0
#endif
}
 801531c:	4618      	mov	r0, r3
 801531e:	3738      	adds	r7, #56	; 0x38
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015328:	4b04      	ldr	r3, [pc, #16]	; (801533c <sys_arch_protect+0x18>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015330:	4618      	mov	r0, r3
 8015332:	f7f0 fa11 	bl	8005758 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015336:	2301      	movs	r3, #1
}
 8015338:	4618      	mov	r0, r3
 801533a:	bd80      	pop	{r7, pc}
 801533c:	2000b908 	.word	0x2000b908

08015340 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015348:	4b04      	ldr	r3, [pc, #16]	; (801535c <sys_arch_unprotect+0x1c>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	4618      	mov	r0, r3
 801534e:	f7f0 fa61 	bl	8005814 <osMutexRelease>
}
 8015352:	bf00      	nop
 8015354:	3708      	adds	r7, #8
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	2000b908 	.word	0x2000b908

08015360 <__libc_init_array>:
 8015360:	b570      	push	{r4, r5, r6, lr}
 8015362:	4e0d      	ldr	r6, [pc, #52]	; (8015398 <__libc_init_array+0x38>)
 8015364:	4c0d      	ldr	r4, [pc, #52]	; (801539c <__libc_init_array+0x3c>)
 8015366:	1ba4      	subs	r4, r4, r6
 8015368:	10a4      	asrs	r4, r4, #2
 801536a:	2500      	movs	r5, #0
 801536c:	42a5      	cmp	r5, r4
 801536e:	d109      	bne.n	8015384 <__libc_init_array+0x24>
 8015370:	4e0b      	ldr	r6, [pc, #44]	; (80153a0 <__libc_init_array+0x40>)
 8015372:	4c0c      	ldr	r4, [pc, #48]	; (80153a4 <__libc_init_array+0x44>)
 8015374:	f000 ff5a 	bl	801622c <_init>
 8015378:	1ba4      	subs	r4, r4, r6
 801537a:	10a4      	asrs	r4, r4, #2
 801537c:	2500      	movs	r5, #0
 801537e:	42a5      	cmp	r5, r4
 8015380:	d105      	bne.n	801538e <__libc_init_array+0x2e>
 8015382:	bd70      	pop	{r4, r5, r6, pc}
 8015384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015388:	4798      	blx	r3
 801538a:	3501      	adds	r5, #1
 801538c:	e7ee      	b.n	801536c <__libc_init_array+0xc>
 801538e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015392:	4798      	blx	r3
 8015394:	3501      	adds	r5, #1
 8015396:	e7f2      	b.n	801537e <__libc_init_array+0x1e>
 8015398:	08019300 	.word	0x08019300
 801539c:	08019300 	.word	0x08019300
 80153a0:	08019300 	.word	0x08019300
 80153a4:	08019304 	.word	0x08019304

080153a8 <memcmp>:
 80153a8:	b530      	push	{r4, r5, lr}
 80153aa:	2400      	movs	r4, #0
 80153ac:	42a2      	cmp	r2, r4
 80153ae:	d101      	bne.n	80153b4 <memcmp+0xc>
 80153b0:	2000      	movs	r0, #0
 80153b2:	e007      	b.n	80153c4 <memcmp+0x1c>
 80153b4:	5d03      	ldrb	r3, [r0, r4]
 80153b6:	3401      	adds	r4, #1
 80153b8:	190d      	adds	r5, r1, r4
 80153ba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80153be:	42ab      	cmp	r3, r5
 80153c0:	d0f4      	beq.n	80153ac <memcmp+0x4>
 80153c2:	1b58      	subs	r0, r3, r5
 80153c4:	bd30      	pop	{r4, r5, pc}

080153c6 <memcpy>:
 80153c6:	b510      	push	{r4, lr}
 80153c8:	1e43      	subs	r3, r0, #1
 80153ca:	440a      	add	r2, r1
 80153cc:	4291      	cmp	r1, r2
 80153ce:	d100      	bne.n	80153d2 <memcpy+0xc>
 80153d0:	bd10      	pop	{r4, pc}
 80153d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153da:	e7f7      	b.n	80153cc <memcpy+0x6>

080153dc <memset>:
 80153dc:	4402      	add	r2, r0
 80153de:	4603      	mov	r3, r0
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d100      	bne.n	80153e6 <memset+0xa>
 80153e4:	4770      	bx	lr
 80153e6:	f803 1b01 	strb.w	r1, [r3], #1
 80153ea:	e7f9      	b.n	80153e0 <memset+0x4>

080153ec <iprintf>:
 80153ec:	b40f      	push	{r0, r1, r2, r3}
 80153ee:	4b0a      	ldr	r3, [pc, #40]	; (8015418 <iprintf+0x2c>)
 80153f0:	b513      	push	{r0, r1, r4, lr}
 80153f2:	681c      	ldr	r4, [r3, #0]
 80153f4:	b124      	cbz	r4, 8015400 <iprintf+0x14>
 80153f6:	69a3      	ldr	r3, [r4, #24]
 80153f8:	b913      	cbnz	r3, 8015400 <iprintf+0x14>
 80153fa:	4620      	mov	r0, r4
 80153fc:	f000 f882 	bl	8015504 <__sinit>
 8015400:	ab05      	add	r3, sp, #20
 8015402:	9a04      	ldr	r2, [sp, #16]
 8015404:	68a1      	ldr	r1, [r4, #8]
 8015406:	9301      	str	r3, [sp, #4]
 8015408:	4620      	mov	r0, r4
 801540a:	f000 f9df 	bl	80157cc <_vfiprintf_r>
 801540e:	b002      	add	sp, #8
 8015410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015414:	b004      	add	sp, #16
 8015416:	4770      	bx	lr
 8015418:	20000020 	.word	0x20000020

0801541c <rand>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4b13      	ldr	r3, [pc, #76]	; (801546c <rand+0x50>)
 8015420:	681c      	ldr	r4, [r3, #0]
 8015422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015424:	b97b      	cbnz	r3, 8015446 <rand+0x2a>
 8015426:	2018      	movs	r0, #24
 8015428:	f000 f8f6 	bl	8015618 <malloc>
 801542c:	4a10      	ldr	r2, [pc, #64]	; (8015470 <rand+0x54>)
 801542e:	4b11      	ldr	r3, [pc, #68]	; (8015474 <rand+0x58>)
 8015430:	63a0      	str	r0, [r4, #56]	; 0x38
 8015432:	e9c0 2300 	strd	r2, r3, [r0]
 8015436:	4b10      	ldr	r3, [pc, #64]	; (8015478 <rand+0x5c>)
 8015438:	6083      	str	r3, [r0, #8]
 801543a:	230b      	movs	r3, #11
 801543c:	8183      	strh	r3, [r0, #12]
 801543e:	2201      	movs	r2, #1
 8015440:	2300      	movs	r3, #0
 8015442:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015448:	480c      	ldr	r0, [pc, #48]	; (801547c <rand+0x60>)
 801544a:	690a      	ldr	r2, [r1, #16]
 801544c:	694b      	ldr	r3, [r1, #20]
 801544e:	4c0c      	ldr	r4, [pc, #48]	; (8015480 <rand+0x64>)
 8015450:	4350      	muls	r0, r2
 8015452:	fb04 0003 	mla	r0, r4, r3, r0
 8015456:	fba2 2304 	umull	r2, r3, r2, r4
 801545a:	4403      	add	r3, r0
 801545c:	1c54      	adds	r4, r2, #1
 801545e:	f143 0500 	adc.w	r5, r3, #0
 8015462:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8015466:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	20000020 	.word	0x20000020
 8015470:	abcd330e 	.word	0xabcd330e
 8015474:	e66d1234 	.word	0xe66d1234
 8015478:	0005deec 	.word	0x0005deec
 801547c:	5851f42d 	.word	0x5851f42d
 8015480:	4c957f2d 	.word	0x4c957f2d

08015484 <std>:
 8015484:	2300      	movs	r3, #0
 8015486:	b510      	push	{r4, lr}
 8015488:	4604      	mov	r4, r0
 801548a:	e9c0 3300 	strd	r3, r3, [r0]
 801548e:	6083      	str	r3, [r0, #8]
 8015490:	8181      	strh	r1, [r0, #12]
 8015492:	6643      	str	r3, [r0, #100]	; 0x64
 8015494:	81c2      	strh	r2, [r0, #14]
 8015496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801549a:	6183      	str	r3, [r0, #24]
 801549c:	4619      	mov	r1, r3
 801549e:	2208      	movs	r2, #8
 80154a0:	305c      	adds	r0, #92	; 0x5c
 80154a2:	f7ff ff9b 	bl	80153dc <memset>
 80154a6:	4b05      	ldr	r3, [pc, #20]	; (80154bc <std+0x38>)
 80154a8:	6263      	str	r3, [r4, #36]	; 0x24
 80154aa:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <std+0x3c>)
 80154ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80154ae:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <std+0x40>)
 80154b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154b2:	4b05      	ldr	r3, [pc, #20]	; (80154c8 <std+0x44>)
 80154b4:	6224      	str	r4, [r4, #32]
 80154b6:	6323      	str	r3, [r4, #48]	; 0x30
 80154b8:	bd10      	pop	{r4, pc}
 80154ba:	bf00      	nop
 80154bc:	08015d29 	.word	0x08015d29
 80154c0:	08015d4b 	.word	0x08015d4b
 80154c4:	08015d83 	.word	0x08015d83
 80154c8:	08015da7 	.word	0x08015da7

080154cc <_cleanup_r>:
 80154cc:	4901      	ldr	r1, [pc, #4]	; (80154d4 <_cleanup_r+0x8>)
 80154ce:	f000 b885 	b.w	80155dc <_fwalk_reent>
 80154d2:	bf00      	nop
 80154d4:	08016081 	.word	0x08016081

080154d8 <__sfmoreglue>:
 80154d8:	b570      	push	{r4, r5, r6, lr}
 80154da:	1e4a      	subs	r2, r1, #1
 80154dc:	2568      	movs	r5, #104	; 0x68
 80154de:	4355      	muls	r5, r2
 80154e0:	460e      	mov	r6, r1
 80154e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80154e6:	f000 f8ed 	bl	80156c4 <_malloc_r>
 80154ea:	4604      	mov	r4, r0
 80154ec:	b140      	cbz	r0, 8015500 <__sfmoreglue+0x28>
 80154ee:	2100      	movs	r1, #0
 80154f0:	e9c0 1600 	strd	r1, r6, [r0]
 80154f4:	300c      	adds	r0, #12
 80154f6:	60a0      	str	r0, [r4, #8]
 80154f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80154fc:	f7ff ff6e 	bl	80153dc <memset>
 8015500:	4620      	mov	r0, r4
 8015502:	bd70      	pop	{r4, r5, r6, pc}

08015504 <__sinit>:
 8015504:	6983      	ldr	r3, [r0, #24]
 8015506:	b510      	push	{r4, lr}
 8015508:	4604      	mov	r4, r0
 801550a:	bb33      	cbnz	r3, 801555a <__sinit+0x56>
 801550c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015510:	6503      	str	r3, [r0, #80]	; 0x50
 8015512:	4b12      	ldr	r3, [pc, #72]	; (801555c <__sinit+0x58>)
 8015514:	4a12      	ldr	r2, [pc, #72]	; (8015560 <__sinit+0x5c>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	6282      	str	r2, [r0, #40]	; 0x28
 801551a:	4298      	cmp	r0, r3
 801551c:	bf04      	itt	eq
 801551e:	2301      	moveq	r3, #1
 8015520:	6183      	streq	r3, [r0, #24]
 8015522:	f000 f81f 	bl	8015564 <__sfp>
 8015526:	6060      	str	r0, [r4, #4]
 8015528:	4620      	mov	r0, r4
 801552a:	f000 f81b 	bl	8015564 <__sfp>
 801552e:	60a0      	str	r0, [r4, #8]
 8015530:	4620      	mov	r0, r4
 8015532:	f000 f817 	bl	8015564 <__sfp>
 8015536:	2200      	movs	r2, #0
 8015538:	60e0      	str	r0, [r4, #12]
 801553a:	2104      	movs	r1, #4
 801553c:	6860      	ldr	r0, [r4, #4]
 801553e:	f7ff ffa1 	bl	8015484 <std>
 8015542:	2201      	movs	r2, #1
 8015544:	2109      	movs	r1, #9
 8015546:	68a0      	ldr	r0, [r4, #8]
 8015548:	f7ff ff9c 	bl	8015484 <std>
 801554c:	2202      	movs	r2, #2
 801554e:	2112      	movs	r1, #18
 8015550:	68e0      	ldr	r0, [r4, #12]
 8015552:	f7ff ff97 	bl	8015484 <std>
 8015556:	2301      	movs	r3, #1
 8015558:	61a3      	str	r3, [r4, #24]
 801555a:	bd10      	pop	{r4, pc}
 801555c:	08019260 	.word	0x08019260
 8015560:	080154cd 	.word	0x080154cd

08015564 <__sfp>:
 8015564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015566:	4b1b      	ldr	r3, [pc, #108]	; (80155d4 <__sfp+0x70>)
 8015568:	681e      	ldr	r6, [r3, #0]
 801556a:	69b3      	ldr	r3, [r6, #24]
 801556c:	4607      	mov	r7, r0
 801556e:	b913      	cbnz	r3, 8015576 <__sfp+0x12>
 8015570:	4630      	mov	r0, r6
 8015572:	f7ff ffc7 	bl	8015504 <__sinit>
 8015576:	3648      	adds	r6, #72	; 0x48
 8015578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801557c:	3b01      	subs	r3, #1
 801557e:	d503      	bpl.n	8015588 <__sfp+0x24>
 8015580:	6833      	ldr	r3, [r6, #0]
 8015582:	b133      	cbz	r3, 8015592 <__sfp+0x2e>
 8015584:	6836      	ldr	r6, [r6, #0]
 8015586:	e7f7      	b.n	8015578 <__sfp+0x14>
 8015588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801558c:	b16d      	cbz	r5, 80155aa <__sfp+0x46>
 801558e:	3468      	adds	r4, #104	; 0x68
 8015590:	e7f4      	b.n	801557c <__sfp+0x18>
 8015592:	2104      	movs	r1, #4
 8015594:	4638      	mov	r0, r7
 8015596:	f7ff ff9f 	bl	80154d8 <__sfmoreglue>
 801559a:	6030      	str	r0, [r6, #0]
 801559c:	2800      	cmp	r0, #0
 801559e:	d1f1      	bne.n	8015584 <__sfp+0x20>
 80155a0:	230c      	movs	r3, #12
 80155a2:	603b      	str	r3, [r7, #0]
 80155a4:	4604      	mov	r4, r0
 80155a6:	4620      	mov	r0, r4
 80155a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155aa:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <__sfp+0x74>)
 80155ac:	6665      	str	r5, [r4, #100]	; 0x64
 80155ae:	e9c4 5500 	strd	r5, r5, [r4]
 80155b2:	60a5      	str	r5, [r4, #8]
 80155b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80155b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80155bc:	2208      	movs	r2, #8
 80155be:	4629      	mov	r1, r5
 80155c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80155c4:	f7ff ff0a 	bl	80153dc <memset>
 80155c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80155cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80155d0:	e7e9      	b.n	80155a6 <__sfp+0x42>
 80155d2:	bf00      	nop
 80155d4:	08019260 	.word	0x08019260
 80155d8:	ffff0001 	.word	0xffff0001

080155dc <_fwalk_reent>:
 80155dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155e0:	4680      	mov	r8, r0
 80155e2:	4689      	mov	r9, r1
 80155e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80155e8:	2600      	movs	r6, #0
 80155ea:	b914      	cbnz	r4, 80155f2 <_fwalk_reent+0x16>
 80155ec:	4630      	mov	r0, r6
 80155ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80155f6:	3f01      	subs	r7, #1
 80155f8:	d501      	bpl.n	80155fe <_fwalk_reent+0x22>
 80155fa:	6824      	ldr	r4, [r4, #0]
 80155fc:	e7f5      	b.n	80155ea <_fwalk_reent+0xe>
 80155fe:	89ab      	ldrh	r3, [r5, #12]
 8015600:	2b01      	cmp	r3, #1
 8015602:	d907      	bls.n	8015614 <_fwalk_reent+0x38>
 8015604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015608:	3301      	adds	r3, #1
 801560a:	d003      	beq.n	8015614 <_fwalk_reent+0x38>
 801560c:	4629      	mov	r1, r5
 801560e:	4640      	mov	r0, r8
 8015610:	47c8      	blx	r9
 8015612:	4306      	orrs	r6, r0
 8015614:	3568      	adds	r5, #104	; 0x68
 8015616:	e7ee      	b.n	80155f6 <_fwalk_reent+0x1a>

08015618 <malloc>:
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <malloc+0xc>)
 801561a:	4601      	mov	r1, r0
 801561c:	6818      	ldr	r0, [r3, #0]
 801561e:	f000 b851 	b.w	80156c4 <_malloc_r>
 8015622:	bf00      	nop
 8015624:	20000020 	.word	0x20000020

08015628 <_free_r>:
 8015628:	b538      	push	{r3, r4, r5, lr}
 801562a:	4605      	mov	r5, r0
 801562c:	2900      	cmp	r1, #0
 801562e:	d045      	beq.n	80156bc <_free_r+0x94>
 8015630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015634:	1f0c      	subs	r4, r1, #4
 8015636:	2b00      	cmp	r3, #0
 8015638:	bfb8      	it	lt
 801563a:	18e4      	addlt	r4, r4, r3
 801563c:	f000 fdc0 	bl	80161c0 <__malloc_lock>
 8015640:	4a1f      	ldr	r2, [pc, #124]	; (80156c0 <_free_r+0x98>)
 8015642:	6813      	ldr	r3, [r2, #0]
 8015644:	4610      	mov	r0, r2
 8015646:	b933      	cbnz	r3, 8015656 <_free_r+0x2e>
 8015648:	6063      	str	r3, [r4, #4]
 801564a:	6014      	str	r4, [r2, #0]
 801564c:	4628      	mov	r0, r5
 801564e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015652:	f000 bdb6 	b.w	80161c2 <__malloc_unlock>
 8015656:	42a3      	cmp	r3, r4
 8015658:	d90c      	bls.n	8015674 <_free_r+0x4c>
 801565a:	6821      	ldr	r1, [r4, #0]
 801565c:	1862      	adds	r2, r4, r1
 801565e:	4293      	cmp	r3, r2
 8015660:	bf04      	itt	eq
 8015662:	681a      	ldreq	r2, [r3, #0]
 8015664:	685b      	ldreq	r3, [r3, #4]
 8015666:	6063      	str	r3, [r4, #4]
 8015668:	bf04      	itt	eq
 801566a:	1852      	addeq	r2, r2, r1
 801566c:	6022      	streq	r2, [r4, #0]
 801566e:	6004      	str	r4, [r0, #0]
 8015670:	e7ec      	b.n	801564c <_free_r+0x24>
 8015672:	4613      	mov	r3, r2
 8015674:	685a      	ldr	r2, [r3, #4]
 8015676:	b10a      	cbz	r2, 801567c <_free_r+0x54>
 8015678:	42a2      	cmp	r2, r4
 801567a:	d9fa      	bls.n	8015672 <_free_r+0x4a>
 801567c:	6819      	ldr	r1, [r3, #0]
 801567e:	1858      	adds	r0, r3, r1
 8015680:	42a0      	cmp	r0, r4
 8015682:	d10b      	bne.n	801569c <_free_r+0x74>
 8015684:	6820      	ldr	r0, [r4, #0]
 8015686:	4401      	add	r1, r0
 8015688:	1858      	adds	r0, r3, r1
 801568a:	4282      	cmp	r2, r0
 801568c:	6019      	str	r1, [r3, #0]
 801568e:	d1dd      	bne.n	801564c <_free_r+0x24>
 8015690:	6810      	ldr	r0, [r2, #0]
 8015692:	6852      	ldr	r2, [r2, #4]
 8015694:	605a      	str	r2, [r3, #4]
 8015696:	4401      	add	r1, r0
 8015698:	6019      	str	r1, [r3, #0]
 801569a:	e7d7      	b.n	801564c <_free_r+0x24>
 801569c:	d902      	bls.n	80156a4 <_free_r+0x7c>
 801569e:	230c      	movs	r3, #12
 80156a0:	602b      	str	r3, [r5, #0]
 80156a2:	e7d3      	b.n	801564c <_free_r+0x24>
 80156a4:	6820      	ldr	r0, [r4, #0]
 80156a6:	1821      	adds	r1, r4, r0
 80156a8:	428a      	cmp	r2, r1
 80156aa:	bf04      	itt	eq
 80156ac:	6811      	ldreq	r1, [r2, #0]
 80156ae:	6852      	ldreq	r2, [r2, #4]
 80156b0:	6062      	str	r2, [r4, #4]
 80156b2:	bf04      	itt	eq
 80156b4:	1809      	addeq	r1, r1, r0
 80156b6:	6021      	streq	r1, [r4, #0]
 80156b8:	605c      	str	r4, [r3, #4]
 80156ba:	e7c7      	b.n	801564c <_free_r+0x24>
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	bf00      	nop
 80156c0:	20004b4c 	.word	0x20004b4c

080156c4 <_malloc_r>:
 80156c4:	b570      	push	{r4, r5, r6, lr}
 80156c6:	1ccd      	adds	r5, r1, #3
 80156c8:	f025 0503 	bic.w	r5, r5, #3
 80156cc:	3508      	adds	r5, #8
 80156ce:	2d0c      	cmp	r5, #12
 80156d0:	bf38      	it	cc
 80156d2:	250c      	movcc	r5, #12
 80156d4:	2d00      	cmp	r5, #0
 80156d6:	4606      	mov	r6, r0
 80156d8:	db01      	blt.n	80156de <_malloc_r+0x1a>
 80156da:	42a9      	cmp	r1, r5
 80156dc:	d903      	bls.n	80156e6 <_malloc_r+0x22>
 80156de:	230c      	movs	r3, #12
 80156e0:	6033      	str	r3, [r6, #0]
 80156e2:	2000      	movs	r0, #0
 80156e4:	bd70      	pop	{r4, r5, r6, pc}
 80156e6:	f000 fd6b 	bl	80161c0 <__malloc_lock>
 80156ea:	4a21      	ldr	r2, [pc, #132]	; (8015770 <_malloc_r+0xac>)
 80156ec:	6814      	ldr	r4, [r2, #0]
 80156ee:	4621      	mov	r1, r4
 80156f0:	b991      	cbnz	r1, 8015718 <_malloc_r+0x54>
 80156f2:	4c20      	ldr	r4, [pc, #128]	; (8015774 <_malloc_r+0xb0>)
 80156f4:	6823      	ldr	r3, [r4, #0]
 80156f6:	b91b      	cbnz	r3, 8015700 <_malloc_r+0x3c>
 80156f8:	4630      	mov	r0, r6
 80156fa:	f000 fb05 	bl	8015d08 <_sbrk_r>
 80156fe:	6020      	str	r0, [r4, #0]
 8015700:	4629      	mov	r1, r5
 8015702:	4630      	mov	r0, r6
 8015704:	f000 fb00 	bl	8015d08 <_sbrk_r>
 8015708:	1c43      	adds	r3, r0, #1
 801570a:	d124      	bne.n	8015756 <_malloc_r+0x92>
 801570c:	230c      	movs	r3, #12
 801570e:	6033      	str	r3, [r6, #0]
 8015710:	4630      	mov	r0, r6
 8015712:	f000 fd56 	bl	80161c2 <__malloc_unlock>
 8015716:	e7e4      	b.n	80156e2 <_malloc_r+0x1e>
 8015718:	680b      	ldr	r3, [r1, #0]
 801571a:	1b5b      	subs	r3, r3, r5
 801571c:	d418      	bmi.n	8015750 <_malloc_r+0x8c>
 801571e:	2b0b      	cmp	r3, #11
 8015720:	d90f      	bls.n	8015742 <_malloc_r+0x7e>
 8015722:	600b      	str	r3, [r1, #0]
 8015724:	50cd      	str	r5, [r1, r3]
 8015726:	18cc      	adds	r4, r1, r3
 8015728:	4630      	mov	r0, r6
 801572a:	f000 fd4a 	bl	80161c2 <__malloc_unlock>
 801572e:	f104 000b 	add.w	r0, r4, #11
 8015732:	1d23      	adds	r3, r4, #4
 8015734:	f020 0007 	bic.w	r0, r0, #7
 8015738:	1ac3      	subs	r3, r0, r3
 801573a:	d0d3      	beq.n	80156e4 <_malloc_r+0x20>
 801573c:	425a      	negs	r2, r3
 801573e:	50e2      	str	r2, [r4, r3]
 8015740:	e7d0      	b.n	80156e4 <_malloc_r+0x20>
 8015742:	428c      	cmp	r4, r1
 8015744:	684b      	ldr	r3, [r1, #4]
 8015746:	bf16      	itet	ne
 8015748:	6063      	strne	r3, [r4, #4]
 801574a:	6013      	streq	r3, [r2, #0]
 801574c:	460c      	movne	r4, r1
 801574e:	e7eb      	b.n	8015728 <_malloc_r+0x64>
 8015750:	460c      	mov	r4, r1
 8015752:	6849      	ldr	r1, [r1, #4]
 8015754:	e7cc      	b.n	80156f0 <_malloc_r+0x2c>
 8015756:	1cc4      	adds	r4, r0, #3
 8015758:	f024 0403 	bic.w	r4, r4, #3
 801575c:	42a0      	cmp	r0, r4
 801575e:	d005      	beq.n	801576c <_malloc_r+0xa8>
 8015760:	1a21      	subs	r1, r4, r0
 8015762:	4630      	mov	r0, r6
 8015764:	f000 fad0 	bl	8015d08 <_sbrk_r>
 8015768:	3001      	adds	r0, #1
 801576a:	d0cf      	beq.n	801570c <_malloc_r+0x48>
 801576c:	6025      	str	r5, [r4, #0]
 801576e:	e7db      	b.n	8015728 <_malloc_r+0x64>
 8015770:	20004b4c 	.word	0x20004b4c
 8015774:	20004b50 	.word	0x20004b50

08015778 <__sfputc_r>:
 8015778:	6893      	ldr	r3, [r2, #8]
 801577a:	3b01      	subs	r3, #1
 801577c:	2b00      	cmp	r3, #0
 801577e:	b410      	push	{r4}
 8015780:	6093      	str	r3, [r2, #8]
 8015782:	da08      	bge.n	8015796 <__sfputc_r+0x1e>
 8015784:	6994      	ldr	r4, [r2, #24]
 8015786:	42a3      	cmp	r3, r4
 8015788:	db01      	blt.n	801578e <__sfputc_r+0x16>
 801578a:	290a      	cmp	r1, #10
 801578c:	d103      	bne.n	8015796 <__sfputc_r+0x1e>
 801578e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015792:	f000 bb0d 	b.w	8015db0 <__swbuf_r>
 8015796:	6813      	ldr	r3, [r2, #0]
 8015798:	1c58      	adds	r0, r3, #1
 801579a:	6010      	str	r0, [r2, #0]
 801579c:	7019      	strb	r1, [r3, #0]
 801579e:	4608      	mov	r0, r1
 80157a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157a4:	4770      	bx	lr

080157a6 <__sfputs_r>:
 80157a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157a8:	4606      	mov	r6, r0
 80157aa:	460f      	mov	r7, r1
 80157ac:	4614      	mov	r4, r2
 80157ae:	18d5      	adds	r5, r2, r3
 80157b0:	42ac      	cmp	r4, r5
 80157b2:	d101      	bne.n	80157b8 <__sfputs_r+0x12>
 80157b4:	2000      	movs	r0, #0
 80157b6:	e007      	b.n	80157c8 <__sfputs_r+0x22>
 80157b8:	463a      	mov	r2, r7
 80157ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157be:	4630      	mov	r0, r6
 80157c0:	f7ff ffda 	bl	8015778 <__sfputc_r>
 80157c4:	1c43      	adds	r3, r0, #1
 80157c6:	d1f3      	bne.n	80157b0 <__sfputs_r+0xa>
 80157c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157cc <_vfiprintf_r>:
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	460c      	mov	r4, r1
 80157d2:	b09d      	sub	sp, #116	; 0x74
 80157d4:	4617      	mov	r7, r2
 80157d6:	461d      	mov	r5, r3
 80157d8:	4606      	mov	r6, r0
 80157da:	b118      	cbz	r0, 80157e4 <_vfiprintf_r+0x18>
 80157dc:	6983      	ldr	r3, [r0, #24]
 80157de:	b90b      	cbnz	r3, 80157e4 <_vfiprintf_r+0x18>
 80157e0:	f7ff fe90 	bl	8015504 <__sinit>
 80157e4:	4b7c      	ldr	r3, [pc, #496]	; (80159d8 <_vfiprintf_r+0x20c>)
 80157e6:	429c      	cmp	r4, r3
 80157e8:	d158      	bne.n	801589c <_vfiprintf_r+0xd0>
 80157ea:	6874      	ldr	r4, [r6, #4]
 80157ec:	89a3      	ldrh	r3, [r4, #12]
 80157ee:	0718      	lsls	r0, r3, #28
 80157f0:	d55e      	bpl.n	80158b0 <_vfiprintf_r+0xe4>
 80157f2:	6923      	ldr	r3, [r4, #16]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d05b      	beq.n	80158b0 <_vfiprintf_r+0xe4>
 80157f8:	2300      	movs	r3, #0
 80157fa:	9309      	str	r3, [sp, #36]	; 0x24
 80157fc:	2320      	movs	r3, #32
 80157fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015802:	2330      	movs	r3, #48	; 0x30
 8015804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015808:	9503      	str	r5, [sp, #12]
 801580a:	f04f 0b01 	mov.w	fp, #1
 801580e:	46b8      	mov	r8, r7
 8015810:	4645      	mov	r5, r8
 8015812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015816:	b10b      	cbz	r3, 801581c <_vfiprintf_r+0x50>
 8015818:	2b25      	cmp	r3, #37	; 0x25
 801581a:	d154      	bne.n	80158c6 <_vfiprintf_r+0xfa>
 801581c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015820:	d00b      	beq.n	801583a <_vfiprintf_r+0x6e>
 8015822:	4653      	mov	r3, sl
 8015824:	463a      	mov	r2, r7
 8015826:	4621      	mov	r1, r4
 8015828:	4630      	mov	r0, r6
 801582a:	f7ff ffbc 	bl	80157a6 <__sfputs_r>
 801582e:	3001      	adds	r0, #1
 8015830:	f000 80c2 	beq.w	80159b8 <_vfiprintf_r+0x1ec>
 8015834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015836:	4453      	add	r3, sl
 8015838:	9309      	str	r3, [sp, #36]	; 0x24
 801583a:	f898 3000 	ldrb.w	r3, [r8]
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 80ba 	beq.w	80159b8 <_vfiprintf_r+0x1ec>
 8015844:	2300      	movs	r3, #0
 8015846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801584a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801584e:	9304      	str	r3, [sp, #16]
 8015850:	9307      	str	r3, [sp, #28]
 8015852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015856:	931a      	str	r3, [sp, #104]	; 0x68
 8015858:	46a8      	mov	r8, r5
 801585a:	2205      	movs	r2, #5
 801585c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015860:	485e      	ldr	r0, [pc, #376]	; (80159dc <_vfiprintf_r+0x210>)
 8015862:	f7ea fced 	bl	8000240 <memchr>
 8015866:	9b04      	ldr	r3, [sp, #16]
 8015868:	bb78      	cbnz	r0, 80158ca <_vfiprintf_r+0xfe>
 801586a:	06d9      	lsls	r1, r3, #27
 801586c:	bf44      	itt	mi
 801586e:	2220      	movmi	r2, #32
 8015870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015874:	071a      	lsls	r2, r3, #28
 8015876:	bf44      	itt	mi
 8015878:	222b      	movmi	r2, #43	; 0x2b
 801587a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801587e:	782a      	ldrb	r2, [r5, #0]
 8015880:	2a2a      	cmp	r2, #42	; 0x2a
 8015882:	d02a      	beq.n	80158da <_vfiprintf_r+0x10e>
 8015884:	9a07      	ldr	r2, [sp, #28]
 8015886:	46a8      	mov	r8, r5
 8015888:	2000      	movs	r0, #0
 801588a:	250a      	movs	r5, #10
 801588c:	4641      	mov	r1, r8
 801588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015892:	3b30      	subs	r3, #48	; 0x30
 8015894:	2b09      	cmp	r3, #9
 8015896:	d969      	bls.n	801596c <_vfiprintf_r+0x1a0>
 8015898:	b360      	cbz	r0, 80158f4 <_vfiprintf_r+0x128>
 801589a:	e024      	b.n	80158e6 <_vfiprintf_r+0x11a>
 801589c:	4b50      	ldr	r3, [pc, #320]	; (80159e0 <_vfiprintf_r+0x214>)
 801589e:	429c      	cmp	r4, r3
 80158a0:	d101      	bne.n	80158a6 <_vfiprintf_r+0xda>
 80158a2:	68b4      	ldr	r4, [r6, #8]
 80158a4:	e7a2      	b.n	80157ec <_vfiprintf_r+0x20>
 80158a6:	4b4f      	ldr	r3, [pc, #316]	; (80159e4 <_vfiprintf_r+0x218>)
 80158a8:	429c      	cmp	r4, r3
 80158aa:	bf08      	it	eq
 80158ac:	68f4      	ldreq	r4, [r6, #12]
 80158ae:	e79d      	b.n	80157ec <_vfiprintf_r+0x20>
 80158b0:	4621      	mov	r1, r4
 80158b2:	4630      	mov	r0, r6
 80158b4:	f000 fae0 	bl	8015e78 <__swsetup_r>
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d09d      	beq.n	80157f8 <_vfiprintf_r+0x2c>
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158c0:	b01d      	add	sp, #116	; 0x74
 80158c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c6:	46a8      	mov	r8, r5
 80158c8:	e7a2      	b.n	8015810 <_vfiprintf_r+0x44>
 80158ca:	4a44      	ldr	r2, [pc, #272]	; (80159dc <_vfiprintf_r+0x210>)
 80158cc:	1a80      	subs	r0, r0, r2
 80158ce:	fa0b f000 	lsl.w	r0, fp, r0
 80158d2:	4318      	orrs	r0, r3
 80158d4:	9004      	str	r0, [sp, #16]
 80158d6:	4645      	mov	r5, r8
 80158d8:	e7be      	b.n	8015858 <_vfiprintf_r+0x8c>
 80158da:	9a03      	ldr	r2, [sp, #12]
 80158dc:	1d11      	adds	r1, r2, #4
 80158de:	6812      	ldr	r2, [r2, #0]
 80158e0:	9103      	str	r1, [sp, #12]
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	db01      	blt.n	80158ea <_vfiprintf_r+0x11e>
 80158e6:	9207      	str	r2, [sp, #28]
 80158e8:	e004      	b.n	80158f4 <_vfiprintf_r+0x128>
 80158ea:	4252      	negs	r2, r2
 80158ec:	f043 0302 	orr.w	r3, r3, #2
 80158f0:	9207      	str	r2, [sp, #28]
 80158f2:	9304      	str	r3, [sp, #16]
 80158f4:	f898 3000 	ldrb.w	r3, [r8]
 80158f8:	2b2e      	cmp	r3, #46	; 0x2e
 80158fa:	d10e      	bne.n	801591a <_vfiprintf_r+0x14e>
 80158fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015900:	2b2a      	cmp	r3, #42	; 0x2a
 8015902:	d138      	bne.n	8015976 <_vfiprintf_r+0x1aa>
 8015904:	9b03      	ldr	r3, [sp, #12]
 8015906:	1d1a      	adds	r2, r3, #4
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	9203      	str	r2, [sp, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	bfb8      	it	lt
 8015910:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015914:	f108 0802 	add.w	r8, r8, #2
 8015918:	9305      	str	r3, [sp, #20]
 801591a:	4d33      	ldr	r5, [pc, #204]	; (80159e8 <_vfiprintf_r+0x21c>)
 801591c:	f898 1000 	ldrb.w	r1, [r8]
 8015920:	2203      	movs	r2, #3
 8015922:	4628      	mov	r0, r5
 8015924:	f7ea fc8c 	bl	8000240 <memchr>
 8015928:	b140      	cbz	r0, 801593c <_vfiprintf_r+0x170>
 801592a:	2340      	movs	r3, #64	; 0x40
 801592c:	1b40      	subs	r0, r0, r5
 801592e:	fa03 f000 	lsl.w	r0, r3, r0
 8015932:	9b04      	ldr	r3, [sp, #16]
 8015934:	4303      	orrs	r3, r0
 8015936:	f108 0801 	add.w	r8, r8, #1
 801593a:	9304      	str	r3, [sp, #16]
 801593c:	f898 1000 	ldrb.w	r1, [r8]
 8015940:	482a      	ldr	r0, [pc, #168]	; (80159ec <_vfiprintf_r+0x220>)
 8015942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015946:	2206      	movs	r2, #6
 8015948:	f108 0701 	add.w	r7, r8, #1
 801594c:	f7ea fc78 	bl	8000240 <memchr>
 8015950:	2800      	cmp	r0, #0
 8015952:	d037      	beq.n	80159c4 <_vfiprintf_r+0x1f8>
 8015954:	4b26      	ldr	r3, [pc, #152]	; (80159f0 <_vfiprintf_r+0x224>)
 8015956:	bb1b      	cbnz	r3, 80159a0 <_vfiprintf_r+0x1d4>
 8015958:	9b03      	ldr	r3, [sp, #12]
 801595a:	3307      	adds	r3, #7
 801595c:	f023 0307 	bic.w	r3, r3, #7
 8015960:	3308      	adds	r3, #8
 8015962:	9303      	str	r3, [sp, #12]
 8015964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015966:	444b      	add	r3, r9
 8015968:	9309      	str	r3, [sp, #36]	; 0x24
 801596a:	e750      	b.n	801580e <_vfiprintf_r+0x42>
 801596c:	fb05 3202 	mla	r2, r5, r2, r3
 8015970:	2001      	movs	r0, #1
 8015972:	4688      	mov	r8, r1
 8015974:	e78a      	b.n	801588c <_vfiprintf_r+0xc0>
 8015976:	2300      	movs	r3, #0
 8015978:	f108 0801 	add.w	r8, r8, #1
 801597c:	9305      	str	r3, [sp, #20]
 801597e:	4619      	mov	r1, r3
 8015980:	250a      	movs	r5, #10
 8015982:	4640      	mov	r0, r8
 8015984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015988:	3a30      	subs	r2, #48	; 0x30
 801598a:	2a09      	cmp	r2, #9
 801598c:	d903      	bls.n	8015996 <_vfiprintf_r+0x1ca>
 801598e:	2b00      	cmp	r3, #0
 8015990:	d0c3      	beq.n	801591a <_vfiprintf_r+0x14e>
 8015992:	9105      	str	r1, [sp, #20]
 8015994:	e7c1      	b.n	801591a <_vfiprintf_r+0x14e>
 8015996:	fb05 2101 	mla	r1, r5, r1, r2
 801599a:	2301      	movs	r3, #1
 801599c:	4680      	mov	r8, r0
 801599e:	e7f0      	b.n	8015982 <_vfiprintf_r+0x1b6>
 80159a0:	ab03      	add	r3, sp, #12
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	4622      	mov	r2, r4
 80159a6:	4b13      	ldr	r3, [pc, #76]	; (80159f4 <_vfiprintf_r+0x228>)
 80159a8:	a904      	add	r1, sp, #16
 80159aa:	4630      	mov	r0, r6
 80159ac:	f3af 8000 	nop.w
 80159b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80159b4:	4681      	mov	r9, r0
 80159b6:	d1d5      	bne.n	8015964 <_vfiprintf_r+0x198>
 80159b8:	89a3      	ldrh	r3, [r4, #12]
 80159ba:	065b      	lsls	r3, r3, #25
 80159bc:	f53f af7e 	bmi.w	80158bc <_vfiprintf_r+0xf0>
 80159c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159c2:	e77d      	b.n	80158c0 <_vfiprintf_r+0xf4>
 80159c4:	ab03      	add	r3, sp, #12
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	4622      	mov	r2, r4
 80159ca:	4b0a      	ldr	r3, [pc, #40]	; (80159f4 <_vfiprintf_r+0x228>)
 80159cc:	a904      	add	r1, sp, #16
 80159ce:	4630      	mov	r0, r6
 80159d0:	f000 f888 	bl	8015ae4 <_printf_i>
 80159d4:	e7ec      	b.n	80159b0 <_vfiprintf_r+0x1e4>
 80159d6:	bf00      	nop
 80159d8:	08019284 	.word	0x08019284
 80159dc:	080192c4 	.word	0x080192c4
 80159e0:	080192a4 	.word	0x080192a4
 80159e4:	08019264 	.word	0x08019264
 80159e8:	080192ca 	.word	0x080192ca
 80159ec:	080192ce 	.word	0x080192ce
 80159f0:	00000000 	.word	0x00000000
 80159f4:	080157a7 	.word	0x080157a7

080159f8 <_printf_common>:
 80159f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159fc:	4691      	mov	r9, r2
 80159fe:	461f      	mov	r7, r3
 8015a00:	688a      	ldr	r2, [r1, #8]
 8015a02:	690b      	ldr	r3, [r1, #16]
 8015a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a08:	4293      	cmp	r3, r2
 8015a0a:	bfb8      	it	lt
 8015a0c:	4613      	movlt	r3, r2
 8015a0e:	f8c9 3000 	str.w	r3, [r9]
 8015a12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a16:	4606      	mov	r6, r0
 8015a18:	460c      	mov	r4, r1
 8015a1a:	b112      	cbz	r2, 8015a22 <_printf_common+0x2a>
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	f8c9 3000 	str.w	r3, [r9]
 8015a22:	6823      	ldr	r3, [r4, #0]
 8015a24:	0699      	lsls	r1, r3, #26
 8015a26:	bf42      	ittt	mi
 8015a28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015a2c:	3302      	addmi	r3, #2
 8015a2e:	f8c9 3000 	strmi.w	r3, [r9]
 8015a32:	6825      	ldr	r5, [r4, #0]
 8015a34:	f015 0506 	ands.w	r5, r5, #6
 8015a38:	d107      	bne.n	8015a4a <_printf_common+0x52>
 8015a3a:	f104 0a19 	add.w	sl, r4, #25
 8015a3e:	68e3      	ldr	r3, [r4, #12]
 8015a40:	f8d9 2000 	ldr.w	r2, [r9]
 8015a44:	1a9b      	subs	r3, r3, r2
 8015a46:	42ab      	cmp	r3, r5
 8015a48:	dc28      	bgt.n	8015a9c <_printf_common+0xa4>
 8015a4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015a4e:	6822      	ldr	r2, [r4, #0]
 8015a50:	3300      	adds	r3, #0
 8015a52:	bf18      	it	ne
 8015a54:	2301      	movne	r3, #1
 8015a56:	0692      	lsls	r2, r2, #26
 8015a58:	d42d      	bmi.n	8015ab6 <_printf_common+0xbe>
 8015a5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a5e:	4639      	mov	r1, r7
 8015a60:	4630      	mov	r0, r6
 8015a62:	47c0      	blx	r8
 8015a64:	3001      	adds	r0, #1
 8015a66:	d020      	beq.n	8015aaa <_printf_common+0xb2>
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	68e5      	ldr	r5, [r4, #12]
 8015a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8015a70:	f003 0306 	and.w	r3, r3, #6
 8015a74:	2b04      	cmp	r3, #4
 8015a76:	bf08      	it	eq
 8015a78:	1aad      	subeq	r5, r5, r2
 8015a7a:	68a3      	ldr	r3, [r4, #8]
 8015a7c:	6922      	ldr	r2, [r4, #16]
 8015a7e:	bf0c      	ite	eq
 8015a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a84:	2500      	movne	r5, #0
 8015a86:	4293      	cmp	r3, r2
 8015a88:	bfc4      	itt	gt
 8015a8a:	1a9b      	subgt	r3, r3, r2
 8015a8c:	18ed      	addgt	r5, r5, r3
 8015a8e:	f04f 0900 	mov.w	r9, #0
 8015a92:	341a      	adds	r4, #26
 8015a94:	454d      	cmp	r5, r9
 8015a96:	d11a      	bne.n	8015ace <_printf_common+0xd6>
 8015a98:	2000      	movs	r0, #0
 8015a9a:	e008      	b.n	8015aae <_printf_common+0xb6>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	4652      	mov	r2, sl
 8015aa0:	4639      	mov	r1, r7
 8015aa2:	4630      	mov	r0, r6
 8015aa4:	47c0      	blx	r8
 8015aa6:	3001      	adds	r0, #1
 8015aa8:	d103      	bne.n	8015ab2 <_printf_common+0xba>
 8015aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ab2:	3501      	adds	r5, #1
 8015ab4:	e7c3      	b.n	8015a3e <_printf_common+0x46>
 8015ab6:	18e1      	adds	r1, r4, r3
 8015ab8:	1c5a      	adds	r2, r3, #1
 8015aba:	2030      	movs	r0, #48	; 0x30
 8015abc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ac0:	4422      	add	r2, r4
 8015ac2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015aca:	3302      	adds	r3, #2
 8015acc:	e7c5      	b.n	8015a5a <_printf_common+0x62>
 8015ace:	2301      	movs	r3, #1
 8015ad0:	4622      	mov	r2, r4
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	4630      	mov	r0, r6
 8015ad6:	47c0      	blx	r8
 8015ad8:	3001      	adds	r0, #1
 8015ada:	d0e6      	beq.n	8015aaa <_printf_common+0xb2>
 8015adc:	f109 0901 	add.w	r9, r9, #1
 8015ae0:	e7d8      	b.n	8015a94 <_printf_common+0x9c>
	...

08015ae4 <_printf_i>:
 8015ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ae8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015aec:	460c      	mov	r4, r1
 8015aee:	7e09      	ldrb	r1, [r1, #24]
 8015af0:	b085      	sub	sp, #20
 8015af2:	296e      	cmp	r1, #110	; 0x6e
 8015af4:	4617      	mov	r7, r2
 8015af6:	4606      	mov	r6, r0
 8015af8:	4698      	mov	r8, r3
 8015afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015afc:	f000 80b3 	beq.w	8015c66 <_printf_i+0x182>
 8015b00:	d822      	bhi.n	8015b48 <_printf_i+0x64>
 8015b02:	2963      	cmp	r1, #99	; 0x63
 8015b04:	d036      	beq.n	8015b74 <_printf_i+0x90>
 8015b06:	d80a      	bhi.n	8015b1e <_printf_i+0x3a>
 8015b08:	2900      	cmp	r1, #0
 8015b0a:	f000 80b9 	beq.w	8015c80 <_printf_i+0x19c>
 8015b0e:	2958      	cmp	r1, #88	; 0x58
 8015b10:	f000 8083 	beq.w	8015c1a <_printf_i+0x136>
 8015b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015b1c:	e032      	b.n	8015b84 <_printf_i+0xa0>
 8015b1e:	2964      	cmp	r1, #100	; 0x64
 8015b20:	d001      	beq.n	8015b26 <_printf_i+0x42>
 8015b22:	2969      	cmp	r1, #105	; 0x69
 8015b24:	d1f6      	bne.n	8015b14 <_printf_i+0x30>
 8015b26:	6820      	ldr	r0, [r4, #0]
 8015b28:	6813      	ldr	r3, [r2, #0]
 8015b2a:	0605      	lsls	r5, r0, #24
 8015b2c:	f103 0104 	add.w	r1, r3, #4
 8015b30:	d52a      	bpl.n	8015b88 <_printf_i+0xa4>
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	6011      	str	r1, [r2, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	da03      	bge.n	8015b42 <_printf_i+0x5e>
 8015b3a:	222d      	movs	r2, #45	; 0x2d
 8015b3c:	425b      	negs	r3, r3
 8015b3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015b42:	486f      	ldr	r0, [pc, #444]	; (8015d00 <_printf_i+0x21c>)
 8015b44:	220a      	movs	r2, #10
 8015b46:	e039      	b.n	8015bbc <_printf_i+0xd8>
 8015b48:	2973      	cmp	r1, #115	; 0x73
 8015b4a:	f000 809d 	beq.w	8015c88 <_printf_i+0x1a4>
 8015b4e:	d808      	bhi.n	8015b62 <_printf_i+0x7e>
 8015b50:	296f      	cmp	r1, #111	; 0x6f
 8015b52:	d020      	beq.n	8015b96 <_printf_i+0xb2>
 8015b54:	2970      	cmp	r1, #112	; 0x70
 8015b56:	d1dd      	bne.n	8015b14 <_printf_i+0x30>
 8015b58:	6823      	ldr	r3, [r4, #0]
 8015b5a:	f043 0320 	orr.w	r3, r3, #32
 8015b5e:	6023      	str	r3, [r4, #0]
 8015b60:	e003      	b.n	8015b6a <_printf_i+0x86>
 8015b62:	2975      	cmp	r1, #117	; 0x75
 8015b64:	d017      	beq.n	8015b96 <_printf_i+0xb2>
 8015b66:	2978      	cmp	r1, #120	; 0x78
 8015b68:	d1d4      	bne.n	8015b14 <_printf_i+0x30>
 8015b6a:	2378      	movs	r3, #120	; 0x78
 8015b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b70:	4864      	ldr	r0, [pc, #400]	; (8015d04 <_printf_i+0x220>)
 8015b72:	e055      	b.n	8015c20 <_printf_i+0x13c>
 8015b74:	6813      	ldr	r3, [r2, #0]
 8015b76:	1d19      	adds	r1, r3, #4
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	6011      	str	r1, [r2, #0]
 8015b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b84:	2301      	movs	r3, #1
 8015b86:	e08c      	b.n	8015ca2 <_printf_i+0x1be>
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	6011      	str	r1, [r2, #0]
 8015b8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015b90:	bf18      	it	ne
 8015b92:	b21b      	sxthne	r3, r3
 8015b94:	e7cf      	b.n	8015b36 <_printf_i+0x52>
 8015b96:	6813      	ldr	r3, [r2, #0]
 8015b98:	6825      	ldr	r5, [r4, #0]
 8015b9a:	1d18      	adds	r0, r3, #4
 8015b9c:	6010      	str	r0, [r2, #0]
 8015b9e:	0628      	lsls	r0, r5, #24
 8015ba0:	d501      	bpl.n	8015ba6 <_printf_i+0xc2>
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	e002      	b.n	8015bac <_printf_i+0xc8>
 8015ba6:	0668      	lsls	r0, r5, #25
 8015ba8:	d5fb      	bpl.n	8015ba2 <_printf_i+0xbe>
 8015baa:	881b      	ldrh	r3, [r3, #0]
 8015bac:	4854      	ldr	r0, [pc, #336]	; (8015d00 <_printf_i+0x21c>)
 8015bae:	296f      	cmp	r1, #111	; 0x6f
 8015bb0:	bf14      	ite	ne
 8015bb2:	220a      	movne	r2, #10
 8015bb4:	2208      	moveq	r2, #8
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015bbc:	6865      	ldr	r5, [r4, #4]
 8015bbe:	60a5      	str	r5, [r4, #8]
 8015bc0:	2d00      	cmp	r5, #0
 8015bc2:	f2c0 8095 	blt.w	8015cf0 <_printf_i+0x20c>
 8015bc6:	6821      	ldr	r1, [r4, #0]
 8015bc8:	f021 0104 	bic.w	r1, r1, #4
 8015bcc:	6021      	str	r1, [r4, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d13d      	bne.n	8015c4e <_printf_i+0x16a>
 8015bd2:	2d00      	cmp	r5, #0
 8015bd4:	f040 808e 	bne.w	8015cf4 <_printf_i+0x210>
 8015bd8:	4665      	mov	r5, ip
 8015bda:	2a08      	cmp	r2, #8
 8015bdc:	d10b      	bne.n	8015bf6 <_printf_i+0x112>
 8015bde:	6823      	ldr	r3, [r4, #0]
 8015be0:	07db      	lsls	r3, r3, #31
 8015be2:	d508      	bpl.n	8015bf6 <_printf_i+0x112>
 8015be4:	6923      	ldr	r3, [r4, #16]
 8015be6:	6862      	ldr	r2, [r4, #4]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	bfde      	ittt	le
 8015bec:	2330      	movle	r3, #48	; 0x30
 8015bee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015bf2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015bf6:	ebac 0305 	sub.w	r3, ip, r5
 8015bfa:	6123      	str	r3, [r4, #16]
 8015bfc:	f8cd 8000 	str.w	r8, [sp]
 8015c00:	463b      	mov	r3, r7
 8015c02:	aa03      	add	r2, sp, #12
 8015c04:	4621      	mov	r1, r4
 8015c06:	4630      	mov	r0, r6
 8015c08:	f7ff fef6 	bl	80159f8 <_printf_common>
 8015c0c:	3001      	adds	r0, #1
 8015c0e:	d14d      	bne.n	8015cac <_printf_i+0x1c8>
 8015c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c14:	b005      	add	sp, #20
 8015c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c1a:	4839      	ldr	r0, [pc, #228]	; (8015d00 <_printf_i+0x21c>)
 8015c1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015c20:	6813      	ldr	r3, [r2, #0]
 8015c22:	6821      	ldr	r1, [r4, #0]
 8015c24:	1d1d      	adds	r5, r3, #4
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	6015      	str	r5, [r2, #0]
 8015c2a:	060a      	lsls	r2, r1, #24
 8015c2c:	d50b      	bpl.n	8015c46 <_printf_i+0x162>
 8015c2e:	07ca      	lsls	r2, r1, #31
 8015c30:	bf44      	itt	mi
 8015c32:	f041 0120 	orrmi.w	r1, r1, #32
 8015c36:	6021      	strmi	r1, [r4, #0]
 8015c38:	b91b      	cbnz	r3, 8015c42 <_printf_i+0x15e>
 8015c3a:	6822      	ldr	r2, [r4, #0]
 8015c3c:	f022 0220 	bic.w	r2, r2, #32
 8015c40:	6022      	str	r2, [r4, #0]
 8015c42:	2210      	movs	r2, #16
 8015c44:	e7b7      	b.n	8015bb6 <_printf_i+0xd2>
 8015c46:	064d      	lsls	r5, r1, #25
 8015c48:	bf48      	it	mi
 8015c4a:	b29b      	uxthmi	r3, r3
 8015c4c:	e7ef      	b.n	8015c2e <_printf_i+0x14a>
 8015c4e:	4665      	mov	r5, ip
 8015c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8015c54:	fb02 3311 	mls	r3, r2, r1, r3
 8015c58:	5cc3      	ldrb	r3, [r0, r3]
 8015c5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015c5e:	460b      	mov	r3, r1
 8015c60:	2900      	cmp	r1, #0
 8015c62:	d1f5      	bne.n	8015c50 <_printf_i+0x16c>
 8015c64:	e7b9      	b.n	8015bda <_printf_i+0xf6>
 8015c66:	6813      	ldr	r3, [r2, #0]
 8015c68:	6825      	ldr	r5, [r4, #0]
 8015c6a:	6961      	ldr	r1, [r4, #20]
 8015c6c:	1d18      	adds	r0, r3, #4
 8015c6e:	6010      	str	r0, [r2, #0]
 8015c70:	0628      	lsls	r0, r5, #24
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	d501      	bpl.n	8015c7a <_printf_i+0x196>
 8015c76:	6019      	str	r1, [r3, #0]
 8015c78:	e002      	b.n	8015c80 <_printf_i+0x19c>
 8015c7a:	066a      	lsls	r2, r5, #25
 8015c7c:	d5fb      	bpl.n	8015c76 <_printf_i+0x192>
 8015c7e:	8019      	strh	r1, [r3, #0]
 8015c80:	2300      	movs	r3, #0
 8015c82:	6123      	str	r3, [r4, #16]
 8015c84:	4665      	mov	r5, ip
 8015c86:	e7b9      	b.n	8015bfc <_printf_i+0x118>
 8015c88:	6813      	ldr	r3, [r2, #0]
 8015c8a:	1d19      	adds	r1, r3, #4
 8015c8c:	6011      	str	r1, [r2, #0]
 8015c8e:	681d      	ldr	r5, [r3, #0]
 8015c90:	6862      	ldr	r2, [r4, #4]
 8015c92:	2100      	movs	r1, #0
 8015c94:	4628      	mov	r0, r5
 8015c96:	f7ea fad3 	bl	8000240 <memchr>
 8015c9a:	b108      	cbz	r0, 8015ca0 <_printf_i+0x1bc>
 8015c9c:	1b40      	subs	r0, r0, r5
 8015c9e:	6060      	str	r0, [r4, #4]
 8015ca0:	6863      	ldr	r3, [r4, #4]
 8015ca2:	6123      	str	r3, [r4, #16]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015caa:	e7a7      	b.n	8015bfc <_printf_i+0x118>
 8015cac:	6923      	ldr	r3, [r4, #16]
 8015cae:	462a      	mov	r2, r5
 8015cb0:	4639      	mov	r1, r7
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	47c0      	blx	r8
 8015cb6:	3001      	adds	r0, #1
 8015cb8:	d0aa      	beq.n	8015c10 <_printf_i+0x12c>
 8015cba:	6823      	ldr	r3, [r4, #0]
 8015cbc:	079b      	lsls	r3, r3, #30
 8015cbe:	d413      	bmi.n	8015ce8 <_printf_i+0x204>
 8015cc0:	68e0      	ldr	r0, [r4, #12]
 8015cc2:	9b03      	ldr	r3, [sp, #12]
 8015cc4:	4298      	cmp	r0, r3
 8015cc6:	bfb8      	it	lt
 8015cc8:	4618      	movlt	r0, r3
 8015cca:	e7a3      	b.n	8015c14 <_printf_i+0x130>
 8015ccc:	2301      	movs	r3, #1
 8015cce:	464a      	mov	r2, r9
 8015cd0:	4639      	mov	r1, r7
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	47c0      	blx	r8
 8015cd6:	3001      	adds	r0, #1
 8015cd8:	d09a      	beq.n	8015c10 <_printf_i+0x12c>
 8015cda:	3501      	adds	r5, #1
 8015cdc:	68e3      	ldr	r3, [r4, #12]
 8015cde:	9a03      	ldr	r2, [sp, #12]
 8015ce0:	1a9b      	subs	r3, r3, r2
 8015ce2:	42ab      	cmp	r3, r5
 8015ce4:	dcf2      	bgt.n	8015ccc <_printf_i+0x1e8>
 8015ce6:	e7eb      	b.n	8015cc0 <_printf_i+0x1dc>
 8015ce8:	2500      	movs	r5, #0
 8015cea:	f104 0919 	add.w	r9, r4, #25
 8015cee:	e7f5      	b.n	8015cdc <_printf_i+0x1f8>
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1ac      	bne.n	8015c4e <_printf_i+0x16a>
 8015cf4:	7803      	ldrb	r3, [r0, #0]
 8015cf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015cfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015cfe:	e76c      	b.n	8015bda <_printf_i+0xf6>
 8015d00:	080192d5 	.word	0x080192d5
 8015d04:	080192e6 	.word	0x080192e6

08015d08 <_sbrk_r>:
 8015d08:	b538      	push	{r3, r4, r5, lr}
 8015d0a:	4c06      	ldr	r4, [pc, #24]	; (8015d24 <_sbrk_r+0x1c>)
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	4605      	mov	r5, r0
 8015d10:	4608      	mov	r0, r1
 8015d12:	6023      	str	r3, [r4, #0]
 8015d14:	f7eb f800 	bl	8000d18 <_sbrk>
 8015d18:	1c43      	adds	r3, r0, #1
 8015d1a:	d102      	bne.n	8015d22 <_sbrk_r+0x1a>
 8015d1c:	6823      	ldr	r3, [r4, #0]
 8015d1e:	b103      	cbz	r3, 8015d22 <_sbrk_r+0x1a>
 8015d20:	602b      	str	r3, [r5, #0]
 8015d22:	bd38      	pop	{r3, r4, r5, pc}
 8015d24:	2000b904 	.word	0x2000b904

08015d28 <__sread>:
 8015d28:	b510      	push	{r4, lr}
 8015d2a:	460c      	mov	r4, r1
 8015d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d30:	f000 fa48 	bl	80161c4 <_read_r>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	bfab      	itete	ge
 8015d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8015d3c:	181b      	addge	r3, r3, r0
 8015d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d42:	bfac      	ite	ge
 8015d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d46:	81a3      	strhlt	r3, [r4, #12]
 8015d48:	bd10      	pop	{r4, pc}

08015d4a <__swrite>:
 8015d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d4e:	461f      	mov	r7, r3
 8015d50:	898b      	ldrh	r3, [r1, #12]
 8015d52:	05db      	lsls	r3, r3, #23
 8015d54:	4605      	mov	r5, r0
 8015d56:	460c      	mov	r4, r1
 8015d58:	4616      	mov	r6, r2
 8015d5a:	d505      	bpl.n	8015d68 <__swrite+0x1e>
 8015d5c:	2302      	movs	r3, #2
 8015d5e:	2200      	movs	r2, #0
 8015d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d64:	f000 f9b6 	bl	80160d4 <_lseek_r>
 8015d68:	89a3      	ldrh	r3, [r4, #12]
 8015d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d72:	81a3      	strh	r3, [r4, #12]
 8015d74:	4632      	mov	r2, r6
 8015d76:	463b      	mov	r3, r7
 8015d78:	4628      	mov	r0, r5
 8015d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7e:	f000 b869 	b.w	8015e54 <_write_r>

08015d82 <__sseek>:
 8015d82:	b510      	push	{r4, lr}
 8015d84:	460c      	mov	r4, r1
 8015d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d8a:	f000 f9a3 	bl	80160d4 <_lseek_r>
 8015d8e:	1c43      	adds	r3, r0, #1
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	bf15      	itete	ne
 8015d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d9e:	81a3      	strheq	r3, [r4, #12]
 8015da0:	bf18      	it	ne
 8015da2:	81a3      	strhne	r3, [r4, #12]
 8015da4:	bd10      	pop	{r4, pc}

08015da6 <__sclose>:
 8015da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015daa:	f000 b8d3 	b.w	8015f54 <_close_r>
	...

08015db0 <__swbuf_r>:
 8015db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015db2:	460e      	mov	r6, r1
 8015db4:	4614      	mov	r4, r2
 8015db6:	4605      	mov	r5, r0
 8015db8:	b118      	cbz	r0, 8015dc2 <__swbuf_r+0x12>
 8015dba:	6983      	ldr	r3, [r0, #24]
 8015dbc:	b90b      	cbnz	r3, 8015dc2 <__swbuf_r+0x12>
 8015dbe:	f7ff fba1 	bl	8015504 <__sinit>
 8015dc2:	4b21      	ldr	r3, [pc, #132]	; (8015e48 <__swbuf_r+0x98>)
 8015dc4:	429c      	cmp	r4, r3
 8015dc6:	d12a      	bne.n	8015e1e <__swbuf_r+0x6e>
 8015dc8:	686c      	ldr	r4, [r5, #4]
 8015dca:	69a3      	ldr	r3, [r4, #24]
 8015dcc:	60a3      	str	r3, [r4, #8]
 8015dce:	89a3      	ldrh	r3, [r4, #12]
 8015dd0:	071a      	lsls	r2, r3, #28
 8015dd2:	d52e      	bpl.n	8015e32 <__swbuf_r+0x82>
 8015dd4:	6923      	ldr	r3, [r4, #16]
 8015dd6:	b363      	cbz	r3, 8015e32 <__swbuf_r+0x82>
 8015dd8:	6923      	ldr	r3, [r4, #16]
 8015dda:	6820      	ldr	r0, [r4, #0]
 8015ddc:	1ac0      	subs	r0, r0, r3
 8015dde:	6963      	ldr	r3, [r4, #20]
 8015de0:	b2f6      	uxtb	r6, r6
 8015de2:	4283      	cmp	r3, r0
 8015de4:	4637      	mov	r7, r6
 8015de6:	dc04      	bgt.n	8015df2 <__swbuf_r+0x42>
 8015de8:	4621      	mov	r1, r4
 8015dea:	4628      	mov	r0, r5
 8015dec:	f000 f948 	bl	8016080 <_fflush_r>
 8015df0:	bb28      	cbnz	r0, 8015e3e <__swbuf_r+0x8e>
 8015df2:	68a3      	ldr	r3, [r4, #8]
 8015df4:	3b01      	subs	r3, #1
 8015df6:	60a3      	str	r3, [r4, #8]
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	1c5a      	adds	r2, r3, #1
 8015dfc:	6022      	str	r2, [r4, #0]
 8015dfe:	701e      	strb	r6, [r3, #0]
 8015e00:	6963      	ldr	r3, [r4, #20]
 8015e02:	3001      	adds	r0, #1
 8015e04:	4283      	cmp	r3, r0
 8015e06:	d004      	beq.n	8015e12 <__swbuf_r+0x62>
 8015e08:	89a3      	ldrh	r3, [r4, #12]
 8015e0a:	07db      	lsls	r3, r3, #31
 8015e0c:	d519      	bpl.n	8015e42 <__swbuf_r+0x92>
 8015e0e:	2e0a      	cmp	r6, #10
 8015e10:	d117      	bne.n	8015e42 <__swbuf_r+0x92>
 8015e12:	4621      	mov	r1, r4
 8015e14:	4628      	mov	r0, r5
 8015e16:	f000 f933 	bl	8016080 <_fflush_r>
 8015e1a:	b190      	cbz	r0, 8015e42 <__swbuf_r+0x92>
 8015e1c:	e00f      	b.n	8015e3e <__swbuf_r+0x8e>
 8015e1e:	4b0b      	ldr	r3, [pc, #44]	; (8015e4c <__swbuf_r+0x9c>)
 8015e20:	429c      	cmp	r4, r3
 8015e22:	d101      	bne.n	8015e28 <__swbuf_r+0x78>
 8015e24:	68ac      	ldr	r4, [r5, #8]
 8015e26:	e7d0      	b.n	8015dca <__swbuf_r+0x1a>
 8015e28:	4b09      	ldr	r3, [pc, #36]	; (8015e50 <__swbuf_r+0xa0>)
 8015e2a:	429c      	cmp	r4, r3
 8015e2c:	bf08      	it	eq
 8015e2e:	68ec      	ldreq	r4, [r5, #12]
 8015e30:	e7cb      	b.n	8015dca <__swbuf_r+0x1a>
 8015e32:	4621      	mov	r1, r4
 8015e34:	4628      	mov	r0, r5
 8015e36:	f000 f81f 	bl	8015e78 <__swsetup_r>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d0cc      	beq.n	8015dd8 <__swbuf_r+0x28>
 8015e3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015e42:	4638      	mov	r0, r7
 8015e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e46:	bf00      	nop
 8015e48:	08019284 	.word	0x08019284
 8015e4c:	080192a4 	.word	0x080192a4
 8015e50:	08019264 	.word	0x08019264

08015e54 <_write_r>:
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	4c07      	ldr	r4, [pc, #28]	; (8015e74 <_write_r+0x20>)
 8015e58:	4605      	mov	r5, r0
 8015e5a:	4608      	mov	r0, r1
 8015e5c:	4611      	mov	r1, r2
 8015e5e:	2200      	movs	r2, #0
 8015e60:	6022      	str	r2, [r4, #0]
 8015e62:	461a      	mov	r2, r3
 8015e64:	f7ea ff07 	bl	8000c76 <_write>
 8015e68:	1c43      	adds	r3, r0, #1
 8015e6a:	d102      	bne.n	8015e72 <_write_r+0x1e>
 8015e6c:	6823      	ldr	r3, [r4, #0]
 8015e6e:	b103      	cbz	r3, 8015e72 <_write_r+0x1e>
 8015e70:	602b      	str	r3, [r5, #0]
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	2000b904 	.word	0x2000b904

08015e78 <__swsetup_r>:
 8015e78:	4b32      	ldr	r3, [pc, #200]	; (8015f44 <__swsetup_r+0xcc>)
 8015e7a:	b570      	push	{r4, r5, r6, lr}
 8015e7c:	681d      	ldr	r5, [r3, #0]
 8015e7e:	4606      	mov	r6, r0
 8015e80:	460c      	mov	r4, r1
 8015e82:	b125      	cbz	r5, 8015e8e <__swsetup_r+0x16>
 8015e84:	69ab      	ldr	r3, [r5, #24]
 8015e86:	b913      	cbnz	r3, 8015e8e <__swsetup_r+0x16>
 8015e88:	4628      	mov	r0, r5
 8015e8a:	f7ff fb3b 	bl	8015504 <__sinit>
 8015e8e:	4b2e      	ldr	r3, [pc, #184]	; (8015f48 <__swsetup_r+0xd0>)
 8015e90:	429c      	cmp	r4, r3
 8015e92:	d10f      	bne.n	8015eb4 <__swsetup_r+0x3c>
 8015e94:	686c      	ldr	r4, [r5, #4]
 8015e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	0715      	lsls	r5, r2, #28
 8015e9e:	d42c      	bmi.n	8015efa <__swsetup_r+0x82>
 8015ea0:	06d0      	lsls	r0, r2, #27
 8015ea2:	d411      	bmi.n	8015ec8 <__swsetup_r+0x50>
 8015ea4:	2209      	movs	r2, #9
 8015ea6:	6032      	str	r2, [r6, #0]
 8015ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eac:	81a3      	strh	r3, [r4, #12]
 8015eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eb2:	e03e      	b.n	8015f32 <__swsetup_r+0xba>
 8015eb4:	4b25      	ldr	r3, [pc, #148]	; (8015f4c <__swsetup_r+0xd4>)
 8015eb6:	429c      	cmp	r4, r3
 8015eb8:	d101      	bne.n	8015ebe <__swsetup_r+0x46>
 8015eba:	68ac      	ldr	r4, [r5, #8]
 8015ebc:	e7eb      	b.n	8015e96 <__swsetup_r+0x1e>
 8015ebe:	4b24      	ldr	r3, [pc, #144]	; (8015f50 <__swsetup_r+0xd8>)
 8015ec0:	429c      	cmp	r4, r3
 8015ec2:	bf08      	it	eq
 8015ec4:	68ec      	ldreq	r4, [r5, #12]
 8015ec6:	e7e6      	b.n	8015e96 <__swsetup_r+0x1e>
 8015ec8:	0751      	lsls	r1, r2, #29
 8015eca:	d512      	bpl.n	8015ef2 <__swsetup_r+0x7a>
 8015ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ece:	b141      	cbz	r1, 8015ee2 <__swsetup_r+0x6a>
 8015ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ed4:	4299      	cmp	r1, r3
 8015ed6:	d002      	beq.n	8015ede <__swsetup_r+0x66>
 8015ed8:	4630      	mov	r0, r6
 8015eda:	f7ff fba5 	bl	8015628 <_free_r>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8015ee2:	89a3      	ldrh	r3, [r4, #12]
 8015ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015ee8:	81a3      	strh	r3, [r4, #12]
 8015eea:	2300      	movs	r3, #0
 8015eec:	6063      	str	r3, [r4, #4]
 8015eee:	6923      	ldr	r3, [r4, #16]
 8015ef0:	6023      	str	r3, [r4, #0]
 8015ef2:	89a3      	ldrh	r3, [r4, #12]
 8015ef4:	f043 0308 	orr.w	r3, r3, #8
 8015ef8:	81a3      	strh	r3, [r4, #12]
 8015efa:	6923      	ldr	r3, [r4, #16]
 8015efc:	b94b      	cbnz	r3, 8015f12 <__swsetup_r+0x9a>
 8015efe:	89a3      	ldrh	r3, [r4, #12]
 8015f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f08:	d003      	beq.n	8015f12 <__swsetup_r+0x9a>
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	4630      	mov	r0, r6
 8015f0e:	f000 f917 	bl	8016140 <__smakebuf_r>
 8015f12:	89a2      	ldrh	r2, [r4, #12]
 8015f14:	f012 0301 	ands.w	r3, r2, #1
 8015f18:	d00c      	beq.n	8015f34 <__swsetup_r+0xbc>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	60a3      	str	r3, [r4, #8]
 8015f1e:	6963      	ldr	r3, [r4, #20]
 8015f20:	425b      	negs	r3, r3
 8015f22:	61a3      	str	r3, [r4, #24]
 8015f24:	6923      	ldr	r3, [r4, #16]
 8015f26:	b953      	cbnz	r3, 8015f3e <__swsetup_r+0xc6>
 8015f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015f30:	d1ba      	bne.n	8015ea8 <__swsetup_r+0x30>
 8015f32:	bd70      	pop	{r4, r5, r6, pc}
 8015f34:	0792      	lsls	r2, r2, #30
 8015f36:	bf58      	it	pl
 8015f38:	6963      	ldrpl	r3, [r4, #20]
 8015f3a:	60a3      	str	r3, [r4, #8]
 8015f3c:	e7f2      	b.n	8015f24 <__swsetup_r+0xac>
 8015f3e:	2000      	movs	r0, #0
 8015f40:	e7f7      	b.n	8015f32 <__swsetup_r+0xba>
 8015f42:	bf00      	nop
 8015f44:	20000020 	.word	0x20000020
 8015f48:	08019284 	.word	0x08019284
 8015f4c:	080192a4 	.word	0x080192a4
 8015f50:	08019264 	.word	0x08019264

08015f54 <_close_r>:
 8015f54:	b538      	push	{r3, r4, r5, lr}
 8015f56:	4c06      	ldr	r4, [pc, #24]	; (8015f70 <_close_r+0x1c>)
 8015f58:	2300      	movs	r3, #0
 8015f5a:	4605      	mov	r5, r0
 8015f5c:	4608      	mov	r0, r1
 8015f5e:	6023      	str	r3, [r4, #0]
 8015f60:	f7ea fea5 	bl	8000cae <_close>
 8015f64:	1c43      	adds	r3, r0, #1
 8015f66:	d102      	bne.n	8015f6e <_close_r+0x1a>
 8015f68:	6823      	ldr	r3, [r4, #0]
 8015f6a:	b103      	cbz	r3, 8015f6e <_close_r+0x1a>
 8015f6c:	602b      	str	r3, [r5, #0]
 8015f6e:	bd38      	pop	{r3, r4, r5, pc}
 8015f70:	2000b904 	.word	0x2000b904

08015f74 <__sflush_r>:
 8015f74:	898a      	ldrh	r2, [r1, #12]
 8015f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f7a:	4605      	mov	r5, r0
 8015f7c:	0710      	lsls	r0, r2, #28
 8015f7e:	460c      	mov	r4, r1
 8015f80:	d458      	bmi.n	8016034 <__sflush_r+0xc0>
 8015f82:	684b      	ldr	r3, [r1, #4]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	dc05      	bgt.n	8015f94 <__sflush_r+0x20>
 8015f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	dc02      	bgt.n	8015f94 <__sflush_r+0x20>
 8015f8e:	2000      	movs	r0, #0
 8015f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f96:	2e00      	cmp	r6, #0
 8015f98:	d0f9      	beq.n	8015f8e <__sflush_r+0x1a>
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015fa0:	682f      	ldr	r7, [r5, #0]
 8015fa2:	6a21      	ldr	r1, [r4, #32]
 8015fa4:	602b      	str	r3, [r5, #0]
 8015fa6:	d032      	beq.n	801600e <__sflush_r+0x9a>
 8015fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015faa:	89a3      	ldrh	r3, [r4, #12]
 8015fac:	075a      	lsls	r2, r3, #29
 8015fae:	d505      	bpl.n	8015fbc <__sflush_r+0x48>
 8015fb0:	6863      	ldr	r3, [r4, #4]
 8015fb2:	1ac0      	subs	r0, r0, r3
 8015fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015fb6:	b10b      	cbz	r3, 8015fbc <__sflush_r+0x48>
 8015fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015fba:	1ac0      	subs	r0, r0, r3
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015fc2:	6a21      	ldr	r1, [r4, #32]
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	47b0      	blx	r6
 8015fc8:	1c43      	adds	r3, r0, #1
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	d106      	bne.n	8015fdc <__sflush_r+0x68>
 8015fce:	6829      	ldr	r1, [r5, #0]
 8015fd0:	291d      	cmp	r1, #29
 8015fd2:	d848      	bhi.n	8016066 <__sflush_r+0xf2>
 8015fd4:	4a29      	ldr	r2, [pc, #164]	; (801607c <__sflush_r+0x108>)
 8015fd6:	40ca      	lsrs	r2, r1
 8015fd8:	07d6      	lsls	r6, r2, #31
 8015fda:	d544      	bpl.n	8016066 <__sflush_r+0xf2>
 8015fdc:	2200      	movs	r2, #0
 8015fde:	6062      	str	r2, [r4, #4]
 8015fe0:	04d9      	lsls	r1, r3, #19
 8015fe2:	6922      	ldr	r2, [r4, #16]
 8015fe4:	6022      	str	r2, [r4, #0]
 8015fe6:	d504      	bpl.n	8015ff2 <__sflush_r+0x7e>
 8015fe8:	1c42      	adds	r2, r0, #1
 8015fea:	d101      	bne.n	8015ff0 <__sflush_r+0x7c>
 8015fec:	682b      	ldr	r3, [r5, #0]
 8015fee:	b903      	cbnz	r3, 8015ff2 <__sflush_r+0x7e>
 8015ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8015ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ff4:	602f      	str	r7, [r5, #0]
 8015ff6:	2900      	cmp	r1, #0
 8015ff8:	d0c9      	beq.n	8015f8e <__sflush_r+0x1a>
 8015ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ffe:	4299      	cmp	r1, r3
 8016000:	d002      	beq.n	8016008 <__sflush_r+0x94>
 8016002:	4628      	mov	r0, r5
 8016004:	f7ff fb10 	bl	8015628 <_free_r>
 8016008:	2000      	movs	r0, #0
 801600a:	6360      	str	r0, [r4, #52]	; 0x34
 801600c:	e7c0      	b.n	8015f90 <__sflush_r+0x1c>
 801600e:	2301      	movs	r3, #1
 8016010:	4628      	mov	r0, r5
 8016012:	47b0      	blx	r6
 8016014:	1c41      	adds	r1, r0, #1
 8016016:	d1c8      	bne.n	8015faa <__sflush_r+0x36>
 8016018:	682b      	ldr	r3, [r5, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d0c5      	beq.n	8015faa <__sflush_r+0x36>
 801601e:	2b1d      	cmp	r3, #29
 8016020:	d001      	beq.n	8016026 <__sflush_r+0xb2>
 8016022:	2b16      	cmp	r3, #22
 8016024:	d101      	bne.n	801602a <__sflush_r+0xb6>
 8016026:	602f      	str	r7, [r5, #0]
 8016028:	e7b1      	b.n	8015f8e <__sflush_r+0x1a>
 801602a:	89a3      	ldrh	r3, [r4, #12]
 801602c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016030:	81a3      	strh	r3, [r4, #12]
 8016032:	e7ad      	b.n	8015f90 <__sflush_r+0x1c>
 8016034:	690f      	ldr	r7, [r1, #16]
 8016036:	2f00      	cmp	r7, #0
 8016038:	d0a9      	beq.n	8015f8e <__sflush_r+0x1a>
 801603a:	0793      	lsls	r3, r2, #30
 801603c:	680e      	ldr	r6, [r1, #0]
 801603e:	bf08      	it	eq
 8016040:	694b      	ldreq	r3, [r1, #20]
 8016042:	600f      	str	r7, [r1, #0]
 8016044:	bf18      	it	ne
 8016046:	2300      	movne	r3, #0
 8016048:	eba6 0807 	sub.w	r8, r6, r7
 801604c:	608b      	str	r3, [r1, #8]
 801604e:	f1b8 0f00 	cmp.w	r8, #0
 8016052:	dd9c      	ble.n	8015f8e <__sflush_r+0x1a>
 8016054:	4643      	mov	r3, r8
 8016056:	463a      	mov	r2, r7
 8016058:	6a21      	ldr	r1, [r4, #32]
 801605a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801605c:	4628      	mov	r0, r5
 801605e:	47b0      	blx	r6
 8016060:	2800      	cmp	r0, #0
 8016062:	dc06      	bgt.n	8016072 <__sflush_r+0xfe>
 8016064:	89a3      	ldrh	r3, [r4, #12]
 8016066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801606a:	81a3      	strh	r3, [r4, #12]
 801606c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016070:	e78e      	b.n	8015f90 <__sflush_r+0x1c>
 8016072:	4407      	add	r7, r0
 8016074:	eba8 0800 	sub.w	r8, r8, r0
 8016078:	e7e9      	b.n	801604e <__sflush_r+0xda>
 801607a:	bf00      	nop
 801607c:	20400001 	.word	0x20400001

08016080 <_fflush_r>:
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	690b      	ldr	r3, [r1, #16]
 8016084:	4605      	mov	r5, r0
 8016086:	460c      	mov	r4, r1
 8016088:	b1db      	cbz	r3, 80160c2 <_fflush_r+0x42>
 801608a:	b118      	cbz	r0, 8016094 <_fflush_r+0x14>
 801608c:	6983      	ldr	r3, [r0, #24]
 801608e:	b90b      	cbnz	r3, 8016094 <_fflush_r+0x14>
 8016090:	f7ff fa38 	bl	8015504 <__sinit>
 8016094:	4b0c      	ldr	r3, [pc, #48]	; (80160c8 <_fflush_r+0x48>)
 8016096:	429c      	cmp	r4, r3
 8016098:	d109      	bne.n	80160ae <_fflush_r+0x2e>
 801609a:	686c      	ldr	r4, [r5, #4]
 801609c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160a0:	b17b      	cbz	r3, 80160c2 <_fflush_r+0x42>
 80160a2:	4621      	mov	r1, r4
 80160a4:	4628      	mov	r0, r5
 80160a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160aa:	f7ff bf63 	b.w	8015f74 <__sflush_r>
 80160ae:	4b07      	ldr	r3, [pc, #28]	; (80160cc <_fflush_r+0x4c>)
 80160b0:	429c      	cmp	r4, r3
 80160b2:	d101      	bne.n	80160b8 <_fflush_r+0x38>
 80160b4:	68ac      	ldr	r4, [r5, #8]
 80160b6:	e7f1      	b.n	801609c <_fflush_r+0x1c>
 80160b8:	4b05      	ldr	r3, [pc, #20]	; (80160d0 <_fflush_r+0x50>)
 80160ba:	429c      	cmp	r4, r3
 80160bc:	bf08      	it	eq
 80160be:	68ec      	ldreq	r4, [r5, #12]
 80160c0:	e7ec      	b.n	801609c <_fflush_r+0x1c>
 80160c2:	2000      	movs	r0, #0
 80160c4:	bd38      	pop	{r3, r4, r5, pc}
 80160c6:	bf00      	nop
 80160c8:	08019284 	.word	0x08019284
 80160cc:	080192a4 	.word	0x080192a4
 80160d0:	08019264 	.word	0x08019264

080160d4 <_lseek_r>:
 80160d4:	b538      	push	{r3, r4, r5, lr}
 80160d6:	4c07      	ldr	r4, [pc, #28]	; (80160f4 <_lseek_r+0x20>)
 80160d8:	4605      	mov	r5, r0
 80160da:	4608      	mov	r0, r1
 80160dc:	4611      	mov	r1, r2
 80160de:	2200      	movs	r2, #0
 80160e0:	6022      	str	r2, [r4, #0]
 80160e2:	461a      	mov	r2, r3
 80160e4:	f7ea fe0a 	bl	8000cfc <_lseek>
 80160e8:	1c43      	adds	r3, r0, #1
 80160ea:	d102      	bne.n	80160f2 <_lseek_r+0x1e>
 80160ec:	6823      	ldr	r3, [r4, #0]
 80160ee:	b103      	cbz	r3, 80160f2 <_lseek_r+0x1e>
 80160f0:	602b      	str	r3, [r5, #0]
 80160f2:	bd38      	pop	{r3, r4, r5, pc}
 80160f4:	2000b904 	.word	0x2000b904

080160f8 <__swhatbuf_r>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	460e      	mov	r6, r1
 80160fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016100:	2900      	cmp	r1, #0
 8016102:	b096      	sub	sp, #88	; 0x58
 8016104:	4614      	mov	r4, r2
 8016106:	461d      	mov	r5, r3
 8016108:	da07      	bge.n	801611a <__swhatbuf_r+0x22>
 801610a:	2300      	movs	r3, #0
 801610c:	602b      	str	r3, [r5, #0]
 801610e:	89b3      	ldrh	r3, [r6, #12]
 8016110:	061a      	lsls	r2, r3, #24
 8016112:	d410      	bmi.n	8016136 <__swhatbuf_r+0x3e>
 8016114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016118:	e00e      	b.n	8016138 <__swhatbuf_r+0x40>
 801611a:	466a      	mov	r2, sp
 801611c:	f000 f864 	bl	80161e8 <_fstat_r>
 8016120:	2800      	cmp	r0, #0
 8016122:	dbf2      	blt.n	801610a <__swhatbuf_r+0x12>
 8016124:	9a01      	ldr	r2, [sp, #4]
 8016126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801612a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801612e:	425a      	negs	r2, r3
 8016130:	415a      	adcs	r2, r3
 8016132:	602a      	str	r2, [r5, #0]
 8016134:	e7ee      	b.n	8016114 <__swhatbuf_r+0x1c>
 8016136:	2340      	movs	r3, #64	; 0x40
 8016138:	2000      	movs	r0, #0
 801613a:	6023      	str	r3, [r4, #0]
 801613c:	b016      	add	sp, #88	; 0x58
 801613e:	bd70      	pop	{r4, r5, r6, pc}

08016140 <__smakebuf_r>:
 8016140:	898b      	ldrh	r3, [r1, #12]
 8016142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016144:	079d      	lsls	r5, r3, #30
 8016146:	4606      	mov	r6, r0
 8016148:	460c      	mov	r4, r1
 801614a:	d507      	bpl.n	801615c <__smakebuf_r+0x1c>
 801614c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016150:	6023      	str	r3, [r4, #0]
 8016152:	6123      	str	r3, [r4, #16]
 8016154:	2301      	movs	r3, #1
 8016156:	6163      	str	r3, [r4, #20]
 8016158:	b002      	add	sp, #8
 801615a:	bd70      	pop	{r4, r5, r6, pc}
 801615c:	ab01      	add	r3, sp, #4
 801615e:	466a      	mov	r2, sp
 8016160:	f7ff ffca 	bl	80160f8 <__swhatbuf_r>
 8016164:	9900      	ldr	r1, [sp, #0]
 8016166:	4605      	mov	r5, r0
 8016168:	4630      	mov	r0, r6
 801616a:	f7ff faab 	bl	80156c4 <_malloc_r>
 801616e:	b948      	cbnz	r0, 8016184 <__smakebuf_r+0x44>
 8016170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016174:	059a      	lsls	r2, r3, #22
 8016176:	d4ef      	bmi.n	8016158 <__smakebuf_r+0x18>
 8016178:	f023 0303 	bic.w	r3, r3, #3
 801617c:	f043 0302 	orr.w	r3, r3, #2
 8016180:	81a3      	strh	r3, [r4, #12]
 8016182:	e7e3      	b.n	801614c <__smakebuf_r+0xc>
 8016184:	4b0d      	ldr	r3, [pc, #52]	; (80161bc <__smakebuf_r+0x7c>)
 8016186:	62b3      	str	r3, [r6, #40]	; 0x28
 8016188:	89a3      	ldrh	r3, [r4, #12]
 801618a:	6020      	str	r0, [r4, #0]
 801618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016190:	81a3      	strh	r3, [r4, #12]
 8016192:	9b00      	ldr	r3, [sp, #0]
 8016194:	6163      	str	r3, [r4, #20]
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	6120      	str	r0, [r4, #16]
 801619a:	b15b      	cbz	r3, 80161b4 <__smakebuf_r+0x74>
 801619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161a0:	4630      	mov	r0, r6
 80161a2:	f000 f833 	bl	801620c <_isatty_r>
 80161a6:	b128      	cbz	r0, 80161b4 <__smakebuf_r+0x74>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	f023 0303 	bic.w	r3, r3, #3
 80161ae:	f043 0301 	orr.w	r3, r3, #1
 80161b2:	81a3      	strh	r3, [r4, #12]
 80161b4:	89a3      	ldrh	r3, [r4, #12]
 80161b6:	431d      	orrs	r5, r3
 80161b8:	81a5      	strh	r5, [r4, #12]
 80161ba:	e7cd      	b.n	8016158 <__smakebuf_r+0x18>
 80161bc:	080154cd 	.word	0x080154cd

080161c0 <__malloc_lock>:
 80161c0:	4770      	bx	lr

080161c2 <__malloc_unlock>:
 80161c2:	4770      	bx	lr

080161c4 <_read_r>:
 80161c4:	b538      	push	{r3, r4, r5, lr}
 80161c6:	4c07      	ldr	r4, [pc, #28]	; (80161e4 <_read_r+0x20>)
 80161c8:	4605      	mov	r5, r0
 80161ca:	4608      	mov	r0, r1
 80161cc:	4611      	mov	r1, r2
 80161ce:	2200      	movs	r2, #0
 80161d0:	6022      	str	r2, [r4, #0]
 80161d2:	461a      	mov	r2, r3
 80161d4:	f7ea fd32 	bl	8000c3c <_read>
 80161d8:	1c43      	adds	r3, r0, #1
 80161da:	d102      	bne.n	80161e2 <_read_r+0x1e>
 80161dc:	6823      	ldr	r3, [r4, #0]
 80161de:	b103      	cbz	r3, 80161e2 <_read_r+0x1e>
 80161e0:	602b      	str	r3, [r5, #0]
 80161e2:	bd38      	pop	{r3, r4, r5, pc}
 80161e4:	2000b904 	.word	0x2000b904

080161e8 <_fstat_r>:
 80161e8:	b538      	push	{r3, r4, r5, lr}
 80161ea:	4c07      	ldr	r4, [pc, #28]	; (8016208 <_fstat_r+0x20>)
 80161ec:	2300      	movs	r3, #0
 80161ee:	4605      	mov	r5, r0
 80161f0:	4608      	mov	r0, r1
 80161f2:	4611      	mov	r1, r2
 80161f4:	6023      	str	r3, [r4, #0]
 80161f6:	f7ea fd66 	bl	8000cc6 <_fstat>
 80161fa:	1c43      	adds	r3, r0, #1
 80161fc:	d102      	bne.n	8016204 <_fstat_r+0x1c>
 80161fe:	6823      	ldr	r3, [r4, #0]
 8016200:	b103      	cbz	r3, 8016204 <_fstat_r+0x1c>
 8016202:	602b      	str	r3, [r5, #0]
 8016204:	bd38      	pop	{r3, r4, r5, pc}
 8016206:	bf00      	nop
 8016208:	2000b904 	.word	0x2000b904

0801620c <_isatty_r>:
 801620c:	b538      	push	{r3, r4, r5, lr}
 801620e:	4c06      	ldr	r4, [pc, #24]	; (8016228 <_isatty_r+0x1c>)
 8016210:	2300      	movs	r3, #0
 8016212:	4605      	mov	r5, r0
 8016214:	4608      	mov	r0, r1
 8016216:	6023      	str	r3, [r4, #0]
 8016218:	f7ea fd65 	bl	8000ce6 <_isatty>
 801621c:	1c43      	adds	r3, r0, #1
 801621e:	d102      	bne.n	8016226 <_isatty_r+0x1a>
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	b103      	cbz	r3, 8016226 <_isatty_r+0x1a>
 8016224:	602b      	str	r3, [r5, #0]
 8016226:	bd38      	pop	{r3, r4, r5, pc}
 8016228:	2000b904 	.word	0x2000b904

0801622c <_init>:
 801622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801622e:	bf00      	nop
 8016230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016232:	bc08      	pop	{r3}
 8016234:	469e      	mov	lr, r3
 8016236:	4770      	bx	lr

08016238 <_fini>:
 8016238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623a:	bf00      	nop
 801623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801623e:	bc08      	pop	{r3}
 8016240:	469e      	mov	lr, r3
 8016242:	4770      	bx	lr
